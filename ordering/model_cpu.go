/*
Ordering

This document outlines the ordering API. The API is only available for customers with invoice payment method.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ordering

import (
	"encoding/json"
)

// checks if the Cpu type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Cpu{}

// Cpu CPU info of the server
type Cpu struct {
	// Quantity of cores per CPU
	CoresPerCPU *string `json:"coresPerCPU,omitempty"`
	// Sum of CPU cores
	TotalCores NullableString `json:"totalCores,omitempty"`
	// Quantity of CPUs
	Quantity *string `json:"quantity,omitempty"`
	// CPU speed
	Speed *string `json:"speed,omitempty"`
	// CPU type
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Cpu Cpu

// NewCpu instantiates a new Cpu object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCpu() *Cpu {
	this := Cpu{}
	return &this
}

// NewCpuWithDefaults instantiates a new Cpu object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCpuWithDefaults() *Cpu {
	this := Cpu{}
	return &this
}

// GetCoresPerCPU returns the CoresPerCPU field value if set, zero value otherwise.
func (o *Cpu) GetCoresPerCPU() string {
	if o == nil || IsNil(o.CoresPerCPU) {
		var ret string
		return ret
	}
	return *o.CoresPerCPU
}

// GetCoresPerCPUOk returns a tuple with the CoresPerCPU field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cpu) GetCoresPerCPUOk() (*string, bool) {
	if o == nil || IsNil(o.CoresPerCPU) {
		return nil, false
	}
	return o.CoresPerCPU, true
}

// HasCoresPerCPU returns a boolean if a field has been set.
func (o *Cpu) HasCoresPerCPU() bool {
	if o != nil && !IsNil(o.CoresPerCPU) {
		return true
	}

	return false
}

// SetCoresPerCPU gets a reference to the given string and assigns it to the CoresPerCPU field.
func (o *Cpu) SetCoresPerCPU(v string) {
	o.CoresPerCPU = &v
}

// GetTotalCores returns the TotalCores field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cpu) GetTotalCores() string {
	if o == nil || IsNil(o.TotalCores.Get()) {
		var ret string
		return ret
	}
	return *o.TotalCores.Get()
}

// GetTotalCoresOk returns a tuple with the TotalCores field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cpu) GetTotalCoresOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalCores.Get(), o.TotalCores.IsSet()
}

// HasTotalCores returns a boolean if a field has been set.
func (o *Cpu) HasTotalCores() bool {
	if o != nil && o.TotalCores.IsSet() {
		return true
	}

	return false
}

// SetTotalCores gets a reference to the given NullableString and assigns it to the TotalCores field.
func (o *Cpu) SetTotalCores(v string) {
	o.TotalCores.Set(&v)
}
// SetTotalCoresNil sets the value for TotalCores to be an explicit nil
func (o *Cpu) SetTotalCoresNil() {
	o.TotalCores.Set(nil)
}

// UnsetTotalCores ensures that no value is present for TotalCores, not even an explicit nil
func (o *Cpu) UnsetTotalCores() {
	o.TotalCores.Unset()
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *Cpu) GetQuantity() string {
	if o == nil || IsNil(o.Quantity) {
		var ret string
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cpu) GetQuantityOk() (*string, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *Cpu) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given string and assigns it to the Quantity field.
func (o *Cpu) SetQuantity(v string) {
	o.Quantity = &v
}

// GetSpeed returns the Speed field value if set, zero value otherwise.
func (o *Cpu) GetSpeed() string {
	if o == nil || IsNil(o.Speed) {
		var ret string
		return ret
	}
	return *o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cpu) GetSpeedOk() (*string, bool) {
	if o == nil || IsNil(o.Speed) {
		return nil, false
	}
	return o.Speed, true
}

// HasSpeed returns a boolean if a field has been set.
func (o *Cpu) HasSpeed() bool {
	if o != nil && !IsNil(o.Speed) {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given string and assigns it to the Speed field.
func (o *Cpu) SetSpeed(v string) {
	o.Speed = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Cpu) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cpu) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Cpu) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Cpu) SetType(v string) {
	o.Type = &v
}

func (o Cpu) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cpu) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CoresPerCPU) {
		toSerialize["coresPerCPU"] = o.CoresPerCPU
	}
	if o.TotalCores.IsSet() {
		toSerialize["totalCores"] = o.TotalCores.Get()
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.Speed) {
		toSerialize["speed"] = o.Speed
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Cpu) UnmarshalJSON(data []byte) (err error) {
	varCpu := _Cpu{}

	err = json.Unmarshal(data, &varCpu)

	if err != nil {
		return err
	}

	*o = Cpu(varCpu)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "coresPerCPU")
		delete(additionalProperties, "totalCores")
		delete(additionalProperties, "quantity")
		delete(additionalProperties, "speed")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCpu struct {
	value *Cpu
	isSet bool
}

func (v NullableCpu) Get() *Cpu {
	return v.value
}

func (v *NullableCpu) Set(val *Cpu) {
	v.value = val
	v.isSet = true
}

func (v NullableCpu) IsSet() bool {
	return v.isSet
}

func (v *NullableCpu) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCpu(val *Cpu) *NullableCpu {
	return &NullableCpu{value: val, isSet: true}
}

func (v NullableCpu) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCpu) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


