/*
Ordering

This document outlines the ordering API. The API is only available for customers with invoice payment method.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ordering

import (
	"encoding/json"
)

// checks if the DedicatedServerPricePrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DedicatedServerPricePrice{}

// DedicatedServerPricePrice Price details of the server
type DedicatedServerPricePrice struct {
	// Price's currency
	Currency *string `json:"currency,omitempty"`
	// Inicial price
	BasePrice *float32 `json:"basePrice,omitempty"`
	// Tax
	Tax *float32 `json:"tax,omitempty"`
	// Setup Fee
	SetupFee *float32 `json:"setupFee,omitempty"`
	// Ram size
	Fee *float32 `json:"fee,omitempty"`
	Discounts *DedicatedServerPricePriceDiscounts `json:"discounts,omitempty"`
	// Final price
	Total *float32 `json:"total,omitempty"`
	// Billing periodicity
	BillingCycle *string `json:"billingCycle,omitempty"`
	// Contract terms
	ContractTerms []ContractTerm `json:"contractTerms,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DedicatedServerPricePrice DedicatedServerPricePrice

// NewDedicatedServerPricePrice instantiates a new DedicatedServerPricePrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDedicatedServerPricePrice() *DedicatedServerPricePrice {
	this := DedicatedServerPricePrice{}
	return &this
}

// NewDedicatedServerPricePriceWithDefaults instantiates a new DedicatedServerPricePrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDedicatedServerPricePriceWithDefaults() *DedicatedServerPricePrice {
	this := DedicatedServerPricePrice{}
	return &this
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *DedicatedServerPricePrice) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DedicatedServerPricePrice) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *DedicatedServerPricePrice) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *DedicatedServerPricePrice) SetCurrency(v string) {
	o.Currency = &v
}

// GetBasePrice returns the BasePrice field value if set, zero value otherwise.
func (o *DedicatedServerPricePrice) GetBasePrice() float32 {
	if o == nil || IsNil(o.BasePrice) {
		var ret float32
		return ret
	}
	return *o.BasePrice
}

// GetBasePriceOk returns a tuple with the BasePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DedicatedServerPricePrice) GetBasePriceOk() (*float32, bool) {
	if o == nil || IsNil(o.BasePrice) {
		return nil, false
	}
	return o.BasePrice, true
}

// HasBasePrice returns a boolean if a field has been set.
func (o *DedicatedServerPricePrice) HasBasePrice() bool {
	if o != nil && !IsNil(o.BasePrice) {
		return true
	}

	return false
}

// SetBasePrice gets a reference to the given float32 and assigns it to the BasePrice field.
func (o *DedicatedServerPricePrice) SetBasePrice(v float32) {
	o.BasePrice = &v
}

// GetTax returns the Tax field value if set, zero value otherwise.
func (o *DedicatedServerPricePrice) GetTax() float32 {
	if o == nil || IsNil(o.Tax) {
		var ret float32
		return ret
	}
	return *o.Tax
}

// GetTaxOk returns a tuple with the Tax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DedicatedServerPricePrice) GetTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.Tax) {
		return nil, false
	}
	return o.Tax, true
}

// HasTax returns a boolean if a field has been set.
func (o *DedicatedServerPricePrice) HasTax() bool {
	if o != nil && !IsNil(o.Tax) {
		return true
	}

	return false
}

// SetTax gets a reference to the given float32 and assigns it to the Tax field.
func (o *DedicatedServerPricePrice) SetTax(v float32) {
	o.Tax = &v
}

// GetSetupFee returns the SetupFee field value if set, zero value otherwise.
func (o *DedicatedServerPricePrice) GetSetupFee() float32 {
	if o == nil || IsNil(o.SetupFee) {
		var ret float32
		return ret
	}
	return *o.SetupFee
}

// GetSetupFeeOk returns a tuple with the SetupFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DedicatedServerPricePrice) GetSetupFeeOk() (*float32, bool) {
	if o == nil || IsNil(o.SetupFee) {
		return nil, false
	}
	return o.SetupFee, true
}

// HasSetupFee returns a boolean if a field has been set.
func (o *DedicatedServerPricePrice) HasSetupFee() bool {
	if o != nil && !IsNil(o.SetupFee) {
		return true
	}

	return false
}

// SetSetupFee gets a reference to the given float32 and assigns it to the SetupFee field.
func (o *DedicatedServerPricePrice) SetSetupFee(v float32) {
	o.SetupFee = &v
}

// GetFee returns the Fee field value if set, zero value otherwise.
func (o *DedicatedServerPricePrice) GetFee() float32 {
	if o == nil || IsNil(o.Fee) {
		var ret float32
		return ret
	}
	return *o.Fee
}

// GetFeeOk returns a tuple with the Fee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DedicatedServerPricePrice) GetFeeOk() (*float32, bool) {
	if o == nil || IsNil(o.Fee) {
		return nil, false
	}
	return o.Fee, true
}

// HasFee returns a boolean if a field has been set.
func (o *DedicatedServerPricePrice) HasFee() bool {
	if o != nil && !IsNil(o.Fee) {
		return true
	}

	return false
}

// SetFee gets a reference to the given float32 and assigns it to the Fee field.
func (o *DedicatedServerPricePrice) SetFee(v float32) {
	o.Fee = &v
}

// GetDiscounts returns the Discounts field value if set, zero value otherwise.
func (o *DedicatedServerPricePrice) GetDiscounts() DedicatedServerPricePriceDiscounts {
	if o == nil || IsNil(o.Discounts) {
		var ret DedicatedServerPricePriceDiscounts
		return ret
	}
	return *o.Discounts
}

// GetDiscountsOk returns a tuple with the Discounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DedicatedServerPricePrice) GetDiscountsOk() (*DedicatedServerPricePriceDiscounts, bool) {
	if o == nil || IsNil(o.Discounts) {
		return nil, false
	}
	return o.Discounts, true
}

// HasDiscounts returns a boolean if a field has been set.
func (o *DedicatedServerPricePrice) HasDiscounts() bool {
	if o != nil && !IsNil(o.Discounts) {
		return true
	}

	return false
}

// SetDiscounts gets a reference to the given DedicatedServerPricePriceDiscounts and assigns it to the Discounts field.
func (o *DedicatedServerPricePrice) SetDiscounts(v DedicatedServerPricePriceDiscounts) {
	o.Discounts = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *DedicatedServerPricePrice) GetTotal() float32 {
	if o == nil || IsNil(o.Total) {
		var ret float32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DedicatedServerPricePrice) GetTotalOk() (*float32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *DedicatedServerPricePrice) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float32 and assigns it to the Total field.
func (o *DedicatedServerPricePrice) SetTotal(v float32) {
	o.Total = &v
}

// GetBillingCycle returns the BillingCycle field value if set, zero value otherwise.
func (o *DedicatedServerPricePrice) GetBillingCycle() string {
	if o == nil || IsNil(o.BillingCycle) {
		var ret string
		return ret
	}
	return *o.BillingCycle
}

// GetBillingCycleOk returns a tuple with the BillingCycle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DedicatedServerPricePrice) GetBillingCycleOk() (*string, bool) {
	if o == nil || IsNil(o.BillingCycle) {
		return nil, false
	}
	return o.BillingCycle, true
}

// HasBillingCycle returns a boolean if a field has been set.
func (o *DedicatedServerPricePrice) HasBillingCycle() bool {
	if o != nil && !IsNil(o.BillingCycle) {
		return true
	}

	return false
}

// SetBillingCycle gets a reference to the given string and assigns it to the BillingCycle field.
func (o *DedicatedServerPricePrice) SetBillingCycle(v string) {
	o.BillingCycle = &v
}

// GetContractTerms returns the ContractTerms field value if set, zero value otherwise.
func (o *DedicatedServerPricePrice) GetContractTerms() []ContractTerm {
	if o == nil || IsNil(o.ContractTerms) {
		var ret []ContractTerm
		return ret
	}
	return o.ContractTerms
}

// GetContractTermsOk returns a tuple with the ContractTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DedicatedServerPricePrice) GetContractTermsOk() ([]ContractTerm, bool) {
	if o == nil || IsNil(o.ContractTerms) {
		return nil, false
	}
	return o.ContractTerms, true
}

// HasContractTerms returns a boolean if a field has been set.
func (o *DedicatedServerPricePrice) HasContractTerms() bool {
	if o != nil && !IsNil(o.ContractTerms) {
		return true
	}

	return false
}

// SetContractTerms gets a reference to the given []ContractTerm and assigns it to the ContractTerms field.
func (o *DedicatedServerPricePrice) SetContractTerms(v []ContractTerm) {
	o.ContractTerms = v
}

func (o DedicatedServerPricePrice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DedicatedServerPricePrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.BasePrice) {
		toSerialize["basePrice"] = o.BasePrice
	}
	if !IsNil(o.Tax) {
		toSerialize["tax"] = o.Tax
	}
	if !IsNil(o.SetupFee) {
		toSerialize["setupFee"] = o.SetupFee
	}
	if !IsNil(o.Fee) {
		toSerialize["fee"] = o.Fee
	}
	if !IsNil(o.Discounts) {
		toSerialize["discounts"] = o.Discounts
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.BillingCycle) {
		toSerialize["billingCycle"] = o.BillingCycle
	}
	if !IsNil(o.ContractTerms) {
		toSerialize["contractTerms"] = o.ContractTerms
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DedicatedServerPricePrice) UnmarshalJSON(data []byte) (err error) {
	varDedicatedServerPricePrice := _DedicatedServerPricePrice{}

	err = json.Unmarshal(data, &varDedicatedServerPricePrice)

	if err != nil {
		return err
	}

	*o = DedicatedServerPricePrice(varDedicatedServerPricePrice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "currency")
		delete(additionalProperties, "basePrice")
		delete(additionalProperties, "tax")
		delete(additionalProperties, "setupFee")
		delete(additionalProperties, "fee")
		delete(additionalProperties, "discounts")
		delete(additionalProperties, "total")
		delete(additionalProperties, "billingCycle")
		delete(additionalProperties, "contractTerms")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDedicatedServerPricePrice struct {
	value *DedicatedServerPricePrice
	isSet bool
}

func (v NullableDedicatedServerPricePrice) Get() *DedicatedServerPricePrice {
	return v.value
}

func (v *NullableDedicatedServerPricePrice) Set(val *DedicatedServerPricePrice) {
	v.value = val
	v.isSet = true
}

func (v NullableDedicatedServerPricePrice) IsSet() bool {
	return v.isSet
}

func (v *NullableDedicatedServerPricePrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDedicatedServerPricePrice(val *DedicatedServerPricePrice) *NullableDedicatedServerPricePrice {
	return &NullableDedicatedServerPricePrice{value: val, isSet: true}
}

func (v NullableDedicatedServerPricePrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDedicatedServerPricePrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


