/*
Ordering

This document outlines the ordering API. The API is only available for customers with invoice payment method.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ordering

import (
	"encoding/json"
)

// checks if the DedicatedServerPrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DedicatedServerPrice{}

// DedicatedServerPrice struct for DedicatedServerPrice
type DedicatedServerPrice struct {
	Price *DedicatedServerPricePrice `json:"price,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DedicatedServerPrice DedicatedServerPrice

// NewDedicatedServerPrice instantiates a new DedicatedServerPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDedicatedServerPrice() *DedicatedServerPrice {
	this := DedicatedServerPrice{}
	return &this
}

// NewDedicatedServerPriceWithDefaults instantiates a new DedicatedServerPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDedicatedServerPriceWithDefaults() *DedicatedServerPrice {
	this := DedicatedServerPrice{}
	return &this
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *DedicatedServerPrice) GetPrice() DedicatedServerPricePrice {
	if o == nil || IsNil(o.Price) {
		var ret DedicatedServerPricePrice
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DedicatedServerPrice) GetPriceOk() (*DedicatedServerPricePrice, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *DedicatedServerPrice) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given DedicatedServerPricePrice and assigns it to the Price field.
func (o *DedicatedServerPrice) SetPrice(v DedicatedServerPricePrice) {
	o.Price = &v
}

func (o DedicatedServerPrice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DedicatedServerPrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DedicatedServerPrice) UnmarshalJSON(data []byte) (err error) {
	varDedicatedServerPrice := _DedicatedServerPrice{}

	err = json.Unmarshal(data, &varDedicatedServerPrice)

	if err != nil {
		return err
	}

	*o = DedicatedServerPrice(varDedicatedServerPrice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "price")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDedicatedServerPrice struct {
	value *DedicatedServerPrice
	isSet bool
}

func (v NullableDedicatedServerPrice) Get() *DedicatedServerPrice {
	return v.value
}

func (v *NullableDedicatedServerPrice) Set(val *DedicatedServerPrice) {
	v.value = val
	v.isSet = true
}

func (v NullableDedicatedServerPrice) IsSet() bool {
	return v.isSet
}

func (v *NullableDedicatedServerPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDedicatedServerPrice(val *DedicatedServerPrice) *NullableDedicatedServerPrice {
	return &NullableDedicatedServerPrice{value: val, isSet: true}
}

func (v NullableDedicatedServerPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDedicatedServerPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


