/*
Ordering

This document outlines the ordering API. The API is only available for customers with invoice payment method.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ordering

import (
	"encoding/json"
)

// checks if the DedicatedServerPricePriceDiscounts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DedicatedServerPricePriceDiscounts{}

// DedicatedServerPricePriceDiscounts struct for DedicatedServerPricePriceDiscounts
type DedicatedServerPricePriceDiscounts struct {
	// Total discounts
	Total *float32 `json:"total,omitempty"`
	// Discounts details
	Details []Discount `json:"details,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DedicatedServerPricePriceDiscounts DedicatedServerPricePriceDiscounts

// NewDedicatedServerPricePriceDiscounts instantiates a new DedicatedServerPricePriceDiscounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDedicatedServerPricePriceDiscounts() *DedicatedServerPricePriceDiscounts {
	this := DedicatedServerPricePriceDiscounts{}
	return &this
}

// NewDedicatedServerPricePriceDiscountsWithDefaults instantiates a new DedicatedServerPricePriceDiscounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDedicatedServerPricePriceDiscountsWithDefaults() *DedicatedServerPricePriceDiscounts {
	this := DedicatedServerPricePriceDiscounts{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *DedicatedServerPricePriceDiscounts) GetTotal() float32 {
	if o == nil || IsNil(o.Total) {
		var ret float32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DedicatedServerPricePriceDiscounts) GetTotalOk() (*float32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *DedicatedServerPricePriceDiscounts) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float32 and assigns it to the Total field.
func (o *DedicatedServerPricePriceDiscounts) SetTotal(v float32) {
	o.Total = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *DedicatedServerPricePriceDiscounts) GetDetails() []Discount {
	if o == nil || IsNil(o.Details) {
		var ret []Discount
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DedicatedServerPricePriceDiscounts) GetDetailsOk() ([]Discount, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *DedicatedServerPricePriceDiscounts) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given []Discount and assigns it to the Details field.
func (o *DedicatedServerPricePriceDiscounts) SetDetails(v []Discount) {
	o.Details = v
}

func (o DedicatedServerPricePriceDiscounts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DedicatedServerPricePriceDiscounts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DedicatedServerPricePriceDiscounts) UnmarshalJSON(data []byte) (err error) {
	varDedicatedServerPricePriceDiscounts := _DedicatedServerPricePriceDiscounts{}

	err = json.Unmarshal(data, &varDedicatedServerPricePriceDiscounts)

	if err != nil {
		return err
	}

	*o = DedicatedServerPricePriceDiscounts(varDedicatedServerPricePriceDiscounts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "total")
		delete(additionalProperties, "details")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDedicatedServerPricePriceDiscounts struct {
	value *DedicatedServerPricePriceDiscounts
	isSet bool
}

func (v NullableDedicatedServerPricePriceDiscounts) Get() *DedicatedServerPricePriceDiscounts {
	return v.value
}

func (v *NullableDedicatedServerPricePriceDiscounts) Set(val *DedicatedServerPricePriceDiscounts) {
	v.value = val
	v.isSet = true
}

func (v NullableDedicatedServerPricePriceDiscounts) IsSet() bool {
	return v.isSet
}

func (v *NullableDedicatedServerPricePriceDiscounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDedicatedServerPricePriceDiscounts(val *DedicatedServerPricePriceDiscounts) *NullableDedicatedServerPricePriceDiscounts {
	return &NullableDedicatedServerPricePriceDiscounts{value: val, isSet: true}
}

func (v NullableDedicatedServerPricePriceDiscounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDedicatedServerPricePriceDiscounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


