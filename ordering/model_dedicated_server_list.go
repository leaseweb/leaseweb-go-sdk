/*
Ordering

This document outlines the ordering API. The API is only available for customers with invoice payment method.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ordering

import (
	"encoding/json"
)

// checks if the DedicatedServerList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DedicatedServerList{}

// DedicatedServerList struct for DedicatedServerList
type DedicatedServerList struct {
	Metadata *Metadata `json:"_metadata,omitempty"`
	DedicatedServers []DedicatedServerDetail `json:"dedicatedServers,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DedicatedServerList DedicatedServerList

// NewDedicatedServerList instantiates a new DedicatedServerList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDedicatedServerList() *DedicatedServerList {
	this := DedicatedServerList{}
	return &this
}

// NewDedicatedServerListWithDefaults instantiates a new DedicatedServerList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDedicatedServerListWithDefaults() *DedicatedServerList {
	this := DedicatedServerList{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *DedicatedServerList) GetMetadata() Metadata {
	if o == nil || IsNil(o.Metadata) {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DedicatedServerList) GetMetadataOk() (*Metadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *DedicatedServerList) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *DedicatedServerList) SetMetadata(v Metadata) {
	o.Metadata = &v
}

// GetDedicatedServers returns the DedicatedServers field value if set, zero value otherwise.
func (o *DedicatedServerList) GetDedicatedServers() []DedicatedServerDetail {
	if o == nil || IsNil(o.DedicatedServers) {
		var ret []DedicatedServerDetail
		return ret
	}
	return o.DedicatedServers
}

// GetDedicatedServersOk returns a tuple with the DedicatedServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DedicatedServerList) GetDedicatedServersOk() ([]DedicatedServerDetail, bool) {
	if o == nil || IsNil(o.DedicatedServers) {
		return nil, false
	}
	return o.DedicatedServers, true
}

// HasDedicatedServers returns a boolean if a field has been set.
func (o *DedicatedServerList) HasDedicatedServers() bool {
	if o != nil && !IsNil(o.DedicatedServers) {
		return true
	}

	return false
}

// SetDedicatedServers gets a reference to the given []DedicatedServerDetail and assigns it to the DedicatedServers field.
func (o *DedicatedServerList) SetDedicatedServers(v []DedicatedServerDetail) {
	o.DedicatedServers = v
}

func (o DedicatedServerList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DedicatedServerList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["_metadata"] = o.Metadata
	}
	if !IsNil(o.DedicatedServers) {
		toSerialize["dedicatedServers"] = o.DedicatedServers
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DedicatedServerList) UnmarshalJSON(data []byte) (err error) {
	varDedicatedServerList := _DedicatedServerList{}

	err = json.Unmarshal(data, &varDedicatedServerList)

	if err != nil {
		return err
	}

	*o = DedicatedServerList(varDedicatedServerList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_metadata")
		delete(additionalProperties, "dedicatedServers")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDedicatedServerList struct {
	value *DedicatedServerList
	isSet bool
}

func (v NullableDedicatedServerList) Get() *DedicatedServerList {
	return v.value
}

func (v *NullableDedicatedServerList) Set(val *DedicatedServerList) {
	v.value = val
	v.isSet = true
}

func (v NullableDedicatedServerList) IsSet() bool {
	return v.isSet
}

func (v *NullableDedicatedServerList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDedicatedServerList(val *DedicatedServerList) *NullableDedicatedServerList {
	return &NullableDedicatedServerList{value: val, isSet: true}
}

func (v NullableDedicatedServerList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDedicatedServerList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


