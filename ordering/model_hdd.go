/*
Ordering

This document outlines the ordering API. The API is only available for customers with invoice payment method.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ordering

import (
	"encoding/json"
)

// checks if the Hdd type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Hdd{}

// Hdd struct for Hdd
type Hdd struct {
	// Amount of disks
	Amount *string `json:"amount,omitempty"`
	// Disk size
	Size *string `json:"size,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Hdd Hdd

// NewHdd instantiates a new Hdd object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHdd() *Hdd {
	this := Hdd{}
	return &this
}

// NewHddWithDefaults instantiates a new Hdd object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHddWithDefaults() *Hdd {
	this := Hdd{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Hdd) GetAmount() string {
	if o == nil || IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hdd) GetAmountOk() (*string, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Hdd) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *Hdd) SetAmount(v string) {
	o.Amount = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Hdd) GetSize() string {
	if o == nil || IsNil(o.Size) {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hdd) GetSizeOk() (*string, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Hdd) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *Hdd) SetSize(v string) {
	o.Size = &v
}

func (o Hdd) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Hdd) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Hdd) UnmarshalJSON(data []byte) (err error) {
	varHdd := _Hdd{}

	err = json.Unmarshal(data, &varHdd)

	if err != nil {
		return err
	}

	*o = Hdd(varHdd)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "amount")
		delete(additionalProperties, "size")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHdd struct {
	value *Hdd
	isSet bool
}

func (v NullableHdd) Get() *Hdd {
	return v.value
}

func (v *NullableHdd) Set(val *Hdd) {
	v.value = val
	v.isSet = true
}

func (v NullableHdd) IsSet() bool {
	return v.isSet
}

func (v *NullableHdd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHdd(val *Hdd) *NullableHdd {
	return &NullableHdd{value: val, isSet: true}
}

func (v NullableHdd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHdd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


