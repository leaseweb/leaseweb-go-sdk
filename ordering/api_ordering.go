/*
Ordering

This document outlines the ordering API. The API is only available for customers with invoice payment method.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ordering

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type OrderingAPI interface {

	/*
	GetDedicatedServer Get a single dedicated server and its price.

	Get a single dedicated server and its price.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param dedicatedServerId The ID of a dedicated server
	@return ApiGetDedicatedServerRequest
	*/
	GetDedicatedServer(ctx context.Context, dedicatedServerId string) ApiGetDedicatedServerRequest

	// GetDedicatedServerExecute executes the request
	//  @return DedicatedServer
	GetDedicatedServerExecute(r ApiGetDedicatedServerRequest) (*DedicatedServer, *http.Response, error)

	/*
	GetDedicatedServerList List available dedicated server configurations.

	List available dedicated server configurations.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetDedicatedServerListRequest
	*/
	GetDedicatedServerList(ctx context.Context) ApiGetDedicatedServerListRequest

	// GetDedicatedServerListExecute executes the request
	//  @return DedicatedServerList
	GetDedicatedServerListExecute(r ApiGetDedicatedServerListRequest) (*DedicatedServerList, *http.Response, error)

	/*
	OrderDedicatedServer Dedicated Server ordering.

	Dedicated Server ordering.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param dedicatedServerId The ID of a dedicated server
	@return ApiOrderDedicatedServerRequest
	*/
	OrderDedicatedServer(ctx context.Context, dedicatedServerId string) ApiOrderDedicatedServerRequest

	// OrderDedicatedServerExecute executes the request
	//  @return DedicatedServerOrder
	OrderDedicatedServerExecute(r ApiOrderDedicatedServerRequest) (*DedicatedServerOrder, *http.Response, error)
}

// OrderingAPIService OrderingAPI service
type OrderingAPIService service

type ApiGetDedicatedServerRequest struct {
	ctx context.Context
	ApiService OrderingAPI
	dedicatedServerId string
	location *string
	connectedToAggregationPool *bool
}

func (r ApiGetDedicatedServerRequest) Location(location string) ApiGetDedicatedServerRequest {
	r.location = &location
	return r
}

func (r ApiGetDedicatedServerRequest) ConnectedToAggregationPool(connectedToAggregationPool bool) ApiGetDedicatedServerRequest {
	r.connectedToAggregationPool = &connectedToAggregationPool
	return r
}

func (r ApiGetDedicatedServerRequest) Execute() (*DedicatedServer, *http.Response, error) {
	return r.ApiService.GetDedicatedServerExecute(r)
}

/*
GetDedicatedServer Get a single dedicated server and its price.

Get a single dedicated server and its price.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dedicatedServerId The ID of a dedicated server
 @return ApiGetDedicatedServerRequest
*/
func (a *OrderingAPIService) GetDedicatedServer(ctx context.Context, dedicatedServerId string) ApiGetDedicatedServerRequest {
	return ApiGetDedicatedServerRequest{
		ApiService: a,
		ctx: ctx,
		dedicatedServerId: dedicatedServerId,
	}
}

// Execute executes the request
//  @return DedicatedServer
func (a *OrderingAPIService) GetDedicatedServerExecute(r ApiGetDedicatedServerRequest) (*DedicatedServer, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DedicatedServer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderingAPIService.GetDedicatedServer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products/dedicatedServers/{dedicatedServerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"dedicatedServerId"+"}", url.PathEscape(parameterValueToString(r.dedicatedServerId, "dedicatedServerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.location == nil {
		return localVarReturnValue, nil, reportError("location is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "location", r.location, "form", "")
	if r.connectedToAggregationPool != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connectedToAggregationPool", r.connectedToAggregationPool, "form", "")
	} else {
		var defaultValue bool = false
		r.connectedToAggregationPool = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-LSW-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-LSW-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDedicatedServerListRequest struct {
	ctx context.Context
	ApiService OrderingAPI
	location *string
	ram *string
	diskSize *string
	diskAmount *string
	limit *int32
	offset *int32
}

func (r ApiGetDedicatedServerListRequest) Location(location string) ApiGetDedicatedServerListRequest {
	r.location = &location
	return r
}

func (r ApiGetDedicatedServerListRequest) Ram(ram string) ApiGetDedicatedServerListRequest {
	r.ram = &ram
	return r
}

func (r ApiGetDedicatedServerListRequest) DiskSize(diskSize string) ApiGetDedicatedServerListRequest {
	r.diskSize = &diskSize
	return r
}

func (r ApiGetDedicatedServerListRequest) DiskAmount(diskAmount string) ApiGetDedicatedServerListRequest {
	r.diskAmount = &diskAmount
	return r
}

// Limit the number of results returned.
func (r ApiGetDedicatedServerListRequest) Limit(limit int32) ApiGetDedicatedServerListRequest {
	r.limit = &limit
	return r
}

// Return results starting from the given offset.
func (r ApiGetDedicatedServerListRequest) Offset(offset int32) ApiGetDedicatedServerListRequest {
	r.offset = &offset
	return r
}

func (r ApiGetDedicatedServerListRequest) Execute() (*DedicatedServerList, *http.Response, error) {
	return r.ApiService.GetDedicatedServerListExecute(r)
}

/*
GetDedicatedServerList List available dedicated server configurations.

List available dedicated server configurations.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetDedicatedServerListRequest
*/
func (a *OrderingAPIService) GetDedicatedServerList(ctx context.Context) ApiGetDedicatedServerListRequest {
	return ApiGetDedicatedServerListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DedicatedServerList
func (a *OrderingAPIService) GetDedicatedServerListExecute(r ApiGetDedicatedServerListRequest) (*DedicatedServerList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DedicatedServerList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderingAPIService.GetDedicatedServerList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products/dedicatedServers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.location != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "location", r.location, "form", "")
	}
	if r.ram != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ram", r.ram, "form", "")
	}
	if r.diskSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "diskSize", r.diskSize, "form", "")
	}
	if r.diskAmount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "diskAmount", r.diskAmount, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-LSW-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-LSW-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrderDedicatedServerRequest struct {
	ctx context.Context
	ApiService OrderingAPI
	dedicatedServerId string
	orderDedicatedServerOpts *OrderDedicatedServerOpts
}

func (r ApiOrderDedicatedServerRequest) OrderDedicatedServerOpts(orderDedicatedServerOpts OrderDedicatedServerOpts) ApiOrderDedicatedServerRequest {
	r.orderDedicatedServerOpts = &orderDedicatedServerOpts
	return r
}

func (r ApiOrderDedicatedServerRequest) Execute() (*DedicatedServerOrder, *http.Response, error) {
	return r.ApiService.OrderDedicatedServerExecute(r)
}

/*
OrderDedicatedServer Dedicated Server ordering.

Dedicated Server ordering.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dedicatedServerId The ID of a dedicated server
 @return ApiOrderDedicatedServerRequest
*/
func (a *OrderingAPIService) OrderDedicatedServer(ctx context.Context, dedicatedServerId string) ApiOrderDedicatedServerRequest {
	return ApiOrderDedicatedServerRequest{
		ApiService: a,
		ctx: ctx,
		dedicatedServerId: dedicatedServerId,
	}
}

// Execute executes the request
//  @return DedicatedServerOrder
func (a *OrderingAPIService) OrderDedicatedServerExecute(r ApiOrderDedicatedServerRequest) (*DedicatedServerOrder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DedicatedServerOrder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderingAPIService.OrderDedicatedServer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products/dedicatedServers/{dedicatedServerId}/order"
	localVarPath = strings.Replace(localVarPath, "{"+"dedicatedServerId"+"}", url.PathEscape(parameterValueToString(r.dedicatedServerId, "dedicatedServerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.orderDedicatedServerOpts
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-LSW-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-LSW-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ErrorResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
