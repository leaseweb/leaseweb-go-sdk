/*
DNS

>The base URL for this API is: **https://api.leaseweb.com/hosting/v2**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// checks if the GetQueryMetricsResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetQueryMetricsResult{}

// GetQueryMetricsResult struct for GetQueryMetricsResult
type GetQueryMetricsResult struct {
	DnsQuery DnsQuery `json:"dnsQuery"`
	Metadata MetricsMetaData `json:"_metadata"`
	AdditionalProperties map[string]interface{}
}

type _GetQueryMetricsResult GetQueryMetricsResult

// NewGetQueryMetricsResult instantiates a new GetQueryMetricsResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetQueryMetricsResult(dnsQuery DnsQuery, metadata MetricsMetaData) *GetQueryMetricsResult {
	this := GetQueryMetricsResult{}
	this.DnsQuery = dnsQuery
	this.Metadata = metadata
	return &this
}

// NewGetQueryMetricsResultWithDefaults instantiates a new GetQueryMetricsResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetQueryMetricsResultWithDefaults() *GetQueryMetricsResult {
	this := GetQueryMetricsResult{}
	return &this
}

// GetDnsQuery returns the DnsQuery field value
func (o *GetQueryMetricsResult) GetDnsQuery() DnsQuery {
	if o == nil {
		var ret DnsQuery
		return ret
	}

	return o.DnsQuery
}

// GetDnsQueryOk returns a tuple with the DnsQuery field value
// and a boolean to check if the value has been set.
func (o *GetQueryMetricsResult) GetDnsQueryOk() (*DnsQuery, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DnsQuery, true
}

// SetDnsQuery sets field value
func (o *GetQueryMetricsResult) SetDnsQuery(v DnsQuery) {
	o.DnsQuery = v
}

// GetMetadata returns the Metadata field value
func (o *GetQueryMetricsResult) GetMetadata() MetricsMetaData {
	if o == nil {
		var ret MetricsMetaData
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *GetQueryMetricsResult) GetMetadataOk() (*MetricsMetaData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *GetQueryMetricsResult) SetMetadata(v MetricsMetaData) {
	o.Metadata = v
}

func (o GetQueryMetricsResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetQueryMetricsResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dnsQuery"] = o.DnsQuery
	toSerialize["_metadata"] = o.Metadata

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetQueryMetricsResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dnsQuery",
		"_metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetQueryMetricsResult := _GetQueryMetricsResult{}

	err = json.Unmarshal(data, &varGetQueryMetricsResult)

	if err != nil {
		return err
	}

	*o = GetQueryMetricsResult(varGetQueryMetricsResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dnsQuery")
		delete(additionalProperties, "_metadata")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetQueryMetricsResult struct {
	value *GetQueryMetricsResult
	isSet bool
}

func (v NullableGetQueryMetricsResult) Get() *GetQueryMetricsResult {
	return v.value
}

func (v *NullableGetQueryMetricsResult) Set(val *GetQueryMetricsResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGetQueryMetricsResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGetQueryMetricsResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetQueryMetricsResult(val *GetQueryMetricsResult) *NullableGetQueryMetricsResult {
	return &NullableGetQueryMetricsResult{value: val, isSet: true}
}

func (v NullableGetQueryMetricsResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetQueryMetricsResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


