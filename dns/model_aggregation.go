/*
DNS

>The base URL for this API is: **https://api.leaseweb.com/hosting/v2**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// Aggregation the model 'Aggregation'
type Aggregation string

// List of aggregation
const (
	AGGREGATION_SUM Aggregation = "SUM"
)

// All allowed values of Aggregation enum
var AllowedAggregationEnumValues = []Aggregation{
	"SUM",
}

func (v *Aggregation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Aggregation(value)
	for _, existing := range AllowedAggregationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Aggregation", value)
}

// NewAggregationFromValue returns a pointer to a valid Aggregation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAggregationFromValue(v string) (*Aggregation, error) {
	ev := Aggregation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Aggregation: valid values are %v", v, AllowedAggregationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Aggregation) IsValid() bool {
	for _, existing := range AllowedAggregationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to aggregation value
func (v Aggregation) Ptr() *Aggregation {
	return &v
}

type NullableAggregation struct {
	value *Aggregation
	isSet bool
}

func (v NullableAggregation) Get() *Aggregation {
	return v.value
}

func (v *NullableAggregation) Set(val *Aggregation) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregation) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregation(val *Aggregation) *NullableAggregation {
	return &NullableAggregation{value: val, isSet: true}
}

func (v NullableAggregation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

