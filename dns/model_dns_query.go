/*
DNS

>The base URL for this API is: **https://api.leaseweb.com/hosting/v2**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// checks if the DnsQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnsQuery{}

// DnsQuery struct for DnsQuery
type DnsQuery struct {
	// The metric unit that's used
	Unit string `json:"unit"`
	Values []MetricValue `json:"values"`
	AdditionalProperties map[string]interface{}
}

type _DnsQuery DnsQuery

// NewDnsQuery instantiates a new DnsQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsQuery(unit string, values []MetricValue) *DnsQuery {
	this := DnsQuery{}
	this.Unit = unit
	this.Values = values
	return &this
}

// NewDnsQueryWithDefaults instantiates a new DnsQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsQueryWithDefaults() *DnsQuery {
	this := DnsQuery{}
	return &this
}

// GetUnit returns the Unit field value
func (o *DnsQuery) GetUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *DnsQuery) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *DnsQuery) SetUnit(v string) {
	o.Unit = v
}

// GetValues returns the Values field value
func (o *DnsQuery) GetValues() []MetricValue {
	if o == nil {
		var ret []MetricValue
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *DnsQuery) GetValuesOk() ([]MetricValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *DnsQuery) SetValues(v []MetricValue) {
	o.Values = v
}

func (o DnsQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnsQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["unit"] = o.Unit
	toSerialize["values"] = o.Values

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DnsQuery) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"unit",
		"values",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDnsQuery := _DnsQuery{}

	err = json.Unmarshal(data, &varDnsQuery)

	if err != nil {
		return err
	}

	*o = DnsQuery(varDnsQuery)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "unit")
		delete(additionalProperties, "values")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDnsQuery struct {
	value *DnsQuery
	isSet bool
}

func (v NullableDnsQuery) Get() *DnsQuery {
	return v.value
}

func (v *NullableDnsQuery) Set(val *DnsQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsQuery(val *DnsQuery) *NullableDnsQuery {
	return &NullableDnsQuery{value: val, isSet: true}
}

func (v NullableDnsQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


