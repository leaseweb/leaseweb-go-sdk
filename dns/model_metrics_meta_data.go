/*
DNS

>The base URL for this API is: **https://api.leaseweb.com/hosting/v2**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the MetricsMetaData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricsMetaData{}

// MetricsMetaData Metadata about the collection
type MetricsMetaData struct {
	Aggregation Aggregation `json:"aggregation"`
	// Start of date interval in ISO-8601 format
	From time.Time `json:"from"`
	Granularity Granularity `json:"granularity"`
	// End of date interval in ISO-8601 format
	To time.Time `json:"to"`
	AdditionalProperties map[string]interface{}
}

type _MetricsMetaData MetricsMetaData

// NewMetricsMetaData instantiates a new MetricsMetaData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricsMetaData(aggregation Aggregation, from time.Time, granularity Granularity, to time.Time) *MetricsMetaData {
	this := MetricsMetaData{}
	this.Aggregation = aggregation
	this.From = from
	this.Granularity = granularity
	this.To = to
	return &this
}

// NewMetricsMetaDataWithDefaults instantiates a new MetricsMetaData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricsMetaDataWithDefaults() *MetricsMetaData {
	this := MetricsMetaData{}
	return &this
}

// GetAggregation returns the Aggregation field value
func (o *MetricsMetaData) GetAggregation() Aggregation {
	if o == nil {
		var ret Aggregation
		return ret
	}

	return o.Aggregation
}

// GetAggregationOk returns a tuple with the Aggregation field value
// and a boolean to check if the value has been set.
func (o *MetricsMetaData) GetAggregationOk() (*Aggregation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Aggregation, true
}

// SetAggregation sets field value
func (o *MetricsMetaData) SetAggregation(v Aggregation) {
	o.Aggregation = v
}

// GetFrom returns the From field value
func (o *MetricsMetaData) GetFrom() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *MetricsMetaData) GetFromOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *MetricsMetaData) SetFrom(v time.Time) {
	o.From = v
}

// GetGranularity returns the Granularity field value
func (o *MetricsMetaData) GetGranularity() Granularity {
	if o == nil {
		var ret Granularity
		return ret
	}

	return o.Granularity
}

// GetGranularityOk returns a tuple with the Granularity field value
// and a boolean to check if the value has been set.
func (o *MetricsMetaData) GetGranularityOk() (*Granularity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Granularity, true
}

// SetGranularity sets field value
func (o *MetricsMetaData) SetGranularity(v Granularity) {
	o.Granularity = v
}

// GetTo returns the To field value
func (o *MetricsMetaData) GetTo() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *MetricsMetaData) GetToOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *MetricsMetaData) SetTo(v time.Time) {
	o.To = v
}

func (o MetricsMetaData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricsMetaData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["aggregation"] = o.Aggregation
	toSerialize["from"] = o.From
	toSerialize["granularity"] = o.Granularity
	toSerialize["to"] = o.To

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MetricsMetaData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"aggregation",
		"from",
		"granularity",
		"to",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetricsMetaData := _MetricsMetaData{}

	err = json.Unmarshal(data, &varMetricsMetaData)

	if err != nil {
		return err
	}

	*o = MetricsMetaData(varMetricsMetaData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "aggregation")
		delete(additionalProperties, "from")
		delete(additionalProperties, "granularity")
		delete(additionalProperties, "to")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMetricsMetaData struct {
	value *MetricsMetaData
	isSet bool
}

func (v NullableMetricsMetaData) Get() *MetricsMetaData {
	return v.value
}

func (v *NullableMetricsMetaData) Set(val *MetricsMetaData) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsMetaData) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsMetaData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsMetaData(val *MetricsMetaData) *NullableMetricsMetaData {
	return &NullableMetricsMetaData{value: val, isSet: true}
}

func (v NullableMetricsMetaData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsMetaData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


