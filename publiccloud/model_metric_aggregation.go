/*
Public Clouds

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// MetricAggregation Defines the function used to aggregate the metrics
type MetricAggregation string

// List of metricAggregation
const (
	METRICAGGREGATION_SUM MetricAggregation = "SUM"
)

// All allowed values of MetricAggregation enum
var AllowedMetricAggregationEnumValues = []MetricAggregation{
	"SUM",
}

func (v *MetricAggregation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MetricAggregation(value)
	for _, existing := range AllowedMetricAggregationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MetricAggregation", value)
}

// NewMetricAggregationFromValue returns a pointer to a valid MetricAggregation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetricAggregationFromValue(v string) (*MetricAggregation, error) {
	ev := MetricAggregation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MetricAggregation: valid values are %v", v, AllowedMetricAggregationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetricAggregation) IsValid() bool {
	for _, existing := range AllowedMetricAggregationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to metricAggregation value
func (v MetricAggregation) Ptr() *MetricAggregation {
	return &v
}

type NullableMetricAggregation struct {
	value *MetricAggregation
	isSet bool
}

func (v NullableMetricAggregation) Get() *MetricAggregation {
	return v.value
}

func (v *NullableMetricAggregation) Set(val *MetricAggregation) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricAggregation) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricAggregation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricAggregation(val *MetricAggregation) *NullableMetricAggregation {
	return &NullableMetricAggregation{value: val, isSet: true}
}

func (v NullableMetricAggregation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricAggregation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

