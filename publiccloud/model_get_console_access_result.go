/*
Public Clouds

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
)

// checks if the GetConsoleAccessResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetConsoleAccessResult{}

// GetConsoleAccessResult struct for GetConsoleAccessResult
type GetConsoleAccessResult struct {
	// The URL to the console
	Url *string `json:"url,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetConsoleAccessResult GetConsoleAccessResult

// NewGetConsoleAccessResult instantiates a new GetConsoleAccessResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetConsoleAccessResult() *GetConsoleAccessResult {
	this := GetConsoleAccessResult{}
	return &this
}

// NewGetConsoleAccessResultWithDefaults instantiates a new GetConsoleAccessResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetConsoleAccessResultWithDefaults() *GetConsoleAccessResult {
	this := GetConsoleAccessResult{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *GetConsoleAccessResult) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetConsoleAccessResult) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *GetConsoleAccessResult) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *GetConsoleAccessResult) SetUrl(v string) {
	o.Url = &v
}

func (o GetConsoleAccessResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetConsoleAccessResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetConsoleAccessResult) UnmarshalJSON(data []byte) (err error) {
	varGetConsoleAccessResult := _GetConsoleAccessResult{}

	err = json.Unmarshal(data, &varGetConsoleAccessResult)

	if err != nil {
		return err
	}

	*o = GetConsoleAccessResult(varGetConsoleAccessResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetConsoleAccessResult struct {
	value *GetConsoleAccessResult
	isSet bool
}

func (v NullableGetConsoleAccessResult) Get() *GetConsoleAccessResult {
	return v.value
}

func (v *NullableGetConsoleAccessResult) Set(val *GetConsoleAccessResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGetConsoleAccessResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGetConsoleAccessResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetConsoleAccessResult(val *GetConsoleAccessResult) *NullableGetConsoleAccessResult {
	return &NullableGetConsoleAccessResult{value: val, isSet: true}
}

func (v NullableGetConsoleAccessResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetConsoleAccessResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


