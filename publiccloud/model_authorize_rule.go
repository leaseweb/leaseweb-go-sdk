/*
Public Clouds

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// checks if the AuthorizeRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizeRule{}

// AuthorizeRule struct for AuthorizeRule
type AuthorizeRule struct {
	// The protocol of the firewall rule
	Protocol string `json:"protocol"`
	// Start port for TCP/UDP rules. Required for TCP/UDP protocols, not applicable for ICMP
	StartPort NullableInt32 `json:"startPort,omitempty"`
	// End port for TCP/UDP rules. Required for TCP/UDP protocols, not applicable for ICMP
	EndPort NullableInt32 `json:"endPort,omitempty"`
	// ICMP type. Required for ICMP protocol, not applicable for TCP/UDP
	IcmpType NullableInt32 `json:"icmpType,omitempty"`
	// ICMP code. Required for ICMP protocol, not applicable for TCP/UDP
	IcmpCode NullableInt32 `json:"icmpCode,omitempty"`
	// CIDR block
	Source *string `json:"source,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AuthorizeRule AuthorizeRule

// NewAuthorizeRule instantiates a new AuthorizeRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizeRule(protocol string) *AuthorizeRule {
	this := AuthorizeRule{}
	this.Protocol = protocol
	return &this
}

// NewAuthorizeRuleWithDefaults instantiates a new AuthorizeRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizeRuleWithDefaults() *AuthorizeRule {
	this := AuthorizeRule{}
	return &this
}

// GetProtocol returns the Protocol field value
func (o *AuthorizeRule) GetProtocol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *AuthorizeRule) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *AuthorizeRule) SetProtocol(v string) {
	o.Protocol = v
}

// GetStartPort returns the StartPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuthorizeRule) GetStartPort() int32 {
	if o == nil || IsNil(o.StartPort.Get()) {
		var ret int32
		return ret
	}
	return *o.StartPort.Get()
}

// GetStartPortOk returns a tuple with the StartPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthorizeRule) GetStartPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartPort.Get(), o.StartPort.IsSet()
}

// HasStartPort returns a boolean if a field has been set.
func (o *AuthorizeRule) HasStartPort() bool {
	if o != nil && o.StartPort.IsSet() {
		return true
	}

	return false
}

// SetStartPort gets a reference to the given NullableInt32 and assigns it to the StartPort field.
func (o *AuthorizeRule) SetStartPort(v int32) {
	o.StartPort.Set(&v)
}
// SetStartPortNil sets the value for StartPort to be an explicit nil
func (o *AuthorizeRule) SetStartPortNil() {
	o.StartPort.Set(nil)
}

// UnsetStartPort ensures that no value is present for StartPort, not even an explicit nil
func (o *AuthorizeRule) UnsetStartPort() {
	o.StartPort.Unset()
}

// GetEndPort returns the EndPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuthorizeRule) GetEndPort() int32 {
	if o == nil || IsNil(o.EndPort.Get()) {
		var ret int32
		return ret
	}
	return *o.EndPort.Get()
}

// GetEndPortOk returns a tuple with the EndPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthorizeRule) GetEndPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndPort.Get(), o.EndPort.IsSet()
}

// HasEndPort returns a boolean if a field has been set.
func (o *AuthorizeRule) HasEndPort() bool {
	if o != nil && o.EndPort.IsSet() {
		return true
	}

	return false
}

// SetEndPort gets a reference to the given NullableInt32 and assigns it to the EndPort field.
func (o *AuthorizeRule) SetEndPort(v int32) {
	o.EndPort.Set(&v)
}
// SetEndPortNil sets the value for EndPort to be an explicit nil
func (o *AuthorizeRule) SetEndPortNil() {
	o.EndPort.Set(nil)
}

// UnsetEndPort ensures that no value is present for EndPort, not even an explicit nil
func (o *AuthorizeRule) UnsetEndPort() {
	o.EndPort.Unset()
}

// GetIcmpType returns the IcmpType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuthorizeRule) GetIcmpType() int32 {
	if o == nil || IsNil(o.IcmpType.Get()) {
		var ret int32
		return ret
	}
	return *o.IcmpType.Get()
}

// GetIcmpTypeOk returns a tuple with the IcmpType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthorizeRule) GetIcmpTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.IcmpType.Get(), o.IcmpType.IsSet()
}

// HasIcmpType returns a boolean if a field has been set.
func (o *AuthorizeRule) HasIcmpType() bool {
	if o != nil && o.IcmpType.IsSet() {
		return true
	}

	return false
}

// SetIcmpType gets a reference to the given NullableInt32 and assigns it to the IcmpType field.
func (o *AuthorizeRule) SetIcmpType(v int32) {
	o.IcmpType.Set(&v)
}
// SetIcmpTypeNil sets the value for IcmpType to be an explicit nil
func (o *AuthorizeRule) SetIcmpTypeNil() {
	o.IcmpType.Set(nil)
}

// UnsetIcmpType ensures that no value is present for IcmpType, not even an explicit nil
func (o *AuthorizeRule) UnsetIcmpType() {
	o.IcmpType.Unset()
}

// GetIcmpCode returns the IcmpCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuthorizeRule) GetIcmpCode() int32 {
	if o == nil || IsNil(o.IcmpCode.Get()) {
		var ret int32
		return ret
	}
	return *o.IcmpCode.Get()
}

// GetIcmpCodeOk returns a tuple with the IcmpCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthorizeRule) GetIcmpCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.IcmpCode.Get(), o.IcmpCode.IsSet()
}

// HasIcmpCode returns a boolean if a field has been set.
func (o *AuthorizeRule) HasIcmpCode() bool {
	if o != nil && o.IcmpCode.IsSet() {
		return true
	}

	return false
}

// SetIcmpCode gets a reference to the given NullableInt32 and assigns it to the IcmpCode field.
func (o *AuthorizeRule) SetIcmpCode(v int32) {
	o.IcmpCode.Set(&v)
}
// SetIcmpCodeNil sets the value for IcmpCode to be an explicit nil
func (o *AuthorizeRule) SetIcmpCodeNil() {
	o.IcmpCode.Set(nil)
}

// UnsetIcmpCode ensures that no value is present for IcmpCode, not even an explicit nil
func (o *AuthorizeRule) UnsetIcmpCode() {
	o.IcmpCode.Unset()
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *AuthorizeRule) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeRule) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *AuthorizeRule) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *AuthorizeRule) SetSource(v string) {
	o.Source = &v
}

func (o AuthorizeRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizeRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["protocol"] = o.Protocol
	if o.StartPort.IsSet() {
		toSerialize["startPort"] = o.StartPort.Get()
	}
	if o.EndPort.IsSet() {
		toSerialize["endPort"] = o.EndPort.Get()
	}
	if o.IcmpType.IsSet() {
		toSerialize["icmpType"] = o.IcmpType.Get()
	}
	if o.IcmpCode.IsSet() {
		toSerialize["icmpCode"] = o.IcmpCode.Get()
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuthorizeRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"protocol",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuthorizeRule := _AuthorizeRule{}

	err = json.Unmarshal(data, &varAuthorizeRule)

	if err != nil {
		return err
	}

	*o = AuthorizeRule(varAuthorizeRule)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "protocol")
		delete(additionalProperties, "startPort")
		delete(additionalProperties, "endPort")
		delete(additionalProperties, "icmpType")
		delete(additionalProperties, "icmpCode")
		delete(additionalProperties, "source")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuthorizeRule struct {
	value *AuthorizeRule
	isSet bool
}

func (v NullableAuthorizeRule) Get() *AuthorizeRule {
	return v.value
}

func (v *NullableAuthorizeRule) Set(val *AuthorizeRule) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizeRule) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizeRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizeRule(val *AuthorizeRule) *NullableAuthorizeRule {
	return &NullableAuthorizeRule{value: val, isSet: true}
}

func (v NullableAuthorizeRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizeRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


