// Code generated by MockGen. DO NOT EDIT.
// Source: publiccloud/api_publiccloud.go
//
// Generated by this command:
//
//	mockgen -source=publiccloud/api_publiccloud.go -destination=publiccloud/api_publiccloud_mock.go -package=publiccloud
//

// Package publiccloud is a generated GoMock package.
package publiccloud

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPubliccloudAPI is a mock of PubliccloudAPI interface.
type MockPubliccloudAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPubliccloudAPIMockRecorder
	isgomock struct{}
}

// MockPubliccloudAPIMockRecorder is the mock recorder for MockPubliccloudAPI.
type MockPubliccloudAPIMockRecorder struct {
	mock *MockPubliccloudAPI
}

// NewMockPubliccloudAPI creates a new mock instance.
func NewMockPubliccloudAPI(ctrl *gomock.Controller) *MockPubliccloudAPI {
	mock := &MockPubliccloudAPI{ctrl: ctrl}
	mock.recorder = &MockPubliccloudAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubliccloudAPI) EXPECT() *MockPubliccloudAPIMockRecorder {
	return m.recorder
}

// AddToPrivateNetwork mocks base method.
func (m *MockPubliccloudAPI) AddToPrivateNetwork(ctx context.Context, instanceId string) ApiAddToPrivateNetworkRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToPrivateNetwork", ctx, instanceId)
	ret0, _ := ret[0].(ApiAddToPrivateNetworkRequest)
	return ret0
}

// AddToPrivateNetwork indicates an expected call of AddToPrivateNetwork.
func (mr *MockPubliccloudAPIMockRecorder) AddToPrivateNetwork(ctx, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToPrivateNetwork", reflect.TypeOf((*MockPubliccloudAPI)(nil).AddToPrivateNetwork), ctx, instanceId)
}

// AddToPrivateNetworkExecute mocks base method.
func (m *MockPubliccloudAPI) AddToPrivateNetworkExecute(r ApiAddToPrivateNetworkRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToPrivateNetworkExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToPrivateNetworkExecute indicates an expected call of AddToPrivateNetworkExecute.
func (mr *MockPubliccloudAPIMockRecorder) AddToPrivateNetworkExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToPrivateNetworkExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).AddToPrivateNetworkExecute), r)
}

// AttachIso mocks base method.
func (m *MockPubliccloudAPI) AttachIso(ctx context.Context, instanceId string) ApiAttachIsoRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachIso", ctx, instanceId)
	ret0, _ := ret[0].(ApiAttachIsoRequest)
	return ret0
}

// AttachIso indicates an expected call of AttachIso.
func (mr *MockPubliccloudAPIMockRecorder) AttachIso(ctx, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachIso", reflect.TypeOf((*MockPubliccloudAPI)(nil).AttachIso), ctx, instanceId)
}

// AttachIsoExecute mocks base method.
func (m *MockPubliccloudAPI) AttachIsoExecute(r ApiAttachIsoRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachIsoExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachIsoExecute indicates an expected call of AttachIsoExecute.
func (mr *MockPubliccloudAPIMockRecorder) AttachIsoExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachIsoExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).AttachIsoExecute), r)
}

// CancelInstanceTermination mocks base method.
func (m *MockPubliccloudAPI) CancelInstanceTermination(ctx context.Context, instanceId string) ApiCancelInstanceTerminationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelInstanceTermination", ctx, instanceId)
	ret0, _ := ret[0].(ApiCancelInstanceTerminationRequest)
	return ret0
}

// CancelInstanceTermination indicates an expected call of CancelInstanceTermination.
func (mr *MockPubliccloudAPIMockRecorder) CancelInstanceTermination(ctx, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelInstanceTermination", reflect.TypeOf((*MockPubliccloudAPI)(nil).CancelInstanceTermination), ctx, instanceId)
}

// CancelInstanceTerminationExecute mocks base method.
func (m *MockPubliccloudAPI) CancelInstanceTerminationExecute(r ApiCancelInstanceTerminationRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelInstanceTerminationExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelInstanceTerminationExecute indicates an expected call of CancelInstanceTerminationExecute.
func (mr *MockPubliccloudAPIMockRecorder) CancelInstanceTerminationExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelInstanceTerminationExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).CancelInstanceTerminationExecute), r)
}

// CreateAutoScalingGroup mocks base method.
func (m *MockPubliccloudAPI) CreateAutoScalingGroup(ctx context.Context) ApiCreateAutoScalingGroupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAutoScalingGroup", ctx)
	ret0, _ := ret[0].(ApiCreateAutoScalingGroupRequest)
	return ret0
}

// CreateAutoScalingGroup indicates an expected call of CreateAutoScalingGroup.
func (mr *MockPubliccloudAPIMockRecorder) CreateAutoScalingGroup(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAutoScalingGroup", reflect.TypeOf((*MockPubliccloudAPI)(nil).CreateAutoScalingGroup), ctx)
}

// CreateAutoScalingGroupExecute mocks base method.
func (m *MockPubliccloudAPI) CreateAutoScalingGroupExecute(r ApiCreateAutoScalingGroupRequest) (*AutoScalingGroupDetails, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAutoScalingGroupExecute", r)
	ret0, _ := ret[0].(*AutoScalingGroupDetails)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateAutoScalingGroupExecute indicates an expected call of CreateAutoScalingGroupExecute.
func (mr *MockPubliccloudAPIMockRecorder) CreateAutoScalingGroupExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAutoScalingGroupExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).CreateAutoScalingGroupExecute), r)
}

// CreateImage mocks base method.
func (m *MockPubliccloudAPI) CreateImage(ctx context.Context) ApiCreateImageRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", ctx)
	ret0, _ := ret[0].(ApiCreateImageRequest)
	return ret0
}

// CreateImage indicates an expected call of CreateImage.
func (mr *MockPubliccloudAPIMockRecorder) CreateImage(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockPubliccloudAPI)(nil).CreateImage), ctx)
}

// CreateImageExecute mocks base method.
func (m *MockPubliccloudAPI) CreateImageExecute(r ApiCreateImageRequest) (*ImageDetails, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageExecute", r)
	ret0, _ := ret[0].(*ImageDetails)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateImageExecute indicates an expected call of CreateImageExecute.
func (mr *MockPubliccloudAPIMockRecorder) CreateImageExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).CreateImageExecute), r)
}

// CreateLoadBalancerListener mocks base method.
func (m *MockPubliccloudAPI) CreateLoadBalancerListener(ctx context.Context, loadBalancerId string) ApiCreateLoadBalancerListenerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoadBalancerListener", ctx, loadBalancerId)
	ret0, _ := ret[0].(ApiCreateLoadBalancerListenerRequest)
	return ret0
}

// CreateLoadBalancerListener indicates an expected call of CreateLoadBalancerListener.
func (mr *MockPubliccloudAPIMockRecorder) CreateLoadBalancerListener(ctx, loadBalancerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancerListener", reflect.TypeOf((*MockPubliccloudAPI)(nil).CreateLoadBalancerListener), ctx, loadBalancerId)
}

// CreateLoadBalancerListenerExecute mocks base method.
func (m *MockPubliccloudAPI) CreateLoadBalancerListenerExecute(r ApiCreateLoadBalancerListenerRequest) (*LoadBalancerListener, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoadBalancerListenerExecute", r)
	ret0, _ := ret[0].(*LoadBalancerListener)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateLoadBalancerListenerExecute indicates an expected call of CreateLoadBalancerListenerExecute.
func (mr *MockPubliccloudAPIMockRecorder) CreateLoadBalancerListenerExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancerListenerExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).CreateLoadBalancerListenerExecute), r)
}

// CreateSnapshot mocks base method.
func (m *MockPubliccloudAPI) CreateSnapshot(ctx context.Context, instanceId string) ApiCreateSnapshotRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", ctx, instanceId)
	ret0, _ := ret[0].(ApiCreateSnapshotRequest)
	return ret0
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockPubliccloudAPIMockRecorder) CreateSnapshot(ctx, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockPubliccloudAPI)(nil).CreateSnapshot), ctx, instanceId)
}

// CreateSnapshotExecute mocks base method.
func (m *MockPubliccloudAPI) CreateSnapshotExecute(r ApiCreateSnapshotRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshotExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshotExecute indicates an expected call of CreateSnapshotExecute.
func (mr *MockPubliccloudAPIMockRecorder) CreateSnapshotExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshotExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).CreateSnapshotExecute), r)
}

// CreateTargetGroup mocks base method.
func (m *MockPubliccloudAPI) CreateTargetGroup(ctx context.Context) ApiCreateTargetGroupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTargetGroup", ctx)
	ret0, _ := ret[0].(ApiCreateTargetGroupRequest)
	return ret0
}

// CreateTargetGroup indicates an expected call of CreateTargetGroup.
func (mr *MockPubliccloudAPIMockRecorder) CreateTargetGroup(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTargetGroup", reflect.TypeOf((*MockPubliccloudAPI)(nil).CreateTargetGroup), ctx)
}

// CreateTargetGroupExecute mocks base method.
func (m *MockPubliccloudAPI) CreateTargetGroupExecute(r ApiCreateTargetGroupRequest) (*TargetGroup, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTargetGroupExecute", r)
	ret0, _ := ret[0].(*TargetGroup)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTargetGroupExecute indicates an expected call of CreateTargetGroupExecute.
func (mr *MockPubliccloudAPIMockRecorder) CreateTargetGroupExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTargetGroupExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).CreateTargetGroupExecute), r)
}

// DeleteAutoScalingGroup mocks base method.
func (m *MockPubliccloudAPI) DeleteAutoScalingGroup(ctx context.Context, autoScalingGroupId string) ApiDeleteAutoScalingGroupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAutoScalingGroup", ctx, autoScalingGroupId)
	ret0, _ := ret[0].(ApiDeleteAutoScalingGroupRequest)
	return ret0
}

// DeleteAutoScalingGroup indicates an expected call of DeleteAutoScalingGroup.
func (mr *MockPubliccloudAPIMockRecorder) DeleteAutoScalingGroup(ctx, autoScalingGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAutoScalingGroup", reflect.TypeOf((*MockPubliccloudAPI)(nil).DeleteAutoScalingGroup), ctx, autoScalingGroupId)
}

// DeleteAutoScalingGroupExecute mocks base method.
func (m *MockPubliccloudAPI) DeleteAutoScalingGroupExecute(r ApiDeleteAutoScalingGroupRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAutoScalingGroupExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAutoScalingGroupExecute indicates an expected call of DeleteAutoScalingGroupExecute.
func (mr *MockPubliccloudAPIMockRecorder) DeleteAutoScalingGroupExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAutoScalingGroupExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).DeleteAutoScalingGroupExecute), r)
}

// DeleteCredential mocks base method.
func (m *MockPubliccloudAPI) DeleteCredential(ctx context.Context, instanceId string, type_ CredentialType, username string) ApiDeleteCredentialRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCredential", ctx, instanceId, type_, username)
	ret0, _ := ret[0].(ApiDeleteCredentialRequest)
	return ret0
}

// DeleteCredential indicates an expected call of DeleteCredential.
func (mr *MockPubliccloudAPIMockRecorder) DeleteCredential(ctx, instanceId, type_, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredential", reflect.TypeOf((*MockPubliccloudAPI)(nil).DeleteCredential), ctx, instanceId, type_, username)
}

// DeleteCredentialExecute mocks base method.
func (m *MockPubliccloudAPI) DeleteCredentialExecute(r ApiDeleteCredentialRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCredentialExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCredentialExecute indicates an expected call of DeleteCredentialExecute.
func (mr *MockPubliccloudAPIMockRecorder) DeleteCredentialExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredentialExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).DeleteCredentialExecute), r)
}

// DeleteCredentials mocks base method.
func (m *MockPubliccloudAPI) DeleteCredentials(ctx context.Context, instanceId string) ApiDeleteCredentialsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCredentials", ctx, instanceId)
	ret0, _ := ret[0].(ApiDeleteCredentialsRequest)
	return ret0
}

// DeleteCredentials indicates an expected call of DeleteCredentials.
func (mr *MockPubliccloudAPIMockRecorder) DeleteCredentials(ctx, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredentials", reflect.TypeOf((*MockPubliccloudAPI)(nil).DeleteCredentials), ctx, instanceId)
}

// DeleteCredentialsExecute mocks base method.
func (m *MockPubliccloudAPI) DeleteCredentialsExecute(r ApiDeleteCredentialsRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCredentialsExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCredentialsExecute indicates an expected call of DeleteCredentialsExecute.
func (mr *MockPubliccloudAPIMockRecorder) DeleteCredentialsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredentialsExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).DeleteCredentialsExecute), r)
}

// DeleteLoadBalancerListener mocks base method.
func (m *MockPubliccloudAPI) DeleteLoadBalancerListener(ctx context.Context, loadBalancerId, listenerId string) ApiDeleteLoadBalancerListenerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadBalancerListener", ctx, loadBalancerId, listenerId)
	ret0, _ := ret[0].(ApiDeleteLoadBalancerListenerRequest)
	return ret0
}

// DeleteLoadBalancerListener indicates an expected call of DeleteLoadBalancerListener.
func (mr *MockPubliccloudAPIMockRecorder) DeleteLoadBalancerListener(ctx, loadBalancerId, listenerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancerListener", reflect.TypeOf((*MockPubliccloudAPI)(nil).DeleteLoadBalancerListener), ctx, loadBalancerId, listenerId)
}

// DeleteLoadBalancerListenerExecute mocks base method.
func (m *MockPubliccloudAPI) DeleteLoadBalancerListenerExecute(r ApiDeleteLoadBalancerListenerRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadBalancerListenerExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLoadBalancerListenerExecute indicates an expected call of DeleteLoadBalancerListenerExecute.
func (mr *MockPubliccloudAPIMockRecorder) DeleteLoadBalancerListenerExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancerListenerExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).DeleteLoadBalancerListenerExecute), r)
}

// DeleteSnapshot mocks base method.
func (m *MockPubliccloudAPI) DeleteSnapshot(ctx context.Context, instanceId, snapshotId string) ApiDeleteSnapshotRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", ctx, instanceId, snapshotId)
	ret0, _ := ret[0].(ApiDeleteSnapshotRequest)
	return ret0
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockPubliccloudAPIMockRecorder) DeleteSnapshot(ctx, instanceId, snapshotId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockPubliccloudAPI)(nil).DeleteSnapshot), ctx, instanceId, snapshotId)
}

// DeleteSnapshotExecute mocks base method.
func (m *MockPubliccloudAPI) DeleteSnapshotExecute(r ApiDeleteSnapshotRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshotExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSnapshotExecute indicates an expected call of DeleteSnapshotExecute.
func (mr *MockPubliccloudAPIMockRecorder) DeleteSnapshotExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshotExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).DeleteSnapshotExecute), r)
}

// DeleteTargetGroup mocks base method.
func (m *MockPubliccloudAPI) DeleteTargetGroup(ctx context.Context, targetGroupId string) ApiDeleteTargetGroupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTargetGroup", ctx, targetGroupId)
	ret0, _ := ret[0].(ApiDeleteTargetGroupRequest)
	return ret0
}

// DeleteTargetGroup indicates an expected call of DeleteTargetGroup.
func (mr *MockPubliccloudAPIMockRecorder) DeleteTargetGroup(ctx, targetGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTargetGroup", reflect.TypeOf((*MockPubliccloudAPI)(nil).DeleteTargetGroup), ctx, targetGroupId)
}

// DeleteTargetGroupExecute mocks base method.
func (m *MockPubliccloudAPI) DeleteTargetGroupExecute(r ApiDeleteTargetGroupRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTargetGroupExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTargetGroupExecute indicates an expected call of DeleteTargetGroupExecute.
func (mr *MockPubliccloudAPIMockRecorder) DeleteTargetGroupExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTargetGroupExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).DeleteTargetGroupExecute), r)
}

// DeregisterAutoScalingGroupTargetGroup mocks base method.
func (m *MockPubliccloudAPI) DeregisterAutoScalingGroupTargetGroup(ctx context.Context, autoScalingGroupId string) ApiDeregisterAutoScalingGroupTargetGroupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterAutoScalingGroupTargetGroup", ctx, autoScalingGroupId)
	ret0, _ := ret[0].(ApiDeregisterAutoScalingGroupTargetGroupRequest)
	return ret0
}

// DeregisterAutoScalingGroupTargetGroup indicates an expected call of DeregisterAutoScalingGroupTargetGroup.
func (mr *MockPubliccloudAPIMockRecorder) DeregisterAutoScalingGroupTargetGroup(ctx, autoScalingGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterAutoScalingGroupTargetGroup", reflect.TypeOf((*MockPubliccloudAPI)(nil).DeregisterAutoScalingGroupTargetGroup), ctx, autoScalingGroupId)
}

// DeregisterAutoScalingGroupTargetGroupExecute mocks base method.
func (m *MockPubliccloudAPI) DeregisterAutoScalingGroupTargetGroupExecute(r ApiDeregisterAutoScalingGroupTargetGroupRequest) (*AutoScalingGroupDetails, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterAutoScalingGroupTargetGroupExecute", r)
	ret0, _ := ret[0].(*AutoScalingGroupDetails)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeregisterAutoScalingGroupTargetGroupExecute indicates an expected call of DeregisterAutoScalingGroupTargetGroupExecute.
func (mr *MockPubliccloudAPIMockRecorder) DeregisterAutoScalingGroupTargetGroupExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterAutoScalingGroupTargetGroupExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).DeregisterAutoScalingGroupTargetGroupExecute), r)
}

// DeregisterTargets mocks base method.
func (m *MockPubliccloudAPI) DeregisterTargets(ctx context.Context, targetGroupId string) ApiDeregisterTargetsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterTargets", ctx, targetGroupId)
	ret0, _ := ret[0].(ApiDeregisterTargetsRequest)
	return ret0
}

// DeregisterTargets indicates an expected call of DeregisterTargets.
func (mr *MockPubliccloudAPIMockRecorder) DeregisterTargets(ctx, targetGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterTargets", reflect.TypeOf((*MockPubliccloudAPI)(nil).DeregisterTargets), ctx, targetGroupId)
}

// DeregisterTargetsExecute mocks base method.
func (m *MockPubliccloudAPI) DeregisterTargetsExecute(r ApiDeregisterTargetsRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterTargetsExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterTargetsExecute indicates an expected call of DeregisterTargetsExecute.
func (mr *MockPubliccloudAPIMockRecorder) DeregisterTargetsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterTargetsExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).DeregisterTargetsExecute), r)
}

// DetachIso mocks base method.
func (m *MockPubliccloudAPI) DetachIso(ctx context.Context, instanceId string) ApiDetachIsoRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachIso", ctx, instanceId)
	ret0, _ := ret[0].(ApiDetachIsoRequest)
	return ret0
}

// DetachIso indicates an expected call of DetachIso.
func (mr *MockPubliccloudAPIMockRecorder) DetachIso(ctx, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachIso", reflect.TypeOf((*MockPubliccloudAPI)(nil).DetachIso), ctx, instanceId)
}

// DetachIsoExecute mocks base method.
func (m *MockPubliccloudAPI) DetachIsoExecute(r ApiDetachIsoRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachIsoExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachIsoExecute indicates an expected call of DetachIsoExecute.
func (mr *MockPubliccloudAPIMockRecorder) DetachIsoExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachIsoExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).DetachIsoExecute), r)
}

// GetAutoScalingGroup mocks base method.
func (m *MockPubliccloudAPI) GetAutoScalingGroup(ctx context.Context, autoScalingGroupId string) ApiGetAutoScalingGroupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutoScalingGroup", ctx, autoScalingGroupId)
	ret0, _ := ret[0].(ApiGetAutoScalingGroupRequest)
	return ret0
}

// GetAutoScalingGroup indicates an expected call of GetAutoScalingGroup.
func (mr *MockPubliccloudAPIMockRecorder) GetAutoScalingGroup(ctx, autoScalingGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutoScalingGroup", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetAutoScalingGroup), ctx, autoScalingGroupId)
}

// GetAutoScalingGroupExecute mocks base method.
func (m *MockPubliccloudAPI) GetAutoScalingGroupExecute(r ApiGetAutoScalingGroupRequest) (*AutoScalingGroupDetails, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutoScalingGroupExecute", r)
	ret0, _ := ret[0].(*AutoScalingGroupDetails)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAutoScalingGroupExecute indicates an expected call of GetAutoScalingGroupExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetAutoScalingGroupExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutoScalingGroupExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetAutoScalingGroupExecute), r)
}

// GetAutoScalingGroupInstanceList mocks base method.
func (m *MockPubliccloudAPI) GetAutoScalingGroupInstanceList(ctx context.Context, autoScalingGroupId string) ApiGetAutoScalingGroupInstanceListRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutoScalingGroupInstanceList", ctx, autoScalingGroupId)
	ret0, _ := ret[0].(ApiGetAutoScalingGroupInstanceListRequest)
	return ret0
}

// GetAutoScalingGroupInstanceList indicates an expected call of GetAutoScalingGroupInstanceList.
func (mr *MockPubliccloudAPIMockRecorder) GetAutoScalingGroupInstanceList(ctx, autoScalingGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutoScalingGroupInstanceList", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetAutoScalingGroupInstanceList), ctx, autoScalingGroupId)
}

// GetAutoScalingGroupInstanceListExecute mocks base method.
func (m *MockPubliccloudAPI) GetAutoScalingGroupInstanceListExecute(r ApiGetAutoScalingGroupInstanceListRequest) (*GetAutoScalingGroupInstanceListResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutoScalingGroupInstanceListExecute", r)
	ret0, _ := ret[0].(*GetAutoScalingGroupInstanceListResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAutoScalingGroupInstanceListExecute indicates an expected call of GetAutoScalingGroupInstanceListExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetAutoScalingGroupInstanceListExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutoScalingGroupInstanceListExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetAutoScalingGroupInstanceListExecute), r)
}

// GetAutoScalingGroupList mocks base method.
func (m *MockPubliccloudAPI) GetAutoScalingGroupList(ctx context.Context) ApiGetAutoScalingGroupListRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutoScalingGroupList", ctx)
	ret0, _ := ret[0].(ApiGetAutoScalingGroupListRequest)
	return ret0
}

// GetAutoScalingGroupList indicates an expected call of GetAutoScalingGroupList.
func (mr *MockPubliccloudAPIMockRecorder) GetAutoScalingGroupList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutoScalingGroupList", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetAutoScalingGroupList), ctx)
}

// GetAutoScalingGroupListExecute mocks base method.
func (m *MockPubliccloudAPI) GetAutoScalingGroupListExecute(r ApiGetAutoScalingGroupListRequest) (*GetAutoScalingGroupListResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutoScalingGroupListExecute", r)
	ret0, _ := ret[0].(*GetAutoScalingGroupListResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAutoScalingGroupListExecute indicates an expected call of GetAutoScalingGroupListExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetAutoScalingGroupListExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutoScalingGroupListExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetAutoScalingGroupListExecute), r)
}

// GetConnectionsMetrics mocks base method.
func (m *MockPubliccloudAPI) GetConnectionsMetrics(ctx context.Context, loadBalancerId string) ApiGetConnectionsMetricsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionsMetrics", ctx, loadBalancerId)
	ret0, _ := ret[0].(ApiGetConnectionsMetricsRequest)
	return ret0
}

// GetConnectionsMetrics indicates an expected call of GetConnectionsMetrics.
func (mr *MockPubliccloudAPIMockRecorder) GetConnectionsMetrics(ctx, loadBalancerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionsMetrics", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetConnectionsMetrics), ctx, loadBalancerId)
}

// GetConnectionsMetricsExecute mocks base method.
func (m *MockPubliccloudAPI) GetConnectionsMetricsExecute(r ApiGetConnectionsMetricsRequest) (*GetConnectionsMetricsResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionsMetricsExecute", r)
	ret0, _ := ret[0].(*GetConnectionsMetricsResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetConnectionsMetricsExecute indicates an expected call of GetConnectionsMetricsExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetConnectionsMetricsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionsMetricsExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetConnectionsMetricsExecute), r)
}

// GetConnectionsPerSecondMetrics mocks base method.
func (m *MockPubliccloudAPI) GetConnectionsPerSecondMetrics(ctx context.Context, loadBalancerId string) ApiGetConnectionsPerSecondMetricsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionsPerSecondMetrics", ctx, loadBalancerId)
	ret0, _ := ret[0].(ApiGetConnectionsPerSecondMetricsRequest)
	return ret0
}

// GetConnectionsPerSecondMetrics indicates an expected call of GetConnectionsPerSecondMetrics.
func (mr *MockPubliccloudAPIMockRecorder) GetConnectionsPerSecondMetrics(ctx, loadBalancerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionsPerSecondMetrics", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetConnectionsPerSecondMetrics), ctx, loadBalancerId)
}

// GetConnectionsPerSecondMetricsExecute mocks base method.
func (m *MockPubliccloudAPI) GetConnectionsPerSecondMetricsExecute(r ApiGetConnectionsPerSecondMetricsRequest) (*GetConnectionsPerSecondMetricsResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionsPerSecondMetricsExecute", r)
	ret0, _ := ret[0].(*GetConnectionsPerSecondMetricsResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetConnectionsPerSecondMetricsExecute indicates an expected call of GetConnectionsPerSecondMetricsExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetConnectionsPerSecondMetricsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionsPerSecondMetricsExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetConnectionsPerSecondMetricsExecute), r)
}

// GetConsoleAccess mocks base method.
func (m *MockPubliccloudAPI) GetConsoleAccess(ctx context.Context, instanceId string) ApiGetConsoleAccessRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsoleAccess", ctx, instanceId)
	ret0, _ := ret[0].(ApiGetConsoleAccessRequest)
	return ret0
}

// GetConsoleAccess indicates an expected call of GetConsoleAccess.
func (mr *MockPubliccloudAPIMockRecorder) GetConsoleAccess(ctx, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsoleAccess", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetConsoleAccess), ctx, instanceId)
}

// GetConsoleAccessExecute mocks base method.
func (m *MockPubliccloudAPI) GetConsoleAccessExecute(r ApiGetConsoleAccessRequest) (*GetConsoleAccessResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsoleAccessExecute", r)
	ret0, _ := ret[0].(*GetConsoleAccessResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetConsoleAccessExecute indicates an expected call of GetConsoleAccessExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetConsoleAccessExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsoleAccessExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetConsoleAccessExecute), r)
}

// GetCpuMetrics mocks base method.
func (m *MockPubliccloudAPI) GetCpuMetrics(ctx context.Context, instanceId string) ApiGetCpuMetricsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCpuMetrics", ctx, instanceId)
	ret0, _ := ret[0].(ApiGetCpuMetricsRequest)
	return ret0
}

// GetCpuMetrics indicates an expected call of GetCpuMetrics.
func (mr *MockPubliccloudAPIMockRecorder) GetCpuMetrics(ctx, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCpuMetrics", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetCpuMetrics), ctx, instanceId)
}

// GetCpuMetricsExecute mocks base method.
func (m *MockPubliccloudAPI) GetCpuMetricsExecute(r ApiGetCpuMetricsRequest) (*GetCpuMetricsResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCpuMetricsExecute", r)
	ret0, _ := ret[0].(*GetCpuMetricsResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCpuMetricsExecute indicates an expected call of GetCpuMetricsExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetCpuMetricsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCpuMetricsExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetCpuMetricsExecute), r)
}

// GetCredential mocks base method.
func (m *MockPubliccloudAPI) GetCredential(ctx context.Context, instanceId string, type_ CredentialType, username string) ApiGetCredentialRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredential", ctx, instanceId, type_, username)
	ret0, _ := ret[0].(ApiGetCredentialRequest)
	return ret0
}

// GetCredential indicates an expected call of GetCredential.
func (mr *MockPubliccloudAPIMockRecorder) GetCredential(ctx, instanceId, type_, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredential", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetCredential), ctx, instanceId, type_, username)
}

// GetCredentialExecute mocks base method.
func (m *MockPubliccloudAPI) GetCredentialExecute(r ApiGetCredentialRequest) (*GetCredentialResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialExecute", r)
	ret0, _ := ret[0].(*GetCredentialResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCredentialExecute indicates an expected call of GetCredentialExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetCredentialExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetCredentialExecute), r)
}

// GetCredentialList mocks base method.
func (m *MockPubliccloudAPI) GetCredentialList(ctx context.Context, instanceId string) ApiGetCredentialListRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialList", ctx, instanceId)
	ret0, _ := ret[0].(ApiGetCredentialListRequest)
	return ret0
}

// GetCredentialList indicates an expected call of GetCredentialList.
func (mr *MockPubliccloudAPIMockRecorder) GetCredentialList(ctx, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialList", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetCredentialList), ctx, instanceId)
}

// GetCredentialListByType mocks base method.
func (m *MockPubliccloudAPI) GetCredentialListByType(ctx context.Context, instanceId string, type_ CredentialType) ApiGetCredentialListByTypeRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialListByType", ctx, instanceId, type_)
	ret0, _ := ret[0].(ApiGetCredentialListByTypeRequest)
	return ret0
}

// GetCredentialListByType indicates an expected call of GetCredentialListByType.
func (mr *MockPubliccloudAPIMockRecorder) GetCredentialListByType(ctx, instanceId, type_ any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialListByType", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetCredentialListByType), ctx, instanceId, type_)
}

// GetCredentialListByTypeExecute mocks base method.
func (m *MockPubliccloudAPI) GetCredentialListByTypeExecute(r ApiGetCredentialListByTypeRequest) (*GetCredentialListByTypeResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialListByTypeExecute", r)
	ret0, _ := ret[0].(*GetCredentialListByTypeResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCredentialListByTypeExecute indicates an expected call of GetCredentialListByTypeExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetCredentialListByTypeExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialListByTypeExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetCredentialListByTypeExecute), r)
}

// GetCredentialListExecute mocks base method.
func (m *MockPubliccloudAPI) GetCredentialListExecute(r ApiGetCredentialListRequest) (*GetCredentialListResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialListExecute", r)
	ret0, _ := ret[0].(*GetCredentialListResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCredentialListExecute indicates an expected call of GetCredentialListExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetCredentialListExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialListExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetCredentialListExecute), r)
}

// GetDataTransferredMetrics mocks base method.
func (m *MockPubliccloudAPI) GetDataTransferredMetrics(ctx context.Context, loadBalancerId string) ApiGetDataTransferredMetricsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataTransferredMetrics", ctx, loadBalancerId)
	ret0, _ := ret[0].(ApiGetDataTransferredMetricsRequest)
	return ret0
}

// GetDataTransferredMetrics indicates an expected call of GetDataTransferredMetrics.
func (mr *MockPubliccloudAPIMockRecorder) GetDataTransferredMetrics(ctx, loadBalancerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataTransferredMetrics", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetDataTransferredMetrics), ctx, loadBalancerId)
}

// GetDataTransferredMetricsExecute mocks base method.
func (m *MockPubliccloudAPI) GetDataTransferredMetricsExecute(r ApiGetDataTransferredMetricsRequest) (*GetDataTransferredMetricsResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataTransferredMetricsExecute", r)
	ret0, _ := ret[0].(*GetDataTransferredMetricsResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDataTransferredMetricsExecute indicates an expected call of GetDataTransferredMetricsExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetDataTransferredMetricsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataTransferredMetricsExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetDataTransferredMetricsExecute), r)
}

// GetDataTransferredPerSecondMetrics mocks base method.
func (m *MockPubliccloudAPI) GetDataTransferredPerSecondMetrics(ctx context.Context, loadBalancerId string) ApiGetDataTransferredPerSecondMetricsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataTransferredPerSecondMetrics", ctx, loadBalancerId)
	ret0, _ := ret[0].(ApiGetDataTransferredPerSecondMetricsRequest)
	return ret0
}

// GetDataTransferredPerSecondMetrics indicates an expected call of GetDataTransferredPerSecondMetrics.
func (mr *MockPubliccloudAPIMockRecorder) GetDataTransferredPerSecondMetrics(ctx, loadBalancerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataTransferredPerSecondMetrics", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetDataTransferredPerSecondMetrics), ctx, loadBalancerId)
}

// GetDataTransferredPerSecondMetricsExecute mocks base method.
func (m *MockPubliccloudAPI) GetDataTransferredPerSecondMetricsExecute(r ApiGetDataTransferredPerSecondMetricsRequest) (*GetDataTransferredPerSecondMetricsResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataTransferredPerSecondMetricsExecute", r)
	ret0, _ := ret[0].(*GetDataTransferredPerSecondMetricsResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDataTransferredPerSecondMetricsExecute indicates an expected call of GetDataTransferredPerSecondMetricsExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetDataTransferredPerSecondMetricsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataTransferredPerSecondMetricsExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetDataTransferredPerSecondMetricsExecute), r)
}

// GetExpenses mocks base method.
func (m *MockPubliccloudAPI) GetExpenses(ctx context.Context, equipmentId string) ApiGetExpensesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpenses", ctx, equipmentId)
	ret0, _ := ret[0].(ApiGetExpensesRequest)
	return ret0
}

// GetExpenses indicates an expected call of GetExpenses.
func (mr *MockPubliccloudAPIMockRecorder) GetExpenses(ctx, equipmentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpenses", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetExpenses), ctx, equipmentId)
}

// GetExpensesExecute mocks base method.
func (m *MockPubliccloudAPI) GetExpensesExecute(r ApiGetExpensesRequest) (*GetExpensesResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpensesExecute", r)
	ret0, _ := ret[0].(*GetExpensesResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetExpensesExecute indicates an expected call of GetExpensesExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetExpensesExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpensesExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetExpensesExecute), r)
}

// GetImageList mocks base method.
func (m *MockPubliccloudAPI) GetImageList(ctx context.Context) ApiGetImageListRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageList", ctx)
	ret0, _ := ret[0].(ApiGetImageListRequest)
	return ret0
}

// GetImageList indicates an expected call of GetImageList.
func (mr *MockPubliccloudAPIMockRecorder) GetImageList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageList", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetImageList), ctx)
}

// GetImageListExecute mocks base method.
func (m *MockPubliccloudAPI) GetImageListExecute(r ApiGetImageListRequest) (*GetImageListResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageListExecute", r)
	ret0, _ := ret[0].(*GetImageListResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImageListExecute indicates an expected call of GetImageListExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetImageListExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageListExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetImageListExecute), r)
}

// GetInstance mocks base method.
func (m *MockPubliccloudAPI) GetInstance(ctx context.Context, instanceId string) ApiGetInstanceRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", ctx, instanceId)
	ret0, _ := ret[0].(ApiGetInstanceRequest)
	return ret0
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockPubliccloudAPIMockRecorder) GetInstance(ctx, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetInstance), ctx, instanceId)
}

// GetInstanceDataTrafficMetrics mocks base method.
func (m *MockPubliccloudAPI) GetInstanceDataTrafficMetrics(ctx context.Context, instanceId string) ApiGetInstanceDataTrafficMetricsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceDataTrafficMetrics", ctx, instanceId)
	ret0, _ := ret[0].(ApiGetInstanceDataTrafficMetricsRequest)
	return ret0
}

// GetInstanceDataTrafficMetrics indicates an expected call of GetInstanceDataTrafficMetrics.
func (mr *MockPubliccloudAPIMockRecorder) GetInstanceDataTrafficMetrics(ctx, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceDataTrafficMetrics", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetInstanceDataTrafficMetrics), ctx, instanceId)
}

// GetInstanceDataTrafficMetricsExecute mocks base method.
func (m *MockPubliccloudAPI) GetInstanceDataTrafficMetricsExecute(r ApiGetInstanceDataTrafficMetricsRequest) (*GetDataTrafficMetricsResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceDataTrafficMetricsExecute", r)
	ret0, _ := ret[0].(*GetDataTrafficMetricsResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceDataTrafficMetricsExecute indicates an expected call of GetInstanceDataTrafficMetricsExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetInstanceDataTrafficMetricsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceDataTrafficMetricsExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetInstanceDataTrafficMetricsExecute), r)
}

// GetInstanceExecute mocks base method.
func (m *MockPubliccloudAPI) GetInstanceExecute(r ApiGetInstanceRequest) (*InstanceDetails, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceExecute", r)
	ret0, _ := ret[0].(*InstanceDetails)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceExecute indicates an expected call of GetInstanceExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetInstanceExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetInstanceExecute), r)
}

// GetInstanceIP mocks base method.
func (m *MockPubliccloudAPI) GetInstanceIP(ctx context.Context, instanceId, ip string) ApiGetInstanceIPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceIP", ctx, instanceId, ip)
	ret0, _ := ret[0].(ApiGetInstanceIPRequest)
	return ret0
}

// GetInstanceIP indicates an expected call of GetInstanceIP.
func (mr *MockPubliccloudAPIMockRecorder) GetInstanceIP(ctx, instanceId, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceIP", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetInstanceIP), ctx, instanceId, ip)
}

// GetInstanceIPExecute mocks base method.
func (m *MockPubliccloudAPI) GetInstanceIPExecute(r ApiGetInstanceIPRequest) (*IpDetails, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceIPExecute", r)
	ret0, _ := ret[0].(*IpDetails)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceIPExecute indicates an expected call of GetInstanceIPExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetInstanceIPExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceIPExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetInstanceIPExecute), r)
}

// GetInstanceIPList mocks base method.
func (m *MockPubliccloudAPI) GetInstanceIPList(ctx context.Context, instanceId string) ApiGetInstanceIPListRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceIPList", ctx, instanceId)
	ret0, _ := ret[0].(ApiGetInstanceIPListRequest)
	return ret0
}

// GetInstanceIPList indicates an expected call of GetInstanceIPList.
func (mr *MockPubliccloudAPIMockRecorder) GetInstanceIPList(ctx, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceIPList", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetInstanceIPList), ctx, instanceId)
}

// GetInstanceIPListExecute mocks base method.
func (m *MockPubliccloudAPI) GetInstanceIPListExecute(r ApiGetInstanceIPListRequest) (*GetIPListResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceIPListExecute", r)
	ret0, _ := ret[0].(*GetIPListResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceIPListExecute indicates an expected call of GetInstanceIPListExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetInstanceIPListExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceIPListExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetInstanceIPListExecute), r)
}

// GetInstanceList mocks base method.
func (m *MockPubliccloudAPI) GetInstanceList(ctx context.Context) ApiGetInstanceListRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceList", ctx)
	ret0, _ := ret[0].(ApiGetInstanceListRequest)
	return ret0
}

// GetInstanceList indicates an expected call of GetInstanceList.
func (mr *MockPubliccloudAPIMockRecorder) GetInstanceList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceList", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetInstanceList), ctx)
}

// GetInstanceListExecute mocks base method.
func (m *MockPubliccloudAPI) GetInstanceListExecute(r ApiGetInstanceListRequest) (*GetInstanceListResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceListExecute", r)
	ret0, _ := ret[0].(*GetInstanceListResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceListExecute indicates an expected call of GetInstanceListExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetInstanceListExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceListExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetInstanceListExecute), r)
}

// GetInstanceTypeList mocks base method.
func (m *MockPubliccloudAPI) GetInstanceTypeList(ctx context.Context) ApiGetInstanceTypeListRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceTypeList", ctx)
	ret0, _ := ret[0].(ApiGetInstanceTypeListRequest)
	return ret0
}

// GetInstanceTypeList indicates an expected call of GetInstanceTypeList.
func (mr *MockPubliccloudAPIMockRecorder) GetInstanceTypeList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceTypeList", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetInstanceTypeList), ctx)
}

// GetInstanceTypeListExecute mocks base method.
func (m *MockPubliccloudAPI) GetInstanceTypeListExecute(r ApiGetInstanceTypeListRequest) (*InstanceTypes, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceTypeListExecute", r)
	ret0, _ := ret[0].(*InstanceTypes)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceTypeListExecute indicates an expected call of GetInstanceTypeListExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetInstanceTypeListExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceTypeListExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetInstanceTypeListExecute), r)
}

// GetIsoList mocks base method.
func (m *MockPubliccloudAPI) GetIsoList(ctx context.Context) ApiGetIsoListRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIsoList", ctx)
	ret0, _ := ret[0].(ApiGetIsoListRequest)
	return ret0
}

// GetIsoList indicates an expected call of GetIsoList.
func (mr *MockPubliccloudAPIMockRecorder) GetIsoList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIsoList", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetIsoList), ctx)
}

// GetIsoListExecute mocks base method.
func (m *MockPubliccloudAPI) GetIsoListExecute(r ApiGetIsoListRequest) (*GetIsoListResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIsoListExecute", r)
	ret0, _ := ret[0].(*GetIsoListResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIsoListExecute indicates an expected call of GetIsoListExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetIsoListExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIsoListExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetIsoListExecute), r)
}

// GetLoadBalancer mocks base method.
func (m *MockPubliccloudAPI) GetLoadBalancer(ctx context.Context, loadBalancerId string) ApiGetLoadBalancerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancer", ctx, loadBalancerId)
	ret0, _ := ret[0].(ApiGetLoadBalancerRequest)
	return ret0
}

// GetLoadBalancer indicates an expected call of GetLoadBalancer.
func (mr *MockPubliccloudAPIMockRecorder) GetLoadBalancer(ctx, loadBalancerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancer", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetLoadBalancer), ctx, loadBalancerId)
}

// GetLoadBalancerDataTrafficMetrics mocks base method.
func (m *MockPubliccloudAPI) GetLoadBalancerDataTrafficMetrics(ctx context.Context, loadBalancerId string) ApiGetLoadBalancerDataTrafficMetricsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerDataTrafficMetrics", ctx, loadBalancerId)
	ret0, _ := ret[0].(ApiGetLoadBalancerDataTrafficMetricsRequest)
	return ret0
}

// GetLoadBalancerDataTrafficMetrics indicates an expected call of GetLoadBalancerDataTrafficMetrics.
func (mr *MockPubliccloudAPIMockRecorder) GetLoadBalancerDataTrafficMetrics(ctx, loadBalancerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerDataTrafficMetrics", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetLoadBalancerDataTrafficMetrics), ctx, loadBalancerId)
}

// GetLoadBalancerDataTrafficMetricsExecute mocks base method.
func (m *MockPubliccloudAPI) GetLoadBalancerDataTrafficMetricsExecute(r ApiGetLoadBalancerDataTrafficMetricsRequest) (*GetDataTrafficMetricsResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerDataTrafficMetricsExecute", r)
	ret0, _ := ret[0].(*GetDataTrafficMetricsResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerDataTrafficMetricsExecute indicates an expected call of GetLoadBalancerDataTrafficMetricsExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetLoadBalancerDataTrafficMetricsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerDataTrafficMetricsExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetLoadBalancerDataTrafficMetricsExecute), r)
}

// GetLoadBalancerExecute mocks base method.
func (m *MockPubliccloudAPI) GetLoadBalancerExecute(r ApiGetLoadBalancerRequest) (*LoadBalancerDetails, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerExecute", r)
	ret0, _ := ret[0].(*LoadBalancerDetails)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerExecute indicates an expected call of GetLoadBalancerExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetLoadBalancerExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetLoadBalancerExecute), r)
}

// GetLoadBalancerIP mocks base method.
func (m *MockPubliccloudAPI) GetLoadBalancerIP(ctx context.Context, loadBalancerId, ip string) ApiGetLoadBalancerIPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerIP", ctx, loadBalancerId, ip)
	ret0, _ := ret[0].(ApiGetLoadBalancerIPRequest)
	return ret0
}

// GetLoadBalancerIP indicates an expected call of GetLoadBalancerIP.
func (mr *MockPubliccloudAPIMockRecorder) GetLoadBalancerIP(ctx, loadBalancerId, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerIP", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetLoadBalancerIP), ctx, loadBalancerId, ip)
}

// GetLoadBalancerIPExecute mocks base method.
func (m *MockPubliccloudAPI) GetLoadBalancerIPExecute(r ApiGetLoadBalancerIPRequest) (*IpDetails, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerIPExecute", r)
	ret0, _ := ret[0].(*IpDetails)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerIPExecute indicates an expected call of GetLoadBalancerIPExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetLoadBalancerIPExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerIPExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetLoadBalancerIPExecute), r)
}

// GetLoadBalancerIPList mocks base method.
func (m *MockPubliccloudAPI) GetLoadBalancerIPList(ctx context.Context, loadBalancerId string) ApiGetLoadBalancerIPListRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerIPList", ctx, loadBalancerId)
	ret0, _ := ret[0].(ApiGetLoadBalancerIPListRequest)
	return ret0
}

// GetLoadBalancerIPList indicates an expected call of GetLoadBalancerIPList.
func (mr *MockPubliccloudAPIMockRecorder) GetLoadBalancerIPList(ctx, loadBalancerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerIPList", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetLoadBalancerIPList), ctx, loadBalancerId)
}

// GetLoadBalancerIPListExecute mocks base method.
func (m *MockPubliccloudAPI) GetLoadBalancerIPListExecute(r ApiGetLoadBalancerIPListRequest) (*GetIPListResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerIPListExecute", r)
	ret0, _ := ret[0].(*GetIPListResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerIPListExecute indicates an expected call of GetLoadBalancerIPListExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetLoadBalancerIPListExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerIPListExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetLoadBalancerIPListExecute), r)
}

// GetLoadBalancerList mocks base method.
func (m *MockPubliccloudAPI) GetLoadBalancerList(ctx context.Context) ApiGetLoadBalancerListRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerList", ctx)
	ret0, _ := ret[0].(ApiGetLoadBalancerListRequest)
	return ret0
}

// GetLoadBalancerList indicates an expected call of GetLoadBalancerList.
func (mr *MockPubliccloudAPIMockRecorder) GetLoadBalancerList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerList", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetLoadBalancerList), ctx)
}

// GetLoadBalancerListExecute mocks base method.
func (m *MockPubliccloudAPI) GetLoadBalancerListExecute(r ApiGetLoadBalancerListRequest) (*GetLoadBalancerListResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerListExecute", r)
	ret0, _ := ret[0].(*GetLoadBalancerListResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerListExecute indicates an expected call of GetLoadBalancerListExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetLoadBalancerListExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerListExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetLoadBalancerListExecute), r)
}

// GetLoadBalancerListener mocks base method.
func (m *MockPubliccloudAPI) GetLoadBalancerListener(ctx context.Context, loadBalancerId, listenerId string) ApiGetLoadBalancerListenerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerListener", ctx, loadBalancerId, listenerId)
	ret0, _ := ret[0].(ApiGetLoadBalancerListenerRequest)
	return ret0
}

// GetLoadBalancerListener indicates an expected call of GetLoadBalancerListener.
func (mr *MockPubliccloudAPIMockRecorder) GetLoadBalancerListener(ctx, loadBalancerId, listenerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerListener", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetLoadBalancerListener), ctx, loadBalancerId, listenerId)
}

// GetLoadBalancerListenerExecute mocks base method.
func (m *MockPubliccloudAPI) GetLoadBalancerListenerExecute(r ApiGetLoadBalancerListenerRequest) (*LoadBalancerListenerDetails, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerListenerExecute", r)
	ret0, _ := ret[0].(*LoadBalancerListenerDetails)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerListenerExecute indicates an expected call of GetLoadBalancerListenerExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetLoadBalancerListenerExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerListenerExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetLoadBalancerListenerExecute), r)
}

// GetLoadBalancerListenerList mocks base method.
func (m *MockPubliccloudAPI) GetLoadBalancerListenerList(ctx context.Context, loadBalancerId string) ApiGetLoadBalancerListenerListRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerListenerList", ctx, loadBalancerId)
	ret0, _ := ret[0].(ApiGetLoadBalancerListenerListRequest)
	return ret0
}

// GetLoadBalancerListenerList indicates an expected call of GetLoadBalancerListenerList.
func (mr *MockPubliccloudAPIMockRecorder) GetLoadBalancerListenerList(ctx, loadBalancerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerListenerList", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetLoadBalancerListenerList), ctx, loadBalancerId)
}

// GetLoadBalancerListenerListExecute mocks base method.
func (m *MockPubliccloudAPI) GetLoadBalancerListenerListExecute(r ApiGetLoadBalancerListenerListRequest) (*GetLoadBalancerListenerListResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerListenerListExecute", r)
	ret0, _ := ret[0].(*GetLoadBalancerListenerListResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerListenerListExecute indicates an expected call of GetLoadBalancerListenerListExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetLoadBalancerListenerListExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerListenerListExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetLoadBalancerListenerListExecute), r)
}

// GetMarketAppList mocks base method.
func (m *MockPubliccloudAPI) GetMarketAppList(ctx context.Context) ApiGetMarketAppListRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarketAppList", ctx)
	ret0, _ := ret[0].(ApiGetMarketAppListRequest)
	return ret0
}

// GetMarketAppList indicates an expected call of GetMarketAppList.
func (mr *MockPubliccloudAPIMockRecorder) GetMarketAppList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketAppList", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetMarketAppList), ctx)
}

// GetMarketAppListExecute mocks base method.
func (m *MockPubliccloudAPI) GetMarketAppListExecute(r ApiGetMarketAppListRequest) (*GetMarketAppListResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarketAppListExecute", r)
	ret0, _ := ret[0].(*GetMarketAppListResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMarketAppListExecute indicates an expected call of GetMarketAppListExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetMarketAppListExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketAppListExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetMarketAppListExecute), r)
}

// GetRegionList mocks base method.
func (m *MockPubliccloudAPI) GetRegionList(ctx context.Context) ApiGetRegionListRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionList", ctx)
	ret0, _ := ret[0].(ApiGetRegionListRequest)
	return ret0
}

// GetRegionList indicates an expected call of GetRegionList.
func (mr *MockPubliccloudAPIMockRecorder) GetRegionList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionList", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetRegionList), ctx)
}

// GetRegionListExecute mocks base method.
func (m *MockPubliccloudAPI) GetRegionListExecute(r ApiGetRegionListRequest) (*GetRegionListResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionListExecute", r)
	ret0, _ := ret[0].(*GetRegionListResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRegionListExecute indicates an expected call of GetRegionListExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetRegionListExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionListExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetRegionListExecute), r)
}

// GetReinstallImageList mocks base method.
func (m *MockPubliccloudAPI) GetReinstallImageList(ctx context.Context, instanceId string) ApiGetReinstallImageListRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReinstallImageList", ctx, instanceId)
	ret0, _ := ret[0].(ApiGetReinstallImageListRequest)
	return ret0
}

// GetReinstallImageList indicates an expected call of GetReinstallImageList.
func (mr *MockPubliccloudAPIMockRecorder) GetReinstallImageList(ctx, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReinstallImageList", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetReinstallImageList), ctx, instanceId)
}

// GetReinstallImageListExecute mocks base method.
func (m *MockPubliccloudAPI) GetReinstallImageListExecute(r ApiGetReinstallImageListRequest) (*GetReinstallImageListResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReinstallImageListExecute", r)
	ret0, _ := ret[0].(*GetReinstallImageListResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReinstallImageListExecute indicates an expected call of GetReinstallImageListExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetReinstallImageListExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReinstallImageListExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetReinstallImageListExecute), r)
}

// GetRequestsMetrics mocks base method.
func (m *MockPubliccloudAPI) GetRequestsMetrics(ctx context.Context, loadBalancerId string) ApiGetRequestsMetricsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestsMetrics", ctx, loadBalancerId)
	ret0, _ := ret[0].(ApiGetRequestsMetricsRequest)
	return ret0
}

// GetRequestsMetrics indicates an expected call of GetRequestsMetrics.
func (mr *MockPubliccloudAPIMockRecorder) GetRequestsMetrics(ctx, loadBalancerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestsMetrics", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetRequestsMetrics), ctx, loadBalancerId)
}

// GetRequestsMetricsExecute mocks base method.
func (m *MockPubliccloudAPI) GetRequestsMetricsExecute(r ApiGetRequestsMetricsRequest) (*GetRequestsMetricsResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestsMetricsExecute", r)
	ret0, _ := ret[0].(*GetRequestsMetricsResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRequestsMetricsExecute indicates an expected call of GetRequestsMetricsExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetRequestsMetricsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestsMetricsExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetRequestsMetricsExecute), r)
}

// GetRequestsPerSecondMetrics mocks base method.
func (m *MockPubliccloudAPI) GetRequestsPerSecondMetrics(ctx context.Context, loadBalancerId string) ApiGetRequestsPerSecondMetricsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestsPerSecondMetrics", ctx, loadBalancerId)
	ret0, _ := ret[0].(ApiGetRequestsPerSecondMetricsRequest)
	return ret0
}

// GetRequestsPerSecondMetrics indicates an expected call of GetRequestsPerSecondMetrics.
func (mr *MockPubliccloudAPIMockRecorder) GetRequestsPerSecondMetrics(ctx, loadBalancerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestsPerSecondMetrics", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetRequestsPerSecondMetrics), ctx, loadBalancerId)
}

// GetRequestsPerSecondMetricsExecute mocks base method.
func (m *MockPubliccloudAPI) GetRequestsPerSecondMetricsExecute(r ApiGetRequestsPerSecondMetricsRequest) (*GetRequestsPerSecondMetricsResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestsPerSecondMetricsExecute", r)
	ret0, _ := ret[0].(*GetRequestsPerSecondMetricsResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRequestsPerSecondMetricsExecute indicates an expected call of GetRequestsPerSecondMetricsExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetRequestsPerSecondMetricsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestsPerSecondMetricsExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetRequestsPerSecondMetricsExecute), r)
}

// GetResponseCodesMetrics mocks base method.
func (m *MockPubliccloudAPI) GetResponseCodesMetrics(ctx context.Context, loadBalancerId string) ApiGetResponseCodesMetricsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponseCodesMetrics", ctx, loadBalancerId)
	ret0, _ := ret[0].(ApiGetResponseCodesMetricsRequest)
	return ret0
}

// GetResponseCodesMetrics indicates an expected call of GetResponseCodesMetrics.
func (mr *MockPubliccloudAPIMockRecorder) GetResponseCodesMetrics(ctx, loadBalancerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseCodesMetrics", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetResponseCodesMetrics), ctx, loadBalancerId)
}

// GetResponseCodesMetricsExecute mocks base method.
func (m *MockPubliccloudAPI) GetResponseCodesMetricsExecute(r ApiGetResponseCodesMetricsRequest) (*GetResponseCodesMetricsResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponseCodesMetricsExecute", r)
	ret0, _ := ret[0].(*GetResponseCodesMetricsResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetResponseCodesMetricsExecute indicates an expected call of GetResponseCodesMetricsExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetResponseCodesMetricsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseCodesMetricsExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetResponseCodesMetricsExecute), r)
}

// GetResponseCodesPerSecondMetrics mocks base method.
func (m *MockPubliccloudAPI) GetResponseCodesPerSecondMetrics(ctx context.Context, loadBalancerId string) ApiGetResponseCodesPerSecondMetricsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponseCodesPerSecondMetrics", ctx, loadBalancerId)
	ret0, _ := ret[0].(ApiGetResponseCodesPerSecondMetricsRequest)
	return ret0
}

// GetResponseCodesPerSecondMetrics indicates an expected call of GetResponseCodesPerSecondMetrics.
func (mr *MockPubliccloudAPIMockRecorder) GetResponseCodesPerSecondMetrics(ctx, loadBalancerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseCodesPerSecondMetrics", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetResponseCodesPerSecondMetrics), ctx, loadBalancerId)
}

// GetResponseCodesPerSecondMetricsExecute mocks base method.
func (m *MockPubliccloudAPI) GetResponseCodesPerSecondMetricsExecute(r ApiGetResponseCodesPerSecondMetricsRequest) (*GetResponseCodesPerSecondMetricsResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponseCodesPerSecondMetricsExecute", r)
	ret0, _ := ret[0].(*GetResponseCodesPerSecondMetricsResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetResponseCodesPerSecondMetricsExecute indicates an expected call of GetResponseCodesPerSecondMetricsExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetResponseCodesPerSecondMetricsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseCodesPerSecondMetricsExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetResponseCodesPerSecondMetricsExecute), r)
}

// GetSnapshot mocks base method.
func (m *MockPubliccloudAPI) GetSnapshot(ctx context.Context, instanceId, snapshotId string) ApiGetSnapshotRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshot", ctx, instanceId, snapshotId)
	ret0, _ := ret[0].(ApiGetSnapshotRequest)
	return ret0
}

// GetSnapshot indicates an expected call of GetSnapshot.
func (mr *MockPubliccloudAPIMockRecorder) GetSnapshot(ctx, instanceId, snapshotId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshot", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetSnapshot), ctx, instanceId, snapshotId)
}

// GetSnapshotExecute mocks base method.
func (m *MockPubliccloudAPI) GetSnapshotExecute(r ApiGetSnapshotRequest) (*Snapshot, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotExecute", r)
	ret0, _ := ret[0].(*Snapshot)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSnapshotExecute indicates an expected call of GetSnapshotExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetSnapshotExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetSnapshotExecute), r)
}

// GetSnapshotList mocks base method.
func (m *MockPubliccloudAPI) GetSnapshotList(ctx context.Context, instanceId string) ApiGetSnapshotListRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotList", ctx, instanceId)
	ret0, _ := ret[0].(ApiGetSnapshotListRequest)
	return ret0
}

// GetSnapshotList indicates an expected call of GetSnapshotList.
func (mr *MockPubliccloudAPIMockRecorder) GetSnapshotList(ctx, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotList", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetSnapshotList), ctx, instanceId)
}

// GetSnapshotListExecute mocks base method.
func (m *MockPubliccloudAPI) GetSnapshotListExecute(r ApiGetSnapshotListRequest) (*GetSnapshotListResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotListExecute", r)
	ret0, _ := ret[0].(*GetSnapshotListResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSnapshotListExecute indicates an expected call of GetSnapshotListExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetSnapshotListExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotListExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetSnapshotListExecute), r)
}

// GetTargetGroup mocks base method.
func (m *MockPubliccloudAPI) GetTargetGroup(ctx context.Context, targetGroupId string) ApiGetTargetGroupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetGroup", ctx, targetGroupId)
	ret0, _ := ret[0].(ApiGetTargetGroupRequest)
	return ret0
}

// GetTargetGroup indicates an expected call of GetTargetGroup.
func (mr *MockPubliccloudAPIMockRecorder) GetTargetGroup(ctx, targetGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetGroup", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetTargetGroup), ctx, targetGroupId)
}

// GetTargetGroupExecute mocks base method.
func (m *MockPubliccloudAPI) GetTargetGroupExecute(r ApiGetTargetGroupRequest) (*TargetGroup, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetGroupExecute", r)
	ret0, _ := ret[0].(*TargetGroup)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTargetGroupExecute indicates an expected call of GetTargetGroupExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetTargetGroupExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetGroupExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetTargetGroupExecute), r)
}

// GetTargetGroupList mocks base method.
func (m *MockPubliccloudAPI) GetTargetGroupList(ctx context.Context) ApiGetTargetGroupListRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetGroupList", ctx)
	ret0, _ := ret[0].(ApiGetTargetGroupListRequest)
	return ret0
}

// GetTargetGroupList indicates an expected call of GetTargetGroupList.
func (mr *MockPubliccloudAPIMockRecorder) GetTargetGroupList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetGroupList", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetTargetGroupList), ctx)
}

// GetTargetGroupListExecute mocks base method.
func (m *MockPubliccloudAPI) GetTargetGroupListExecute(r ApiGetTargetGroupListRequest) (*GetTargetGroupListResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetGroupListExecute", r)
	ret0, _ := ret[0].(*GetTargetGroupListResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTargetGroupListExecute indicates an expected call of GetTargetGroupListExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetTargetGroupListExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetGroupListExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetTargetGroupListExecute), r)
}

// GetTargetList mocks base method.
func (m *MockPubliccloudAPI) GetTargetList(ctx context.Context, targetGroupId string) ApiGetTargetListRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetList", ctx, targetGroupId)
	ret0, _ := ret[0].(ApiGetTargetListRequest)
	return ret0
}

// GetTargetList indicates an expected call of GetTargetList.
func (mr *MockPubliccloudAPIMockRecorder) GetTargetList(ctx, targetGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetList", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetTargetList), ctx, targetGroupId)
}

// GetTargetListExecute mocks base method.
func (m *MockPubliccloudAPI) GetTargetListExecute(r ApiGetTargetListRequest) (*GetTargetListResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetListExecute", r)
	ret0, _ := ret[0].(*GetTargetListResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTargetListExecute indicates an expected call of GetTargetListExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetTargetListExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetListExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetTargetListExecute), r)
}

// GetUpdateInstanceTypeList mocks base method.
func (m *MockPubliccloudAPI) GetUpdateInstanceTypeList(ctx context.Context, instanceId string) ApiGetUpdateInstanceTypeListRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdateInstanceTypeList", ctx, instanceId)
	ret0, _ := ret[0].(ApiGetUpdateInstanceTypeListRequest)
	return ret0
}

// GetUpdateInstanceTypeList indicates an expected call of GetUpdateInstanceTypeList.
func (mr *MockPubliccloudAPIMockRecorder) GetUpdateInstanceTypeList(ctx, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateInstanceTypeList", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetUpdateInstanceTypeList), ctx, instanceId)
}

// GetUpdateInstanceTypeListExecute mocks base method.
func (m *MockPubliccloudAPI) GetUpdateInstanceTypeListExecute(r ApiGetUpdateInstanceTypeListRequest) (*InstanceTypes, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdateInstanceTypeListExecute", r)
	ret0, _ := ret[0].(*InstanceTypes)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUpdateInstanceTypeListExecute indicates an expected call of GetUpdateInstanceTypeListExecute.
func (mr *MockPubliccloudAPIMockRecorder) GetUpdateInstanceTypeListExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateInstanceTypeListExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).GetUpdateInstanceTypeListExecute), r)
}

// LaunchInstance mocks base method.
func (m *MockPubliccloudAPI) LaunchInstance(ctx context.Context) ApiLaunchInstanceRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LaunchInstance", ctx)
	ret0, _ := ret[0].(ApiLaunchInstanceRequest)
	return ret0
}

// LaunchInstance indicates an expected call of LaunchInstance.
func (mr *MockPubliccloudAPIMockRecorder) LaunchInstance(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaunchInstance", reflect.TypeOf((*MockPubliccloudAPI)(nil).LaunchInstance), ctx)
}

// LaunchInstanceExecute mocks base method.
func (m *MockPubliccloudAPI) LaunchInstanceExecute(r ApiLaunchInstanceRequest) (*Instance, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LaunchInstanceExecute", r)
	ret0, _ := ret[0].(*Instance)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LaunchInstanceExecute indicates an expected call of LaunchInstanceExecute.
func (mr *MockPubliccloudAPIMockRecorder) LaunchInstanceExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaunchInstanceExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).LaunchInstanceExecute), r)
}

// LaunchLoadBalancer mocks base method.
func (m *MockPubliccloudAPI) LaunchLoadBalancer(ctx context.Context) ApiLaunchLoadBalancerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LaunchLoadBalancer", ctx)
	ret0, _ := ret[0].(ApiLaunchLoadBalancerRequest)
	return ret0
}

// LaunchLoadBalancer indicates an expected call of LaunchLoadBalancer.
func (mr *MockPubliccloudAPIMockRecorder) LaunchLoadBalancer(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaunchLoadBalancer", reflect.TypeOf((*MockPubliccloudAPI)(nil).LaunchLoadBalancer), ctx)
}

// LaunchLoadBalancerExecute mocks base method.
func (m *MockPubliccloudAPI) LaunchLoadBalancerExecute(r ApiLaunchLoadBalancerRequest) (*LoadBalancerDetails, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LaunchLoadBalancerExecute", r)
	ret0, _ := ret[0].(*LoadBalancerDetails)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LaunchLoadBalancerExecute indicates an expected call of LaunchLoadBalancerExecute.
func (mr *MockPubliccloudAPIMockRecorder) LaunchLoadBalancerExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaunchLoadBalancerExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).LaunchLoadBalancerExecute), r)
}

// NullRouteInstanceIP mocks base method.
func (m *MockPubliccloudAPI) NullRouteInstanceIP(ctx context.Context, instanceId, ip string) ApiNullRouteInstanceIPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NullRouteInstanceIP", ctx, instanceId, ip)
	ret0, _ := ret[0].(ApiNullRouteInstanceIPRequest)
	return ret0
}

// NullRouteInstanceIP indicates an expected call of NullRouteInstanceIP.
func (mr *MockPubliccloudAPIMockRecorder) NullRouteInstanceIP(ctx, instanceId, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NullRouteInstanceIP", reflect.TypeOf((*MockPubliccloudAPI)(nil).NullRouteInstanceIP), ctx, instanceId, ip)
}

// NullRouteInstanceIPExecute mocks base method.
func (m *MockPubliccloudAPI) NullRouteInstanceIPExecute(r ApiNullRouteInstanceIPRequest) (*IpDetails, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NullRouteInstanceIPExecute", r)
	ret0, _ := ret[0].(*IpDetails)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NullRouteInstanceIPExecute indicates an expected call of NullRouteInstanceIPExecute.
func (mr *MockPubliccloudAPIMockRecorder) NullRouteInstanceIPExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NullRouteInstanceIPExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).NullRouteInstanceIPExecute), r)
}

// NullRouteLoadBalancerIP mocks base method.
func (m *MockPubliccloudAPI) NullRouteLoadBalancerIP(ctx context.Context, loadBalancerId, ip string) ApiNullRouteLoadBalancerIPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NullRouteLoadBalancerIP", ctx, loadBalancerId, ip)
	ret0, _ := ret[0].(ApiNullRouteLoadBalancerIPRequest)
	return ret0
}

// NullRouteLoadBalancerIP indicates an expected call of NullRouteLoadBalancerIP.
func (mr *MockPubliccloudAPIMockRecorder) NullRouteLoadBalancerIP(ctx, loadBalancerId, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NullRouteLoadBalancerIP", reflect.TypeOf((*MockPubliccloudAPI)(nil).NullRouteLoadBalancerIP), ctx, loadBalancerId, ip)
}

// NullRouteLoadBalancerIPExecute mocks base method.
func (m *MockPubliccloudAPI) NullRouteLoadBalancerIPExecute(r ApiNullRouteLoadBalancerIPRequest) (*IpDetails, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NullRouteLoadBalancerIPExecute", r)
	ret0, _ := ret[0].(*IpDetails)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NullRouteLoadBalancerIPExecute indicates an expected call of NullRouteLoadBalancerIPExecute.
func (mr *MockPubliccloudAPIMockRecorder) NullRouteLoadBalancerIPExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NullRouteLoadBalancerIPExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).NullRouteLoadBalancerIPExecute), r)
}

// RebootInstance mocks base method.
func (m *MockPubliccloudAPI) RebootInstance(ctx context.Context, instanceId string) ApiRebootInstanceRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootInstance", ctx, instanceId)
	ret0, _ := ret[0].(ApiRebootInstanceRequest)
	return ret0
}

// RebootInstance indicates an expected call of RebootInstance.
func (mr *MockPubliccloudAPIMockRecorder) RebootInstance(ctx, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootInstance", reflect.TypeOf((*MockPubliccloudAPI)(nil).RebootInstance), ctx, instanceId)
}

// RebootInstanceExecute mocks base method.
func (m *MockPubliccloudAPI) RebootInstanceExecute(r ApiRebootInstanceRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootInstanceExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootInstanceExecute indicates an expected call of RebootInstanceExecute.
func (mr *MockPubliccloudAPIMockRecorder) RebootInstanceExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootInstanceExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).RebootInstanceExecute), r)
}

// RebootLoadBalancer mocks base method.
func (m *MockPubliccloudAPI) RebootLoadBalancer(ctx context.Context, loadBalancerId string) ApiRebootLoadBalancerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootLoadBalancer", ctx, loadBalancerId)
	ret0, _ := ret[0].(ApiRebootLoadBalancerRequest)
	return ret0
}

// RebootLoadBalancer indicates an expected call of RebootLoadBalancer.
func (mr *MockPubliccloudAPIMockRecorder) RebootLoadBalancer(ctx, loadBalancerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootLoadBalancer", reflect.TypeOf((*MockPubliccloudAPI)(nil).RebootLoadBalancer), ctx, loadBalancerId)
}

// RebootLoadBalancerExecute mocks base method.
func (m *MockPubliccloudAPI) RebootLoadBalancerExecute(r ApiRebootLoadBalancerRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootLoadBalancerExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootLoadBalancerExecute indicates an expected call of RebootLoadBalancerExecute.
func (mr *MockPubliccloudAPIMockRecorder) RebootLoadBalancerExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootLoadBalancerExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).RebootLoadBalancerExecute), r)
}

// RegisterAutoScalingGroupTargetGroup mocks base method.
func (m *MockPubliccloudAPI) RegisterAutoScalingGroupTargetGroup(ctx context.Context, autoScalingGroupId string) ApiRegisterAutoScalingGroupTargetGroupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAutoScalingGroupTargetGroup", ctx, autoScalingGroupId)
	ret0, _ := ret[0].(ApiRegisterAutoScalingGroupTargetGroupRequest)
	return ret0
}

// RegisterAutoScalingGroupTargetGroup indicates an expected call of RegisterAutoScalingGroupTargetGroup.
func (mr *MockPubliccloudAPIMockRecorder) RegisterAutoScalingGroupTargetGroup(ctx, autoScalingGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAutoScalingGroupTargetGroup", reflect.TypeOf((*MockPubliccloudAPI)(nil).RegisterAutoScalingGroupTargetGroup), ctx, autoScalingGroupId)
}

// RegisterAutoScalingGroupTargetGroupExecute mocks base method.
func (m *MockPubliccloudAPI) RegisterAutoScalingGroupTargetGroupExecute(r ApiRegisterAutoScalingGroupTargetGroupRequest) (*AutoScalingGroupDetails, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAutoScalingGroupTargetGroupExecute", r)
	ret0, _ := ret[0].(*AutoScalingGroupDetails)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RegisterAutoScalingGroupTargetGroupExecute indicates an expected call of RegisterAutoScalingGroupTargetGroupExecute.
func (mr *MockPubliccloudAPIMockRecorder) RegisterAutoScalingGroupTargetGroupExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAutoScalingGroupTargetGroupExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).RegisterAutoScalingGroupTargetGroupExecute), r)
}

// RegisterTargets mocks base method.
func (m *MockPubliccloudAPI) RegisterTargets(ctx context.Context, targetGroupId string) ApiRegisterTargetsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTargets", ctx, targetGroupId)
	ret0, _ := ret[0].(ApiRegisterTargetsRequest)
	return ret0
}

// RegisterTargets indicates an expected call of RegisterTargets.
func (mr *MockPubliccloudAPIMockRecorder) RegisterTargets(ctx, targetGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTargets", reflect.TypeOf((*MockPubliccloudAPI)(nil).RegisterTargets), ctx, targetGroupId)
}

// RegisterTargetsExecute mocks base method.
func (m *MockPubliccloudAPI) RegisterTargetsExecute(r ApiRegisterTargetsRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTargetsExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterTargetsExecute indicates an expected call of RegisterTargetsExecute.
func (mr *MockPubliccloudAPIMockRecorder) RegisterTargetsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTargetsExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).RegisterTargetsExecute), r)
}

// ReinstallInstance mocks base method.
func (m *MockPubliccloudAPI) ReinstallInstance(ctx context.Context, instanceId string) ApiReinstallInstanceRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReinstallInstance", ctx, instanceId)
	ret0, _ := ret[0].(ApiReinstallInstanceRequest)
	return ret0
}

// ReinstallInstance indicates an expected call of ReinstallInstance.
func (mr *MockPubliccloudAPIMockRecorder) ReinstallInstance(ctx, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReinstallInstance", reflect.TypeOf((*MockPubliccloudAPI)(nil).ReinstallInstance), ctx, instanceId)
}

// ReinstallInstanceExecute mocks base method.
func (m *MockPubliccloudAPI) ReinstallInstanceExecute(r ApiReinstallInstanceRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReinstallInstanceExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReinstallInstanceExecute indicates an expected call of ReinstallInstanceExecute.
func (mr *MockPubliccloudAPIMockRecorder) ReinstallInstanceExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReinstallInstanceExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).ReinstallInstanceExecute), r)
}

// RemoveFromPrivateNetwork mocks base method.
func (m *MockPubliccloudAPI) RemoveFromPrivateNetwork(ctx context.Context, instanceId string) ApiRemoveFromPrivateNetworkRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromPrivateNetwork", ctx, instanceId)
	ret0, _ := ret[0].(ApiRemoveFromPrivateNetworkRequest)
	return ret0
}

// RemoveFromPrivateNetwork indicates an expected call of RemoveFromPrivateNetwork.
func (mr *MockPubliccloudAPIMockRecorder) RemoveFromPrivateNetwork(ctx, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromPrivateNetwork", reflect.TypeOf((*MockPubliccloudAPI)(nil).RemoveFromPrivateNetwork), ctx, instanceId)
}

// RemoveFromPrivateNetworkExecute mocks base method.
func (m *MockPubliccloudAPI) RemoveFromPrivateNetworkExecute(r ApiRemoveFromPrivateNetworkRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromPrivateNetworkExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFromPrivateNetworkExecute indicates an expected call of RemoveFromPrivateNetworkExecute.
func (mr *MockPubliccloudAPIMockRecorder) RemoveFromPrivateNetworkExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromPrivateNetworkExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).RemoveFromPrivateNetworkExecute), r)
}

// RemoveInstanceIPNullRoute mocks base method.
func (m *MockPubliccloudAPI) RemoveInstanceIPNullRoute(ctx context.Context, instanceId, ip string) ApiRemoveInstanceIPNullRouteRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveInstanceIPNullRoute", ctx, instanceId, ip)
	ret0, _ := ret[0].(ApiRemoveInstanceIPNullRouteRequest)
	return ret0
}

// RemoveInstanceIPNullRoute indicates an expected call of RemoveInstanceIPNullRoute.
func (mr *MockPubliccloudAPIMockRecorder) RemoveInstanceIPNullRoute(ctx, instanceId, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveInstanceIPNullRoute", reflect.TypeOf((*MockPubliccloudAPI)(nil).RemoveInstanceIPNullRoute), ctx, instanceId, ip)
}

// RemoveInstanceIPNullRouteExecute mocks base method.
func (m *MockPubliccloudAPI) RemoveInstanceIPNullRouteExecute(r ApiRemoveInstanceIPNullRouteRequest) (*IpDetails, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveInstanceIPNullRouteExecute", r)
	ret0, _ := ret[0].(*IpDetails)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RemoveInstanceIPNullRouteExecute indicates an expected call of RemoveInstanceIPNullRouteExecute.
func (mr *MockPubliccloudAPIMockRecorder) RemoveInstanceIPNullRouteExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveInstanceIPNullRouteExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).RemoveInstanceIPNullRouteExecute), r)
}

// RemoveLoadBalancerIPNullRoute mocks base method.
func (m *MockPubliccloudAPI) RemoveLoadBalancerIPNullRoute(ctx context.Context, loadBalancerId, ip string) ApiRemoveLoadBalancerIPNullRouteRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLoadBalancerIPNullRoute", ctx, loadBalancerId, ip)
	ret0, _ := ret[0].(ApiRemoveLoadBalancerIPNullRouteRequest)
	return ret0
}

// RemoveLoadBalancerIPNullRoute indicates an expected call of RemoveLoadBalancerIPNullRoute.
func (mr *MockPubliccloudAPIMockRecorder) RemoveLoadBalancerIPNullRoute(ctx, loadBalancerId, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLoadBalancerIPNullRoute", reflect.TypeOf((*MockPubliccloudAPI)(nil).RemoveLoadBalancerIPNullRoute), ctx, loadBalancerId, ip)
}

// RemoveLoadBalancerIPNullRouteExecute mocks base method.
func (m *MockPubliccloudAPI) RemoveLoadBalancerIPNullRouteExecute(r ApiRemoveLoadBalancerIPNullRouteRequest) (*IpDetails, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLoadBalancerIPNullRouteExecute", r)
	ret0, _ := ret[0].(*IpDetails)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RemoveLoadBalancerIPNullRouteExecute indicates an expected call of RemoveLoadBalancerIPNullRouteExecute.
func (mr *MockPubliccloudAPIMockRecorder) RemoveLoadBalancerIPNullRouteExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLoadBalancerIPNullRouteExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).RemoveLoadBalancerIPNullRouteExecute), r)
}

// ResetPassword mocks base method.
func (m *MockPubliccloudAPI) ResetPassword(ctx context.Context, instanceId string) ApiResetPasswordRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", ctx, instanceId)
	ret0, _ := ret[0].(ApiResetPasswordRequest)
	return ret0
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockPubliccloudAPIMockRecorder) ResetPassword(ctx, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockPubliccloudAPI)(nil).ResetPassword), ctx, instanceId)
}

// ResetPasswordExecute mocks base method.
func (m *MockPubliccloudAPI) ResetPasswordExecute(r ApiResetPasswordRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPasswordExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPasswordExecute indicates an expected call of ResetPasswordExecute.
func (mr *MockPubliccloudAPIMockRecorder) ResetPasswordExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPasswordExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).ResetPasswordExecute), r)
}

// RestoreSnapshot mocks base method.
func (m *MockPubliccloudAPI) RestoreSnapshot(ctx context.Context, instanceId, snapshotId string) ApiRestoreSnapshotRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreSnapshot", ctx, instanceId, snapshotId)
	ret0, _ := ret[0].(ApiRestoreSnapshotRequest)
	return ret0
}

// RestoreSnapshot indicates an expected call of RestoreSnapshot.
func (mr *MockPubliccloudAPIMockRecorder) RestoreSnapshot(ctx, instanceId, snapshotId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreSnapshot", reflect.TypeOf((*MockPubliccloudAPI)(nil).RestoreSnapshot), ctx, instanceId, snapshotId)
}

// RestoreSnapshotExecute mocks base method.
func (m *MockPubliccloudAPI) RestoreSnapshotExecute(r ApiRestoreSnapshotRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreSnapshotExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreSnapshotExecute indicates an expected call of RestoreSnapshotExecute.
func (mr *MockPubliccloudAPIMockRecorder) RestoreSnapshotExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreSnapshotExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).RestoreSnapshotExecute), r)
}

// StartInstance mocks base method.
func (m *MockPubliccloudAPI) StartInstance(ctx context.Context, instanceId string) ApiStartInstanceRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartInstance", ctx, instanceId)
	ret0, _ := ret[0].(ApiStartInstanceRequest)
	return ret0
}

// StartInstance indicates an expected call of StartInstance.
func (mr *MockPubliccloudAPIMockRecorder) StartInstance(ctx, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstance", reflect.TypeOf((*MockPubliccloudAPI)(nil).StartInstance), ctx, instanceId)
}

// StartInstanceExecute mocks base method.
func (m *MockPubliccloudAPI) StartInstanceExecute(r ApiStartInstanceRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartInstanceExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartInstanceExecute indicates an expected call of StartInstanceExecute.
func (mr *MockPubliccloudAPIMockRecorder) StartInstanceExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstanceExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).StartInstanceExecute), r)
}

// StartLoadBalancer mocks base method.
func (m *MockPubliccloudAPI) StartLoadBalancer(ctx context.Context, loadBalancerId string) ApiStartLoadBalancerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartLoadBalancer", ctx, loadBalancerId)
	ret0, _ := ret[0].(ApiStartLoadBalancerRequest)
	return ret0
}

// StartLoadBalancer indicates an expected call of StartLoadBalancer.
func (mr *MockPubliccloudAPIMockRecorder) StartLoadBalancer(ctx, loadBalancerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLoadBalancer", reflect.TypeOf((*MockPubliccloudAPI)(nil).StartLoadBalancer), ctx, loadBalancerId)
}

// StartLoadBalancerExecute mocks base method.
func (m *MockPubliccloudAPI) StartLoadBalancerExecute(r ApiStartLoadBalancerRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartLoadBalancerExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartLoadBalancerExecute indicates an expected call of StartLoadBalancerExecute.
func (mr *MockPubliccloudAPIMockRecorder) StartLoadBalancerExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLoadBalancerExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).StartLoadBalancerExecute), r)
}

// StopInstance mocks base method.
func (m *MockPubliccloudAPI) StopInstance(ctx context.Context, instanceId string) ApiStopInstanceRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopInstance", ctx, instanceId)
	ret0, _ := ret[0].(ApiStopInstanceRequest)
	return ret0
}

// StopInstance indicates an expected call of StopInstance.
func (mr *MockPubliccloudAPIMockRecorder) StopInstance(ctx, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInstance", reflect.TypeOf((*MockPubliccloudAPI)(nil).StopInstance), ctx, instanceId)
}

// StopInstanceExecute mocks base method.
func (m *MockPubliccloudAPI) StopInstanceExecute(r ApiStopInstanceRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopInstanceExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopInstanceExecute indicates an expected call of StopInstanceExecute.
func (mr *MockPubliccloudAPIMockRecorder) StopInstanceExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInstanceExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).StopInstanceExecute), r)
}

// StopLoadBalancer mocks base method.
func (m *MockPubliccloudAPI) StopLoadBalancer(ctx context.Context, loadBalancerId string) ApiStopLoadBalancerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopLoadBalancer", ctx, loadBalancerId)
	ret0, _ := ret[0].(ApiStopLoadBalancerRequest)
	return ret0
}

// StopLoadBalancer indicates an expected call of StopLoadBalancer.
func (mr *MockPubliccloudAPIMockRecorder) StopLoadBalancer(ctx, loadBalancerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopLoadBalancer", reflect.TypeOf((*MockPubliccloudAPI)(nil).StopLoadBalancer), ctx, loadBalancerId)
}

// StopLoadBalancerExecute mocks base method.
func (m *MockPubliccloudAPI) StopLoadBalancerExecute(r ApiStopLoadBalancerRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopLoadBalancerExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopLoadBalancerExecute indicates an expected call of StopLoadBalancerExecute.
func (mr *MockPubliccloudAPIMockRecorder) StopLoadBalancerExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopLoadBalancerExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).StopLoadBalancerExecute), r)
}

// StoreCredential mocks base method.
func (m *MockPubliccloudAPI) StoreCredential(ctx context.Context, instanceId string) ApiStoreCredentialRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCredential", ctx, instanceId)
	ret0, _ := ret[0].(ApiStoreCredentialRequest)
	return ret0
}

// StoreCredential indicates an expected call of StoreCredential.
func (mr *MockPubliccloudAPIMockRecorder) StoreCredential(ctx, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCredential", reflect.TypeOf((*MockPubliccloudAPI)(nil).StoreCredential), ctx, instanceId)
}

// StoreCredentialExecute mocks base method.
func (m *MockPubliccloudAPI) StoreCredentialExecute(r ApiStoreCredentialRequest) (*StoreCredentialResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCredentialExecute", r)
	ret0, _ := ret[0].(*StoreCredentialResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StoreCredentialExecute indicates an expected call of StoreCredentialExecute.
func (mr *MockPubliccloudAPIMockRecorder) StoreCredentialExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCredentialExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).StoreCredentialExecute), r)
}

// TerminateInstance mocks base method.
func (m *MockPubliccloudAPI) TerminateInstance(ctx context.Context, instanceId string) ApiTerminateInstanceRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateInstance", ctx, instanceId)
	ret0, _ := ret[0].(ApiTerminateInstanceRequest)
	return ret0
}

// TerminateInstance indicates an expected call of TerminateInstance.
func (mr *MockPubliccloudAPIMockRecorder) TerminateInstance(ctx, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateInstance", reflect.TypeOf((*MockPubliccloudAPI)(nil).TerminateInstance), ctx, instanceId)
}

// TerminateInstanceExecute mocks base method.
func (m *MockPubliccloudAPI) TerminateInstanceExecute(r ApiTerminateInstanceRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateInstanceExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateInstanceExecute indicates an expected call of TerminateInstanceExecute.
func (mr *MockPubliccloudAPIMockRecorder) TerminateInstanceExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateInstanceExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).TerminateInstanceExecute), r)
}

// TerminateLoadBalancer mocks base method.
func (m *MockPubliccloudAPI) TerminateLoadBalancer(ctx context.Context, loadBalancerId string) ApiTerminateLoadBalancerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateLoadBalancer", ctx, loadBalancerId)
	ret0, _ := ret[0].(ApiTerminateLoadBalancerRequest)
	return ret0
}

// TerminateLoadBalancer indicates an expected call of TerminateLoadBalancer.
func (mr *MockPubliccloudAPIMockRecorder) TerminateLoadBalancer(ctx, loadBalancerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateLoadBalancer", reflect.TypeOf((*MockPubliccloudAPI)(nil).TerminateLoadBalancer), ctx, loadBalancerId)
}

// TerminateLoadBalancerExecute mocks base method.
func (m *MockPubliccloudAPI) TerminateLoadBalancerExecute(r ApiTerminateLoadBalancerRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateLoadBalancerExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateLoadBalancerExecute indicates an expected call of TerminateLoadBalancerExecute.
func (mr *MockPubliccloudAPIMockRecorder) TerminateLoadBalancerExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateLoadBalancerExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).TerminateLoadBalancerExecute), r)
}

// UpdateAutoScalingGroup mocks base method.
func (m *MockPubliccloudAPI) UpdateAutoScalingGroup(ctx context.Context, autoScalingGroupId string) ApiUpdateAutoScalingGroupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAutoScalingGroup", ctx, autoScalingGroupId)
	ret0, _ := ret[0].(ApiUpdateAutoScalingGroupRequest)
	return ret0
}

// UpdateAutoScalingGroup indicates an expected call of UpdateAutoScalingGroup.
func (mr *MockPubliccloudAPIMockRecorder) UpdateAutoScalingGroup(ctx, autoScalingGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAutoScalingGroup", reflect.TypeOf((*MockPubliccloudAPI)(nil).UpdateAutoScalingGroup), ctx, autoScalingGroupId)
}

// UpdateAutoScalingGroupExecute mocks base method.
func (m *MockPubliccloudAPI) UpdateAutoScalingGroupExecute(r ApiUpdateAutoScalingGroupRequest) (*AutoScalingGroupDetails, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAutoScalingGroupExecute", r)
	ret0, _ := ret[0].(*AutoScalingGroupDetails)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateAutoScalingGroupExecute indicates an expected call of UpdateAutoScalingGroupExecute.
func (mr *MockPubliccloudAPIMockRecorder) UpdateAutoScalingGroupExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAutoScalingGroupExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).UpdateAutoScalingGroupExecute), r)
}

// UpdateCredential mocks base method.
func (m *MockPubliccloudAPI) UpdateCredential(ctx context.Context, instanceId string, type_ CredentialType, username string) ApiUpdateCredentialRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredential", ctx, instanceId, type_, username)
	ret0, _ := ret[0].(ApiUpdateCredentialRequest)
	return ret0
}

// UpdateCredential indicates an expected call of UpdateCredential.
func (mr *MockPubliccloudAPIMockRecorder) UpdateCredential(ctx, instanceId, type_, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredential", reflect.TypeOf((*MockPubliccloudAPI)(nil).UpdateCredential), ctx, instanceId, type_, username)
}

// UpdateCredentialExecute mocks base method.
func (m *MockPubliccloudAPI) UpdateCredentialExecute(r ApiUpdateCredentialRequest) (*UpdateCredentialResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredentialExecute", r)
	ret0, _ := ret[0].(*UpdateCredentialResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateCredentialExecute indicates an expected call of UpdateCredentialExecute.
func (mr *MockPubliccloudAPIMockRecorder) UpdateCredentialExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredentialExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).UpdateCredentialExecute), r)
}

// UpdateImage mocks base method.
func (m *MockPubliccloudAPI) UpdateImage(ctx context.Context, imageId string) ApiUpdateImageRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImage", ctx, imageId)
	ret0, _ := ret[0].(ApiUpdateImageRequest)
	return ret0
}

// UpdateImage indicates an expected call of UpdateImage.
func (mr *MockPubliccloudAPIMockRecorder) UpdateImage(ctx, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImage", reflect.TypeOf((*MockPubliccloudAPI)(nil).UpdateImage), ctx, imageId)
}

// UpdateImageExecute mocks base method.
func (m *MockPubliccloudAPI) UpdateImageExecute(r ApiUpdateImageRequest) (*ImageDetails, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageExecute", r)
	ret0, _ := ret[0].(*ImageDetails)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateImageExecute indicates an expected call of UpdateImageExecute.
func (mr *MockPubliccloudAPIMockRecorder) UpdateImageExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).UpdateImageExecute), r)
}

// UpdateInstance mocks base method.
func (m *MockPubliccloudAPI) UpdateInstance(ctx context.Context, instanceId string) ApiUpdateInstanceRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstance", ctx, instanceId)
	ret0, _ := ret[0].(ApiUpdateInstanceRequest)
	return ret0
}

// UpdateInstance indicates an expected call of UpdateInstance.
func (mr *MockPubliccloudAPIMockRecorder) UpdateInstance(ctx, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstance", reflect.TypeOf((*MockPubliccloudAPI)(nil).UpdateInstance), ctx, instanceId)
}

// UpdateInstanceExecute mocks base method.
func (m *MockPubliccloudAPI) UpdateInstanceExecute(r ApiUpdateInstanceRequest) (*InstanceDetails, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceExecute", r)
	ret0, _ := ret[0].(*InstanceDetails)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateInstanceExecute indicates an expected call of UpdateInstanceExecute.
func (mr *MockPubliccloudAPIMockRecorder) UpdateInstanceExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).UpdateInstanceExecute), r)
}

// UpdateInstanceIP mocks base method.
func (m *MockPubliccloudAPI) UpdateInstanceIP(ctx context.Context, instanceId, ip string) ApiUpdateInstanceIPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceIP", ctx, instanceId, ip)
	ret0, _ := ret[0].(ApiUpdateInstanceIPRequest)
	return ret0
}

// UpdateInstanceIP indicates an expected call of UpdateInstanceIP.
func (mr *MockPubliccloudAPIMockRecorder) UpdateInstanceIP(ctx, instanceId, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceIP", reflect.TypeOf((*MockPubliccloudAPI)(nil).UpdateInstanceIP), ctx, instanceId, ip)
}

// UpdateInstanceIPExecute mocks base method.
func (m *MockPubliccloudAPI) UpdateInstanceIPExecute(r ApiUpdateInstanceIPRequest) (*IpDetails, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceIPExecute", r)
	ret0, _ := ret[0].(*IpDetails)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateInstanceIPExecute indicates an expected call of UpdateInstanceIPExecute.
func (mr *MockPubliccloudAPIMockRecorder) UpdateInstanceIPExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceIPExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).UpdateInstanceIPExecute), r)
}

// UpdateLoadBalancer mocks base method.
func (m *MockPubliccloudAPI) UpdateLoadBalancer(ctx context.Context, loadBalancerId string) ApiUpdateLoadBalancerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoadBalancer", ctx, loadBalancerId)
	ret0, _ := ret[0].(ApiUpdateLoadBalancerRequest)
	return ret0
}

// UpdateLoadBalancer indicates an expected call of UpdateLoadBalancer.
func (mr *MockPubliccloudAPIMockRecorder) UpdateLoadBalancer(ctx, loadBalancerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancer", reflect.TypeOf((*MockPubliccloudAPI)(nil).UpdateLoadBalancer), ctx, loadBalancerId)
}

// UpdateLoadBalancerExecute mocks base method.
func (m *MockPubliccloudAPI) UpdateLoadBalancerExecute(r ApiUpdateLoadBalancerRequest) (*LoadBalancerDetails, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoadBalancerExecute", r)
	ret0, _ := ret[0].(*LoadBalancerDetails)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateLoadBalancerExecute indicates an expected call of UpdateLoadBalancerExecute.
func (mr *MockPubliccloudAPIMockRecorder) UpdateLoadBalancerExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancerExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).UpdateLoadBalancerExecute), r)
}

// UpdateLoadBalancerIP mocks base method.
func (m *MockPubliccloudAPI) UpdateLoadBalancerIP(ctx context.Context, loadBalancerId, ip string) ApiUpdateLoadBalancerIPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoadBalancerIP", ctx, loadBalancerId, ip)
	ret0, _ := ret[0].(ApiUpdateLoadBalancerIPRequest)
	return ret0
}

// UpdateLoadBalancerIP indicates an expected call of UpdateLoadBalancerIP.
func (mr *MockPubliccloudAPIMockRecorder) UpdateLoadBalancerIP(ctx, loadBalancerId, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancerIP", reflect.TypeOf((*MockPubliccloudAPI)(nil).UpdateLoadBalancerIP), ctx, loadBalancerId, ip)
}

// UpdateLoadBalancerIPExecute mocks base method.
func (m *MockPubliccloudAPI) UpdateLoadBalancerIPExecute(r ApiUpdateLoadBalancerIPRequest) (*IpDetails, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoadBalancerIPExecute", r)
	ret0, _ := ret[0].(*IpDetails)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateLoadBalancerIPExecute indicates an expected call of UpdateLoadBalancerIPExecute.
func (mr *MockPubliccloudAPIMockRecorder) UpdateLoadBalancerIPExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancerIPExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).UpdateLoadBalancerIPExecute), r)
}

// UpdateLoadBalancerListener mocks base method.
func (m *MockPubliccloudAPI) UpdateLoadBalancerListener(ctx context.Context, loadBalancerId, listenerId string) ApiUpdateLoadBalancerListenerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoadBalancerListener", ctx, loadBalancerId, listenerId)
	ret0, _ := ret[0].(ApiUpdateLoadBalancerListenerRequest)
	return ret0
}

// UpdateLoadBalancerListener indicates an expected call of UpdateLoadBalancerListener.
func (mr *MockPubliccloudAPIMockRecorder) UpdateLoadBalancerListener(ctx, loadBalancerId, listenerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancerListener", reflect.TypeOf((*MockPubliccloudAPI)(nil).UpdateLoadBalancerListener), ctx, loadBalancerId, listenerId)
}

// UpdateLoadBalancerListenerExecute mocks base method.
func (m *MockPubliccloudAPI) UpdateLoadBalancerListenerExecute(r ApiUpdateLoadBalancerListenerRequest) (*LoadBalancerListener, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoadBalancerListenerExecute", r)
	ret0, _ := ret[0].(*LoadBalancerListener)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateLoadBalancerListenerExecute indicates an expected call of UpdateLoadBalancerListenerExecute.
func (mr *MockPubliccloudAPIMockRecorder) UpdateLoadBalancerListenerExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancerListenerExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).UpdateLoadBalancerListenerExecute), r)
}

// UpdateTargetGroup mocks base method.
func (m *MockPubliccloudAPI) UpdateTargetGroup(ctx context.Context, targetGroupId string) ApiUpdateTargetGroupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTargetGroup", ctx, targetGroupId)
	ret0, _ := ret[0].(ApiUpdateTargetGroupRequest)
	return ret0
}

// UpdateTargetGroup indicates an expected call of UpdateTargetGroup.
func (mr *MockPubliccloudAPIMockRecorder) UpdateTargetGroup(ctx, targetGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTargetGroup", reflect.TypeOf((*MockPubliccloudAPI)(nil).UpdateTargetGroup), ctx, targetGroupId)
}

// UpdateTargetGroupExecute mocks base method.
func (m *MockPubliccloudAPI) UpdateTargetGroupExecute(r ApiUpdateTargetGroupRequest) (*TargetGroup, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTargetGroupExecute", r)
	ret0, _ := ret[0].(*TargetGroup)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateTargetGroupExecute indicates an expected call of UpdateTargetGroupExecute.
func (mr *MockPubliccloudAPIMockRecorder) UpdateTargetGroupExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTargetGroupExecute", reflect.TypeOf((*MockPubliccloudAPI)(nil).UpdateTargetGroupExecute), r)
}
