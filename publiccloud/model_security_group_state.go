/*
Public Clouds

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// SecurityGroupState the model 'SecurityGroupState'
type SecurityGroupState string

// List of securityGroupState
const (
	SECURITYGROUPSTATE_CREATING SecurityGroupState = "CREATING"
	SECURITYGROUPSTATE_ACTIVE SecurityGroupState = "ACTIVE"
	SECURITYGROUPSTATE_FAILED SecurityGroupState = "FAILED"
	SECURITYGROUPSTATE_SYNCING SecurityGroupState = "SYNCING"
)

// All allowed values of SecurityGroupState enum
var AllowedSecurityGroupStateEnumValues = []SecurityGroupState{
	"CREATING",
	"ACTIVE",
	"FAILED",
	"SYNCING",
}

func (v *SecurityGroupState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SecurityGroupState(value)
	for _, existing := range AllowedSecurityGroupStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SecurityGroupState", value)
}

// NewSecurityGroupStateFromValue returns a pointer to a valid SecurityGroupState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSecurityGroupStateFromValue(v string) (*SecurityGroupState, error) {
	ev := SecurityGroupState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SecurityGroupState: valid values are %v", v, AllowedSecurityGroupStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SecurityGroupState) IsValid() bool {
	for _, existing := range AllowedSecurityGroupStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to securityGroupState value
func (v SecurityGroupState) Ptr() *SecurityGroupState {
	return &v
}

type NullableSecurityGroupState struct {
	value *SecurityGroupState
	isSet bool
}

func (v NullableSecurityGroupState) Get() *SecurityGroupState {
	return v.value
}

func (v *NullableSecurityGroupState) Set(val *SecurityGroupState) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityGroupState) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityGroupState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityGroupState(val *SecurityGroupState) *NullableSecurityGroupState {
	return &NullableSecurityGroupState{value: val, isSet: true}
}

func (v NullableSecurityGroupState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityGroupState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

