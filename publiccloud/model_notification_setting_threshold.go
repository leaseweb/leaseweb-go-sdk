/*
Public Clouds

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// checks if the NotificationSettingThreshold type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationSettingThreshold{}

// NotificationSettingThreshold struct for NotificationSettingThreshold
type NotificationSettingThreshold struct {
	// Threshold value for the notification setting
	Value int32 `json:"value"`
	Unit Unit `json:"unit"`
	AdditionalProperties map[string]interface{}
}

type _NotificationSettingThreshold NotificationSettingThreshold

// NewNotificationSettingThreshold instantiates a new NotificationSettingThreshold object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationSettingThreshold(value int32, unit Unit) *NotificationSettingThreshold {
	this := NotificationSettingThreshold{}
	this.Value = value
	this.Unit = unit
	return &this
}

// NewNotificationSettingThresholdWithDefaults instantiates a new NotificationSettingThreshold object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationSettingThresholdWithDefaults() *NotificationSettingThreshold {
	this := NotificationSettingThreshold{}
	return &this
}

// GetValue returns the Value field value
func (o *NotificationSettingThreshold) GetValue() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *NotificationSettingThreshold) GetValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *NotificationSettingThreshold) SetValue(v int32) {
	o.Value = v
}

// GetUnit returns the Unit field value
func (o *NotificationSettingThreshold) GetUnit() Unit {
	if o == nil {
		var ret Unit
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *NotificationSettingThreshold) GetUnitOk() (*Unit, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *NotificationSettingThreshold) SetUnit(v Unit) {
	o.Unit = v
}

func (o NotificationSettingThreshold) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationSettingThreshold) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value
	toSerialize["unit"] = o.Unit

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NotificationSettingThreshold) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"value",
		"unit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNotificationSettingThreshold := _NotificationSettingThreshold{}

	err = json.Unmarshal(data, &varNotificationSettingThreshold)

	if err != nil {
		return err
	}

	*o = NotificationSettingThreshold(varNotificationSettingThreshold)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "value")
		delete(additionalProperties, "unit")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNotificationSettingThreshold struct {
	value *NotificationSettingThreshold
	isSet bool
}

func (v NullableNotificationSettingThreshold) Get() *NotificationSettingThreshold {
	return v.value
}

func (v *NullableNotificationSettingThreshold) Set(val *NotificationSettingThreshold) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationSettingThreshold) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationSettingThreshold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationSettingThreshold(val *NotificationSettingThreshold) *NullableNotificationSettingThreshold {
	return &NullableNotificationSettingThreshold{value: val, isSet: true}
}

func (v NullableNotificationSettingThreshold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationSettingThreshold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


