/*
Public Clouds

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// MetricsMetadataPropertiesGranularity - struct for MetricsMetadataPropertiesGranularity
type MetricsMetadataPropertiesGranularity struct {
	CpuGranularity *CpuGranularity
	LoadBalancerMetricsGranularity *LoadBalancerMetricsGranularity
}

// CpuGranularityAsMetricsMetadataPropertiesGranularity is a convenience function that returns CpuGranularity wrapped in MetricsMetadataPropertiesGranularity
func CpuGranularityAsMetricsMetadataPropertiesGranularity(v *CpuGranularity) MetricsMetadataPropertiesGranularity {
	return MetricsMetadataPropertiesGranularity{
		CpuGranularity: v,
	}
}

// LoadBalancerMetricsGranularityAsMetricsMetadataPropertiesGranularity is a convenience function that returns LoadBalancerMetricsGranularity wrapped in MetricsMetadataPropertiesGranularity
func LoadBalancerMetricsGranularityAsMetricsMetadataPropertiesGranularity(v *LoadBalancerMetricsGranularity) MetricsMetadataPropertiesGranularity {
	return MetricsMetadataPropertiesGranularity{
		LoadBalancerMetricsGranularity: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MetricsMetadataPropertiesGranularity) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CpuGranularity
	err = newStrictDecoder(data).Decode(&dst.CpuGranularity)
	if err == nil {
		jsonCpuGranularity, _ := json.Marshal(dst.CpuGranularity)
		if string(jsonCpuGranularity) == "{}" { // empty struct
			dst.CpuGranularity = nil
		} else {
			if err = validator.Validate(dst.CpuGranularity); err != nil {
				dst.CpuGranularity = nil
			} else {
				match++
			}
		}
	} else {
		dst.CpuGranularity = nil
	}

	// try to unmarshal data into LoadBalancerMetricsGranularity
	err = newStrictDecoder(data).Decode(&dst.LoadBalancerMetricsGranularity)
	if err == nil {
		jsonLoadBalancerMetricsGranularity, _ := json.Marshal(dst.LoadBalancerMetricsGranularity)
		if string(jsonLoadBalancerMetricsGranularity) == "{}" { // empty struct
			dst.LoadBalancerMetricsGranularity = nil
		} else {
			if err = validator.Validate(dst.LoadBalancerMetricsGranularity); err != nil {
				dst.LoadBalancerMetricsGranularity = nil
			} else {
				match++
			}
		}
	} else {
		dst.LoadBalancerMetricsGranularity = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CpuGranularity = nil
		dst.LoadBalancerMetricsGranularity = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MetricsMetadataPropertiesGranularity)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MetricsMetadataPropertiesGranularity)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MetricsMetadataPropertiesGranularity) MarshalJSON() ([]byte, error) {
	if src.CpuGranularity != nil {
		return json.Marshal(&src.CpuGranularity)
	}

	if src.LoadBalancerMetricsGranularity != nil {
		return json.Marshal(&src.LoadBalancerMetricsGranularity)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MetricsMetadataPropertiesGranularity) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CpuGranularity != nil {
		return obj.CpuGranularity
	}

	if obj.LoadBalancerMetricsGranularity != nil {
		return obj.LoadBalancerMetricsGranularity
	}

	// all schemas are nil
	return nil
}

type NullableMetricsMetadataPropertiesGranularity struct {
	value *MetricsMetadataPropertiesGranularity
	isSet bool
}

func (v NullableMetricsMetadataPropertiesGranularity) Get() *MetricsMetadataPropertiesGranularity {
	return v.value
}

func (v *NullableMetricsMetadataPropertiesGranularity) Set(val *MetricsMetadataPropertiesGranularity) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsMetadataPropertiesGranularity) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsMetadataPropertiesGranularity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsMetadataPropertiesGranularity(val *MetricsMetadataPropertiesGranularity) *NullableMetricsMetadataPropertiesGranularity {
	return &NullableMetricsMetadataPropertiesGranularity{value: val, isSet: true}
}

func (v NullableMetricsMetadataPropertiesGranularity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsMetadataPropertiesGranularity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


