/*
Public Clouds

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
)

// checks if the GetNotificationSettingListResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetNotificationSettingListResult{}

// GetNotificationSettingListResult struct for GetNotificationSettingListResult
type GetNotificationSettingListResult struct {
	NotificationSettings []NotificationSetting `json:"notificationSettings,omitempty"`
	Metadata *Metadata `json:"_metadata,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetNotificationSettingListResult GetNotificationSettingListResult

// NewGetNotificationSettingListResult instantiates a new GetNotificationSettingListResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetNotificationSettingListResult() *GetNotificationSettingListResult {
	this := GetNotificationSettingListResult{}
	return &this
}

// NewGetNotificationSettingListResultWithDefaults instantiates a new GetNotificationSettingListResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetNotificationSettingListResultWithDefaults() *GetNotificationSettingListResult {
	this := GetNotificationSettingListResult{}
	return &this
}

// GetNotificationSettings returns the NotificationSettings field value if set, zero value otherwise.
func (o *GetNotificationSettingListResult) GetNotificationSettings() []NotificationSetting {
	if o == nil || IsNil(o.NotificationSettings) {
		var ret []NotificationSetting
		return ret
	}
	return o.NotificationSettings
}

// GetNotificationSettingsOk returns a tuple with the NotificationSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetNotificationSettingListResult) GetNotificationSettingsOk() ([]NotificationSetting, bool) {
	if o == nil || IsNil(o.NotificationSettings) {
		return nil, false
	}
	return o.NotificationSettings, true
}

// HasNotificationSettings returns a boolean if a field has been set.
func (o *GetNotificationSettingListResult) HasNotificationSettings() bool {
	if o != nil && !IsNil(o.NotificationSettings) {
		return true
	}

	return false
}

// SetNotificationSettings gets a reference to the given []NotificationSetting and assigns it to the NotificationSettings field.
func (o *GetNotificationSettingListResult) SetNotificationSettings(v []NotificationSetting) {
	o.NotificationSettings = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *GetNotificationSettingListResult) GetMetadata() Metadata {
	if o == nil || IsNil(o.Metadata) {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetNotificationSettingListResult) GetMetadataOk() (*Metadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *GetNotificationSettingListResult) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *GetNotificationSettingListResult) SetMetadata(v Metadata) {
	o.Metadata = &v
}

func (o GetNotificationSettingListResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetNotificationSettingListResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NotificationSettings) {
		toSerialize["notificationSettings"] = o.NotificationSettings
	}
	if !IsNil(o.Metadata) {
		toSerialize["_metadata"] = o.Metadata
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetNotificationSettingListResult) UnmarshalJSON(data []byte) (err error) {
	varGetNotificationSettingListResult := _GetNotificationSettingListResult{}

	err = json.Unmarshal(data, &varGetNotificationSettingListResult)

	if err != nil {
		return err
	}

	*o = GetNotificationSettingListResult(varGetNotificationSettingListResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "notificationSettings")
		delete(additionalProperties, "_metadata")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetNotificationSettingListResult struct {
	value *GetNotificationSettingListResult
	isSet bool
}

func (v NullableGetNotificationSettingListResult) Get() *GetNotificationSettingListResult {
	return v.value
}

func (v *NullableGetNotificationSettingListResult) Set(val *GetNotificationSettingListResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGetNotificationSettingListResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGetNotificationSettingListResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetNotificationSettingListResult(val *GetNotificationSettingListResult) *NullableGetNotificationSettingListResult {
	return &NullableGetNotificationSettingListResult{value: val, isSet: true}
}

func (v NullableGetNotificationSettingListResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetNotificationSettingListResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


