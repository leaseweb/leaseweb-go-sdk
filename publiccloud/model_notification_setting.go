/*
Public Clouds

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// checks if the NotificationSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationSetting{}

// NotificationSetting struct for NotificationSetting
type NotificationSetting struct {
	Id string `json:"id"`
	Threshold NotificationSettingThreshold `json:"threshold"`
	// Type of the notification
	Type string `json:"type"`
	TimePeriod TimePeriod `json:"timePeriod"`
	Action NullableAction `json:"action"`
	Channels []Channel `json:"channels"`
	AdditionalProperties map[string]interface{}
}

type _NotificationSetting NotificationSetting

// NewNotificationSetting instantiates a new NotificationSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationSetting(id string, threshold NotificationSettingThreshold, type_ string, timePeriod TimePeriod, action NullableAction, channels []Channel) *NotificationSetting {
	this := NotificationSetting{}
	this.Id = id
	this.Threshold = threshold
	this.Type = type_
	this.TimePeriod = timePeriod
	this.Action = action
	this.Channels = channels
	return &this
}

// NewNotificationSettingWithDefaults instantiates a new NotificationSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationSettingWithDefaults() *NotificationSetting {
	this := NotificationSetting{}
	return &this
}

// GetId returns the Id field value
func (o *NotificationSetting) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NotificationSetting) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NotificationSetting) SetId(v string) {
	o.Id = v
}

// GetThreshold returns the Threshold field value
func (o *NotificationSetting) GetThreshold() NotificationSettingThreshold {
	if o == nil {
		var ret NotificationSettingThreshold
		return ret
	}

	return o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value
// and a boolean to check if the value has been set.
func (o *NotificationSetting) GetThresholdOk() (*NotificationSettingThreshold, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Threshold, true
}

// SetThreshold sets field value
func (o *NotificationSetting) SetThreshold(v NotificationSettingThreshold) {
	o.Threshold = v
}

// GetType returns the Type field value
func (o *NotificationSetting) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *NotificationSetting) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *NotificationSetting) SetType(v string) {
	o.Type = v
}

// GetTimePeriod returns the TimePeriod field value
func (o *NotificationSetting) GetTimePeriod() TimePeriod {
	if o == nil {
		var ret TimePeriod
		return ret
	}

	return o.TimePeriod
}

// GetTimePeriodOk returns a tuple with the TimePeriod field value
// and a boolean to check if the value has been set.
func (o *NotificationSetting) GetTimePeriodOk() (*TimePeriod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimePeriod, true
}

// SetTimePeriod sets field value
func (o *NotificationSetting) SetTimePeriod(v TimePeriod) {
	o.TimePeriod = v
}

// GetAction returns the Action field value
// If the value is explicit nil, the zero value for Action will be returned
func (o *NotificationSetting) GetAction() Action {
	if o == nil || o.Action.Get() == nil {
		var ret Action
		return ret
	}

	return *o.Action.Get()
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationSetting) GetActionOk() (*Action, bool) {
	if o == nil {
		return nil, false
	}
	return o.Action.Get(), o.Action.IsSet()
}

// SetAction sets field value
func (o *NotificationSetting) SetAction(v Action) {
	o.Action.Set(&v)
}

// GetChannels returns the Channels field value
func (o *NotificationSetting) GetChannels() []Channel {
	if o == nil {
		var ret []Channel
		return ret
	}

	return o.Channels
}

// GetChannelsOk returns a tuple with the Channels field value
// and a boolean to check if the value has been set.
func (o *NotificationSetting) GetChannelsOk() ([]Channel, bool) {
	if o == nil {
		return nil, false
	}
	return o.Channels, true
}

// SetChannels sets field value
func (o *NotificationSetting) SetChannels(v []Channel) {
	o.Channels = v
}

func (o NotificationSetting) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["threshold"] = o.Threshold
	toSerialize["type"] = o.Type
	toSerialize["timePeriod"] = o.TimePeriod
	toSerialize["action"] = o.Action.Get()
	toSerialize["channels"] = o.Channels

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NotificationSetting) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"threshold",
		"type",
		"timePeriod",
		"action",
		"channels",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNotificationSetting := _NotificationSetting{}

	err = json.Unmarshal(data, &varNotificationSetting)

	if err != nil {
		return err
	}

	*o = NotificationSetting(varNotificationSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "threshold")
		delete(additionalProperties, "type")
		delete(additionalProperties, "timePeriod")
		delete(additionalProperties, "action")
		delete(additionalProperties, "channels")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNotificationSetting struct {
	value *NotificationSetting
	isSet bool
}

func (v NullableNotificationSetting) Get() *NotificationSetting {
	return v.value
}

func (v *NullableNotificationSetting) Set(val *NotificationSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationSetting(val *NotificationSetting) *NullableNotificationSetting {
	return &NullableNotificationSetting{value: val, isSet: true}
}

func (v NullableNotificationSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


