/*
Public Clouds

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// checks if the RevokeFirewallRulesOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RevokeFirewallRulesOpts{}

// RevokeFirewallRulesOpts struct for RevokeFirewallRulesOpts
type RevokeFirewallRulesOpts struct {
	Rules []string `json:"rules"`
	AdditionalProperties map[string]interface{}
}

type _RevokeFirewallRulesOpts RevokeFirewallRulesOpts

// NewRevokeFirewallRulesOpts instantiates a new RevokeFirewallRulesOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevokeFirewallRulesOpts(rules []string) *RevokeFirewallRulesOpts {
	this := RevokeFirewallRulesOpts{}
	this.Rules = rules
	return &this
}

// NewRevokeFirewallRulesOptsWithDefaults instantiates a new RevokeFirewallRulesOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevokeFirewallRulesOptsWithDefaults() *RevokeFirewallRulesOpts {
	this := RevokeFirewallRulesOpts{}
	return &this
}

// GetRules returns the Rules field value
func (o *RevokeFirewallRulesOpts) GetRules() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *RevokeFirewallRulesOpts) GetRulesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rules, true
}

// SetRules sets field value
func (o *RevokeFirewallRulesOpts) SetRules(v []string) {
	o.Rules = v
}

func (o RevokeFirewallRulesOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RevokeFirewallRulesOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rules"] = o.Rules

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RevokeFirewallRulesOpts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rules",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRevokeFirewallRulesOpts := _RevokeFirewallRulesOpts{}

	err = json.Unmarshal(data, &varRevokeFirewallRulesOpts)

	if err != nil {
		return err
	}

	*o = RevokeFirewallRulesOpts(varRevokeFirewallRulesOpts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "rules")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRevokeFirewallRulesOpts struct {
	value *RevokeFirewallRulesOpts
	isSet bool
}

func (v NullableRevokeFirewallRulesOpts) Get() *RevokeFirewallRulesOpts {
	return v.value
}

func (v *NullableRevokeFirewallRulesOpts) Set(val *RevokeFirewallRulesOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableRevokeFirewallRulesOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableRevokeFirewallRulesOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevokeFirewallRulesOpts(val *RevokeFirewallRulesOpts) *NullableRevokeFirewallRulesOpts {
	return &NullableRevokeFirewallRulesOpts{value: val, isSet: true}
}

func (v NullableRevokeFirewallRulesOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevokeFirewallRulesOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


