/*
Public Clouds

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// checks if the Billing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Billing{}

// Billing struct for Billing
type Billing struct {
	// List of instances to be billed in the period
	Instances []ExpenseResultInstance `json:"instances"`
	Traffic Traffic `json:"traffic"`
	// Total estimated value for period
	TotalValue string `json:"totalValue"`
	AdditionalProperties map[string]interface{}
}

type _Billing Billing

// NewBilling instantiates a new Billing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBilling(instances []ExpenseResultInstance, traffic Traffic, totalValue string) *Billing {
	this := Billing{}
	this.Instances = instances
	this.Traffic = traffic
	this.TotalValue = totalValue
	return &this
}

// NewBillingWithDefaults instantiates a new Billing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingWithDefaults() *Billing {
	this := Billing{}
	return &this
}

// GetInstances returns the Instances field value
func (o *Billing) GetInstances() []ExpenseResultInstance {
	if o == nil {
		var ret []ExpenseResultInstance
		return ret
	}

	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value
// and a boolean to check if the value has been set.
func (o *Billing) GetInstancesOk() ([]ExpenseResultInstance, bool) {
	if o == nil {
		return nil, false
	}
	return o.Instances, true
}

// SetInstances sets field value
func (o *Billing) SetInstances(v []ExpenseResultInstance) {
	o.Instances = v
}

// GetTraffic returns the Traffic field value
func (o *Billing) GetTraffic() Traffic {
	if o == nil {
		var ret Traffic
		return ret
	}

	return o.Traffic
}

// GetTrafficOk returns a tuple with the Traffic field value
// and a boolean to check if the value has been set.
func (o *Billing) GetTrafficOk() (*Traffic, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Traffic, true
}

// SetTraffic sets field value
func (o *Billing) SetTraffic(v Traffic) {
	o.Traffic = v
}

// GetTotalValue returns the TotalValue field value
func (o *Billing) GetTotalValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TotalValue
}

// GetTotalValueOk returns a tuple with the TotalValue field value
// and a boolean to check if the value has been set.
func (o *Billing) GetTotalValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalValue, true
}

// SetTotalValue sets field value
func (o *Billing) SetTotalValue(v string) {
	o.TotalValue = v
}

func (o Billing) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Billing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["instances"] = o.Instances
	toSerialize["traffic"] = o.Traffic
	toSerialize["totalValue"] = o.TotalValue

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Billing) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instances",
		"traffic",
		"totalValue",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBilling := _Billing{}

	err = json.Unmarshal(data, &varBilling)

	if err != nil {
		return err
	}

	*o = Billing(varBilling)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "instances")
		delete(additionalProperties, "traffic")
		delete(additionalProperties, "totalValue")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBilling struct {
	value *Billing
	isSet bool
}

func (v NullableBilling) Get() *Billing {
	return v.value
}

func (v *NullableBilling) Set(val *Billing) {
	v.value = val
	v.isSet = true
}

func (v NullableBilling) IsSet() bool {
	return v.isSet
}

func (v *NullableBilling) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBilling(val *Billing) *NullableBilling {
	return &NullableBilling{value: val, isSet: true}
}

func (v NullableBilling) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBilling) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


