/*
Public Clouds

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// CpuMetricsGranularity Define the time interval for data aggregation
type CpuMetricsGranularity string

// List of cpuMetricsGranularity
const (
	CPUMETRICSGRANULARITY__5M CpuMetricsGranularity = "5m"
	CPUMETRICSGRANULARITY__10M CpuMetricsGranularity = "10m"
	CPUMETRICSGRANULARITY__30M CpuMetricsGranularity = "30m"
	CPUMETRICSGRANULARITY__60M CpuMetricsGranularity = "60m"
)

// All allowed values of CpuMetricsGranularity enum
var AllowedCpuMetricsGranularityEnumValues = []CpuMetricsGranularity{
	"5m",
	"10m",
	"30m",
	"60m",
}

func (v *CpuMetricsGranularity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CpuMetricsGranularity(value)
	for _, existing := range AllowedCpuMetricsGranularityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CpuMetricsGranularity", value)
}

// NewCpuMetricsGranularityFromValue returns a pointer to a valid CpuMetricsGranularity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCpuMetricsGranularityFromValue(v string) (*CpuMetricsGranularity, error) {
	ev := CpuMetricsGranularity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CpuMetricsGranularity: valid values are %v", v, AllowedCpuMetricsGranularityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CpuMetricsGranularity) IsValid() bool {
	for _, existing := range AllowedCpuMetricsGranularityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to cpuMetricsGranularity value
func (v CpuMetricsGranularity) Ptr() *CpuMetricsGranularity {
	return &v
}

type NullableCpuMetricsGranularity struct {
	value *CpuMetricsGranularity
	isSet bool
}

func (v NullableCpuMetricsGranularity) Get() *CpuMetricsGranularity {
	return v.value
}

func (v *NullableCpuMetricsGranularity) Set(val *CpuMetricsGranularity) {
	v.value = val
	v.isSet = true
}

func (v NullableCpuMetricsGranularity) IsSet() bool {
	return v.isSet
}

func (v *NullableCpuMetricsGranularity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCpuMetricsGranularity(val *CpuMetricsGranularity) *NullableCpuMetricsGranularity {
	return &NullableCpuMetricsGranularity{value: val, isSet: true}
}

func (v NullableCpuMetricsGranularity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCpuMetricsGranularity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

