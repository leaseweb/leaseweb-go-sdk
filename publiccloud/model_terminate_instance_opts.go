/*
Public Clouds

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
)

// checks if the TerminateInstanceOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TerminateInstanceOpts{}

// TerminateInstanceOpts struct for TerminateInstanceOpts
type TerminateInstanceOpts struct {
	// The reason code for terminating the instance. This is a required field if contract type is Monthly. Please refer at this page for the valid options: [Cancel Reasons](https://developer.leaseweb.com/docs/#tag/Services/operation/services-cancel-reasons-get)
	ReasonCode *string `json:"reasonCode,omitempty"`
	// Required only when reasonCode is CANCEL_OTHER.
	Reason *string `json:"reason,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TerminateInstanceOpts TerminateInstanceOpts

// NewTerminateInstanceOpts instantiates a new TerminateInstanceOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerminateInstanceOpts() *TerminateInstanceOpts {
	this := TerminateInstanceOpts{}
	return &this
}

// NewTerminateInstanceOptsWithDefaults instantiates a new TerminateInstanceOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTerminateInstanceOptsWithDefaults() *TerminateInstanceOpts {
	this := TerminateInstanceOpts{}
	return &this
}

// GetReasonCode returns the ReasonCode field value if set, zero value otherwise.
func (o *TerminateInstanceOpts) GetReasonCode() string {
	if o == nil || IsNil(o.ReasonCode) {
		var ret string
		return ret
	}
	return *o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminateInstanceOpts) GetReasonCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ReasonCode) {
		return nil, false
	}
	return o.ReasonCode, true
}

// HasReasonCode returns a boolean if a field has been set.
func (o *TerminateInstanceOpts) HasReasonCode() bool {
	if o != nil && !IsNil(o.ReasonCode) {
		return true
	}

	return false
}

// SetReasonCode gets a reference to the given string and assigns it to the ReasonCode field.
func (o *TerminateInstanceOpts) SetReasonCode(v string) {
	o.ReasonCode = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *TerminateInstanceOpts) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminateInstanceOpts) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *TerminateInstanceOpts) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *TerminateInstanceOpts) SetReason(v string) {
	o.Reason = &v
}

func (o TerminateInstanceOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TerminateInstanceOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReasonCode) {
		toSerialize["reasonCode"] = o.ReasonCode
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TerminateInstanceOpts) UnmarshalJSON(data []byte) (err error) {
	varTerminateInstanceOpts := _TerminateInstanceOpts{}

	err = json.Unmarshal(data, &varTerminateInstanceOpts)

	if err != nil {
		return err
	}

	*o = TerminateInstanceOpts(varTerminateInstanceOpts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "reasonCode")
		delete(additionalProperties, "reason")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTerminateInstanceOpts struct {
	value *TerminateInstanceOpts
	isSet bool
}

func (v NullableTerminateInstanceOpts) Get() *TerminateInstanceOpts {
	return v.value
}

func (v *NullableTerminateInstanceOpts) Set(val *TerminateInstanceOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableTerminateInstanceOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableTerminateInstanceOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerminateInstanceOpts(val *TerminateInstanceOpts) *NullableTerminateInstanceOpts {
	return &NullableTerminateInstanceOpts{value: val, isSet: true}
}

func (v NullableTerminateInstanceOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerminateInstanceOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


