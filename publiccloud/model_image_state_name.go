/*
Public Clouds

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// ImageStateName Images state
type ImageStateName string

// List of imageStateName
const (
	IMAGESTATENAME_CREATING ImageStateName = "CREATING"
	IMAGESTATENAME_READY ImageStateName = "READY"
	IMAGESTATENAME_DESTROYED ImageStateName = "DESTROYED"
	IMAGESTATENAME_DESTROYING ImageStateName = "DESTROYING"
	IMAGESTATENAME_FAILED ImageStateName = "FAILED"
)

// All allowed values of ImageStateName enum
var AllowedImageStateNameEnumValues = []ImageStateName{
	"CREATING",
	"READY",
	"DESTROYED",
	"DESTROYING",
	"FAILED",
}

func (v *ImageStateName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImageStateName(value)
	for _, existing := range AllowedImageStateNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImageStateName", value)
}

// NewImageStateNameFromValue returns a pointer to a valid ImageStateName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImageStateNameFromValue(v string) (*ImageStateName, error) {
	ev := ImageStateName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImageStateName: valid values are %v", v, AllowedImageStateNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImageStateName) IsValid() bool {
	for _, existing := range AllowedImageStateNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to imageStateName value
func (v ImageStateName) Ptr() *ImageStateName {
	return &v
}

type NullableImageStateName struct {
	value *ImageStateName
	isSet bool
}

func (v NullableImageStateName) Get() *ImageStateName {
	return v.value
}

func (v *NullableImageStateName) Set(val *ImageStateName) {
	v.value = val
	v.isSet = true
}

func (v NullableImageStateName) IsSet() bool {
	return v.isSet
}

func (v *NullableImageStateName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageStateName(val *ImageStateName) *NullableImageStateName {
	return &NullableImageStateName{value: val, isSet: true}
}

func (v NullableImageStateName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageStateName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

