/*
Public Clouds

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
)

// checks if the DataTrafficMetrics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataTrafficMetrics{}

// DataTrafficMetrics struct for DataTrafficMetrics
type DataTrafficMetrics struct {
	DownPublic *TrafficMetric `json:"downPublic,omitempty"`
	UpPublic *TrafficMetric `json:"upPublic,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DataTrafficMetrics DataTrafficMetrics

// NewDataTrafficMetrics instantiates a new DataTrafficMetrics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTrafficMetrics() *DataTrafficMetrics {
	this := DataTrafficMetrics{}
	return &this
}

// NewDataTrafficMetricsWithDefaults instantiates a new DataTrafficMetrics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTrafficMetricsWithDefaults() *DataTrafficMetrics {
	this := DataTrafficMetrics{}
	return &this
}

// GetDownPublic returns the DownPublic field value if set, zero value otherwise.
func (o *DataTrafficMetrics) GetDownPublic() TrafficMetric {
	if o == nil || IsNil(o.DownPublic) {
		var ret TrafficMetric
		return ret
	}
	return *o.DownPublic
}

// GetDownPublicOk returns a tuple with the DownPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTrafficMetrics) GetDownPublicOk() (*TrafficMetric, bool) {
	if o == nil || IsNil(o.DownPublic) {
		return nil, false
	}
	return o.DownPublic, true
}

// HasDownPublic returns a boolean if a field has been set.
func (o *DataTrafficMetrics) HasDownPublic() bool {
	if o != nil && !IsNil(o.DownPublic) {
		return true
	}

	return false
}

// SetDownPublic gets a reference to the given TrafficMetric and assigns it to the DownPublic field.
func (o *DataTrafficMetrics) SetDownPublic(v TrafficMetric) {
	o.DownPublic = &v
}

// GetUpPublic returns the UpPublic field value if set, zero value otherwise.
func (o *DataTrafficMetrics) GetUpPublic() TrafficMetric {
	if o == nil || IsNil(o.UpPublic) {
		var ret TrafficMetric
		return ret
	}
	return *o.UpPublic
}

// GetUpPublicOk returns a tuple with the UpPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTrafficMetrics) GetUpPublicOk() (*TrafficMetric, bool) {
	if o == nil || IsNil(o.UpPublic) {
		return nil, false
	}
	return o.UpPublic, true
}

// HasUpPublic returns a boolean if a field has been set.
func (o *DataTrafficMetrics) HasUpPublic() bool {
	if o != nil && !IsNil(o.UpPublic) {
		return true
	}

	return false
}

// SetUpPublic gets a reference to the given TrafficMetric and assigns it to the UpPublic field.
func (o *DataTrafficMetrics) SetUpPublic(v TrafficMetric) {
	o.UpPublic = &v
}

func (o DataTrafficMetrics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataTrafficMetrics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DownPublic) {
		toSerialize["downPublic"] = o.DownPublic
	}
	if !IsNil(o.UpPublic) {
		toSerialize["upPublic"] = o.UpPublic
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DataTrafficMetrics) UnmarshalJSON(data []byte) (err error) {
	varDataTrafficMetrics := _DataTrafficMetrics{}

	err = json.Unmarshal(data, &varDataTrafficMetrics)

	if err != nil {
		return err
	}

	*o = DataTrafficMetrics(varDataTrafficMetrics)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "downPublic")
		delete(additionalProperties, "upPublic")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDataTrafficMetrics struct {
	value *DataTrafficMetrics
	isSet bool
}

func (v NullableDataTrafficMetrics) Get() *DataTrafficMetrics {
	return v.value
}

func (v *NullableDataTrafficMetrics) Set(val *DataTrafficMetrics) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTrafficMetrics) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTrafficMetrics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTrafficMetrics(val *DataTrafficMetrics) *NullableDataTrafficMetrics {
	return &NullableDataTrafficMetrics{value: val, isSet: true}
}

func (v NullableDataTrafficMetrics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTrafficMetrics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


