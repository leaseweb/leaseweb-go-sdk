/*
Public Clouds

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceTypesMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceTypesMetadata{}

// InstanceTypesMetadata struct for InstanceTypesMetadata
type InstanceTypesMetadata struct {
	// Total amount of elements in this collection
	TotalCount int32 `json:"totalCount"`
	// The offset used to generate this response
	Offset int32 `json:"offset"`
	// The limit used to generate this response
	Limit int32 `json:"limit"`
	Currency string `json:"currency"`
	CurrencySymbol string `json:"currencySymbol"`
	AdditionalProperties map[string]interface{}
}

type _InstanceTypesMetadata InstanceTypesMetadata

// NewInstanceTypesMetadata instantiates a new InstanceTypesMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceTypesMetadata(totalCount int32, offset int32, limit int32, currency string, currencySymbol string) *InstanceTypesMetadata {
	this := InstanceTypesMetadata{}
	this.TotalCount = totalCount
	this.Offset = offset
	this.Limit = limit
	this.Currency = currency
	this.CurrencySymbol = currencySymbol
	return &this
}

// NewInstanceTypesMetadataWithDefaults instantiates a new InstanceTypesMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceTypesMetadataWithDefaults() *InstanceTypesMetadata {
	this := InstanceTypesMetadata{}
	var offset int32 = 0
	this.Offset = offset
	var limit int32 = 5
	this.Limit = limit
	return &this
}

// GetTotalCount returns the TotalCount field value
func (o *InstanceTypesMetadata) GetTotalCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *InstanceTypesMetadata) GetTotalCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *InstanceTypesMetadata) SetTotalCount(v int32) {
	o.TotalCount = v
}

// GetOffset returns the Offset field value
func (o *InstanceTypesMetadata) GetOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *InstanceTypesMetadata) GetOffsetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *InstanceTypesMetadata) SetOffset(v int32) {
	o.Offset = v
}

// GetLimit returns the Limit field value
func (o *InstanceTypesMetadata) GetLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *InstanceTypesMetadata) GetLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *InstanceTypesMetadata) SetLimit(v int32) {
	o.Limit = v
}

// GetCurrency returns the Currency field value
func (o *InstanceTypesMetadata) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *InstanceTypesMetadata) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *InstanceTypesMetadata) SetCurrency(v string) {
	o.Currency = v
}

// GetCurrencySymbol returns the CurrencySymbol field value
func (o *InstanceTypesMetadata) GetCurrencySymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrencySymbol
}

// GetCurrencySymbolOk returns a tuple with the CurrencySymbol field value
// and a boolean to check if the value has been set.
func (o *InstanceTypesMetadata) GetCurrencySymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencySymbol, true
}

// SetCurrencySymbol sets field value
func (o *InstanceTypesMetadata) SetCurrencySymbol(v string) {
	o.CurrencySymbol = v
}

func (o InstanceTypesMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceTypesMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["totalCount"] = o.TotalCount
	toSerialize["offset"] = o.Offset
	toSerialize["limit"] = o.Limit
	toSerialize["currency"] = o.Currency
	toSerialize["currencySymbol"] = o.CurrencySymbol

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceTypesMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"totalCount",
		"offset",
		"limit",
		"currency",
		"currencySymbol",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceTypesMetadata := _InstanceTypesMetadata{}

	err = json.Unmarshal(data, &varInstanceTypesMetadata)

	if err != nil {
		return err
	}

	*o = InstanceTypesMetadata(varInstanceTypesMetadata)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "totalCount")
		delete(additionalProperties, "offset")
		delete(additionalProperties, "limit")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "currencySymbol")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceTypesMetadata struct {
	value *InstanceTypesMetadata
	isSet bool
}

func (v NullableInstanceTypesMetadata) Get() *InstanceTypesMetadata {
	return v.value
}

func (v *NullableInstanceTypesMetadata) Set(val *InstanceTypesMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceTypesMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceTypesMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceTypesMetadata(val *InstanceTypesMetadata) *NullableInstanceTypesMetadata {
	return &NullableInstanceTypesMetadata{value: val, isSet: true}
}

func (v NullableInstanceTypesMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceTypesMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


