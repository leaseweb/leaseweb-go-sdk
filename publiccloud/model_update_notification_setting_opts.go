/*
Public Clouds

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
)

// checks if the UpdateNotificationSettingOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateNotificationSettingOpts{}

// UpdateNotificationSettingOpts struct for UpdateNotificationSettingOpts
type UpdateNotificationSettingOpts struct {
	Threshold *NotificationSettingThreshold `json:"threshold,omitempty"`
	TimePeriod *TimePeriod `json:"timePeriod,omitempty"`
	Action NullableAction `json:"action,omitempty"`
	Channels []UpdateNotificationSettingOptsChannelsInner `json:"channels,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateNotificationSettingOpts UpdateNotificationSettingOpts

// NewUpdateNotificationSettingOpts instantiates a new UpdateNotificationSettingOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateNotificationSettingOpts() *UpdateNotificationSettingOpts {
	this := UpdateNotificationSettingOpts{}
	return &this
}

// NewUpdateNotificationSettingOptsWithDefaults instantiates a new UpdateNotificationSettingOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateNotificationSettingOptsWithDefaults() *UpdateNotificationSettingOpts {
	this := UpdateNotificationSettingOpts{}
	return &this
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *UpdateNotificationSettingOpts) GetThreshold() NotificationSettingThreshold {
	if o == nil || IsNil(o.Threshold) {
		var ret NotificationSettingThreshold
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNotificationSettingOpts) GetThresholdOk() (*NotificationSettingThreshold, bool) {
	if o == nil || IsNil(o.Threshold) {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *UpdateNotificationSettingOpts) HasThreshold() bool {
	if o != nil && !IsNil(o.Threshold) {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given NotificationSettingThreshold and assigns it to the Threshold field.
func (o *UpdateNotificationSettingOpts) SetThreshold(v NotificationSettingThreshold) {
	o.Threshold = &v
}

// GetTimePeriod returns the TimePeriod field value if set, zero value otherwise.
func (o *UpdateNotificationSettingOpts) GetTimePeriod() TimePeriod {
	if o == nil || IsNil(o.TimePeriod) {
		var ret TimePeriod
		return ret
	}
	return *o.TimePeriod
}

// GetTimePeriodOk returns a tuple with the TimePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNotificationSettingOpts) GetTimePeriodOk() (*TimePeriod, bool) {
	if o == nil || IsNil(o.TimePeriod) {
		return nil, false
	}
	return o.TimePeriod, true
}

// HasTimePeriod returns a boolean if a field has been set.
func (o *UpdateNotificationSettingOpts) HasTimePeriod() bool {
	if o != nil && !IsNil(o.TimePeriod) {
		return true
	}

	return false
}

// SetTimePeriod gets a reference to the given TimePeriod and assigns it to the TimePeriod field.
func (o *UpdateNotificationSettingOpts) SetTimePeriod(v TimePeriod) {
	o.TimePeriod = &v
}

// GetAction returns the Action field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateNotificationSettingOpts) GetAction() Action {
	if o == nil || IsNil(o.Action.Get()) {
		var ret Action
		return ret
	}
	return *o.Action.Get()
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateNotificationSettingOpts) GetActionOk() (*Action, bool) {
	if o == nil {
		return nil, false
	}
	return o.Action.Get(), o.Action.IsSet()
}

// HasAction returns a boolean if a field has been set.
func (o *UpdateNotificationSettingOpts) HasAction() bool {
	if o != nil && o.Action.IsSet() {
		return true
	}

	return false
}

// SetAction gets a reference to the given NullableAction and assigns it to the Action field.
func (o *UpdateNotificationSettingOpts) SetAction(v Action) {
	o.Action.Set(&v)
}
// SetActionNil sets the value for Action to be an explicit nil
func (o *UpdateNotificationSettingOpts) SetActionNil() {
	o.Action.Set(nil)
}

// UnsetAction ensures that no value is present for Action, not even an explicit nil
func (o *UpdateNotificationSettingOpts) UnsetAction() {
	o.Action.Unset()
}

// GetChannels returns the Channels field value if set, zero value otherwise.
func (o *UpdateNotificationSettingOpts) GetChannels() []UpdateNotificationSettingOptsChannelsInner {
	if o == nil || IsNil(o.Channels) {
		var ret []UpdateNotificationSettingOptsChannelsInner
		return ret
	}
	return o.Channels
}

// GetChannelsOk returns a tuple with the Channels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNotificationSettingOpts) GetChannelsOk() ([]UpdateNotificationSettingOptsChannelsInner, bool) {
	if o == nil || IsNil(o.Channels) {
		return nil, false
	}
	return o.Channels, true
}

// HasChannels returns a boolean if a field has been set.
func (o *UpdateNotificationSettingOpts) HasChannels() bool {
	if o != nil && !IsNil(o.Channels) {
		return true
	}

	return false
}

// SetChannels gets a reference to the given []UpdateNotificationSettingOptsChannelsInner and assigns it to the Channels field.
func (o *UpdateNotificationSettingOpts) SetChannels(v []UpdateNotificationSettingOptsChannelsInner) {
	o.Channels = v
}

func (o UpdateNotificationSettingOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateNotificationSettingOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Threshold) {
		toSerialize["threshold"] = o.Threshold
	}
	if !IsNil(o.TimePeriod) {
		toSerialize["timePeriod"] = o.TimePeriod
	}
	if o.Action.IsSet() {
		toSerialize["action"] = o.Action.Get()
	}
	if !IsNil(o.Channels) {
		toSerialize["channels"] = o.Channels
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateNotificationSettingOpts) UnmarshalJSON(data []byte) (err error) {
	varUpdateNotificationSettingOpts := _UpdateNotificationSettingOpts{}

	err = json.Unmarshal(data, &varUpdateNotificationSettingOpts)

	if err != nil {
		return err
	}

	*o = UpdateNotificationSettingOpts(varUpdateNotificationSettingOpts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "threshold")
		delete(additionalProperties, "timePeriod")
		delete(additionalProperties, "action")
		delete(additionalProperties, "channels")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateNotificationSettingOpts struct {
	value *UpdateNotificationSettingOpts
	isSet bool
}

func (v NullableUpdateNotificationSettingOpts) Get() *UpdateNotificationSettingOpts {
	return v.value
}

func (v *NullableUpdateNotificationSettingOpts) Set(val *UpdateNotificationSettingOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateNotificationSettingOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateNotificationSettingOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateNotificationSettingOpts(val *UpdateNotificationSettingOpts) *NullableUpdateNotificationSettingOpts {
	return &NullableUpdateNotificationSettingOpts{value: val, isSet: true}
}

func (v NullableUpdateNotificationSettingOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateNotificationSettingOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


