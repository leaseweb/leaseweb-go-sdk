/*
Public Clouds

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// MetricGranularity Defines the time interval for data aggregation
type MetricGranularity string

// List of metricGranularity
const (
	METRICGRANULARITY__5M MetricGranularity = "5m"
	METRICGRANULARITY__10M MetricGranularity = "10m"
	METRICGRANULARITY__30M MetricGranularity = "30m"
	METRICGRANULARITY__60M MetricGranularity = "60m"
	METRICGRANULARITY_DAY MetricGranularity = "DAY"
)

// All allowed values of MetricGranularity enum
var AllowedMetricGranularityEnumValues = []MetricGranularity{
	"5m",
	"10m",
	"30m",
	"60m",
	"DAY",
}

func (v *MetricGranularity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MetricGranularity(value)
	for _, existing := range AllowedMetricGranularityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MetricGranularity", value)
}

// NewMetricGranularityFromValue returns a pointer to a valid MetricGranularity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetricGranularityFromValue(v string) (*MetricGranularity, error) {
	ev := MetricGranularity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MetricGranularity: valid values are %v", v, AllowedMetricGranularityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetricGranularity) IsValid() bool {
	for _, existing := range AllowedMetricGranularityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to metricGranularity value
func (v MetricGranularity) Ptr() *MetricGranularity {
	return &v
}

type NullableMetricGranularity struct {
	value *MetricGranularity
	isSet bool
}

func (v NullableMetricGranularity) Get() *MetricGranularity {
	return v.value
}

func (v *NullableMetricGranularity) Set(val *MetricGranularity) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricGranularity) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricGranularity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricGranularity(val *MetricGranularity) *NullableMetricGranularity {
	return &NullableMetricGranularity{value: val, isSet: true}
}

func (v NullableMetricGranularity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricGranularity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

