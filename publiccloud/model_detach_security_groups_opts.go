/*
Public Clouds

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// checks if the DetachSecurityGroupsOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DetachSecurityGroupsOpts{}

// DetachSecurityGroupsOpts struct for DetachSecurityGroupsOpts
type DetachSecurityGroupsOpts struct {
	SecurityGroupIds []string `json:"securityGroupIds"`
	AdditionalProperties map[string]interface{}
}

type _DetachSecurityGroupsOpts DetachSecurityGroupsOpts

// NewDetachSecurityGroupsOpts instantiates a new DetachSecurityGroupsOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetachSecurityGroupsOpts(securityGroupIds []string) *DetachSecurityGroupsOpts {
	this := DetachSecurityGroupsOpts{}
	this.SecurityGroupIds = securityGroupIds
	return &this
}

// NewDetachSecurityGroupsOptsWithDefaults instantiates a new DetachSecurityGroupsOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetachSecurityGroupsOptsWithDefaults() *DetachSecurityGroupsOpts {
	this := DetachSecurityGroupsOpts{}
	return &this
}

// GetSecurityGroupIds returns the SecurityGroupIds field value
func (o *DetachSecurityGroupsOpts) GetSecurityGroupIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SecurityGroupIds
}

// GetSecurityGroupIdsOk returns a tuple with the SecurityGroupIds field value
// and a boolean to check if the value has been set.
func (o *DetachSecurityGroupsOpts) GetSecurityGroupIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecurityGroupIds, true
}

// SetSecurityGroupIds sets field value
func (o *DetachSecurityGroupsOpts) SetSecurityGroupIds(v []string) {
	o.SecurityGroupIds = v
}

func (o DetachSecurityGroupsOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DetachSecurityGroupsOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["securityGroupIds"] = o.SecurityGroupIds

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DetachSecurityGroupsOpts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"securityGroupIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDetachSecurityGroupsOpts := _DetachSecurityGroupsOpts{}

	err = json.Unmarshal(data, &varDetachSecurityGroupsOpts)

	if err != nil {
		return err
	}

	*o = DetachSecurityGroupsOpts(varDetachSecurityGroupsOpts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "securityGroupIds")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDetachSecurityGroupsOpts struct {
	value *DetachSecurityGroupsOpts
	isSet bool
}

func (v NullableDetachSecurityGroupsOpts) Get() *DetachSecurityGroupsOpts {
	return v.value
}

func (v *NullableDetachSecurityGroupsOpts) Set(val *DetachSecurityGroupsOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableDetachSecurityGroupsOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableDetachSecurityGroupsOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetachSecurityGroupsOpts(val *DetachSecurityGroupsOpts) *NullableDetachSecurityGroupsOpts {
	return &NullableDetachSecurityGroupsOpts{value: val, isSet: true}
}

func (v NullableDetachSecurityGroupsOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetachSecurityGroupsOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


