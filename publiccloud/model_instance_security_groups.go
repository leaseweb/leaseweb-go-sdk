/*
Public Clouds

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceSecurityGroups type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceSecurityGroups{}

// InstanceSecurityGroups struct for InstanceSecurityGroups
type InstanceSecurityGroups struct {
	// List of security groups associated with the instance
	SecurityGroups []SecurityGroup `json:"securityGroups"`
	Metadata Metadata `json:"_metadata"`
	AdditionalProperties map[string]interface{}
}

type _InstanceSecurityGroups InstanceSecurityGroups

// NewInstanceSecurityGroups instantiates a new InstanceSecurityGroups object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceSecurityGroups(securityGroups []SecurityGroup, metadata Metadata) *InstanceSecurityGroups {
	this := InstanceSecurityGroups{}
	this.SecurityGroups = securityGroups
	this.Metadata = metadata
	return &this
}

// NewInstanceSecurityGroupsWithDefaults instantiates a new InstanceSecurityGroups object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceSecurityGroupsWithDefaults() *InstanceSecurityGroups {
	this := InstanceSecurityGroups{}
	return &this
}

// GetSecurityGroups returns the SecurityGroups field value
func (o *InstanceSecurityGroups) GetSecurityGroups() []SecurityGroup {
	if o == nil {
		var ret []SecurityGroup
		return ret
	}

	return o.SecurityGroups
}

// GetSecurityGroupsOk returns a tuple with the SecurityGroups field value
// and a boolean to check if the value has been set.
func (o *InstanceSecurityGroups) GetSecurityGroupsOk() ([]SecurityGroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecurityGroups, true
}

// SetSecurityGroups sets field value
func (o *InstanceSecurityGroups) SetSecurityGroups(v []SecurityGroup) {
	o.SecurityGroups = v
}

// GetMetadata returns the Metadata field value
func (o *InstanceSecurityGroups) GetMetadata() Metadata {
	if o == nil {
		var ret Metadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *InstanceSecurityGroups) GetMetadataOk() (*Metadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *InstanceSecurityGroups) SetMetadata(v Metadata) {
	o.Metadata = v
}

func (o InstanceSecurityGroups) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceSecurityGroups) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["securityGroups"] = o.SecurityGroups
	toSerialize["_metadata"] = o.Metadata

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceSecurityGroups) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"securityGroups",
		"_metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceSecurityGroups := _InstanceSecurityGroups{}

	err = json.Unmarshal(data, &varInstanceSecurityGroups)

	if err != nil {
		return err
	}

	*o = InstanceSecurityGroups(varInstanceSecurityGroups)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "securityGroups")
		delete(additionalProperties, "_metadata")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceSecurityGroups struct {
	value *InstanceSecurityGroups
	isSet bool
}

func (v NullableInstanceSecurityGroups) Get() *InstanceSecurityGroups {
	return v.value
}

func (v *NullableInstanceSecurityGroups) Set(val *InstanceSecurityGroups) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceSecurityGroups) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceSecurityGroups) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceSecurityGroups(val *InstanceSecurityGroups) *NullableInstanceSecurityGroups {
	return &NullableInstanceSecurityGroups{value: val, isSet: true}
}

func (v NullableInstanceSecurityGroups) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceSecurityGroups) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


