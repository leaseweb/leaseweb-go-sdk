/*
Public Clouds

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// MarketAppId Standard images market apps
type MarketAppId string

// List of marketAppId
const (
	MARKETAPPID_CPANEL_30 MarketAppId = "CPANEL_30"
	MARKETAPPID_CPANEL_100 MarketAppId = "CPANEL_100"
	MARKETAPPID_CPANEL_ADMIN MarketAppId = "CPANEL_ADMIN"
	MARKETAPPID_CPANEL_PRO MarketAppId = "CPANEL_PRO"
	MARKETAPPID_CPANEL_PLUS MarketAppId = "CPANEL_PLUS"
	MARKETAPPID_CPANEL_PREMIER MarketAppId = "CPANEL_PREMIER"
	MARKETAPPID_PLESK_WEB_PRO MarketAppId = "PLESK_WEB_PRO"
	MARKETAPPID_PLESK_WEB_ADMIN MarketAppId = "PLESK_WEB_ADMIN"
	MARKETAPPID_PLESK_WEB_HOST MarketAppId = "PLESK_WEB_HOST"
)

// All allowed values of MarketAppId enum
var AllowedMarketAppIdEnumValues = []MarketAppId{
	"CPANEL_30",
	"CPANEL_100",
	"CPANEL_ADMIN",
	"CPANEL_PRO",
	"CPANEL_PLUS",
	"CPANEL_PREMIER",
	"PLESK_WEB_PRO",
	"PLESK_WEB_ADMIN",
	"PLESK_WEB_HOST",
}

func (v *MarketAppId) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MarketAppId(value)
	for _, existing := range AllowedMarketAppIdEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MarketAppId", value)
}

// NewMarketAppIdFromValue returns a pointer to a valid MarketAppId
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMarketAppIdFromValue(v string) (*MarketAppId, error) {
	ev := MarketAppId(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MarketAppId: valid values are %v", v, AllowedMarketAppIdEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MarketAppId) IsValid() bool {
	for _, existing := range AllowedMarketAppIdEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to marketAppId value
func (v MarketAppId) Ptr() *MarketAppId {
	return &v
}

type NullableMarketAppId struct {
	value *MarketAppId
	isSet bool
}

func (v NullableMarketAppId) Get() *MarketAppId {
	return v.value
}

func (v *NullableMarketAppId) Set(val *MarketAppId) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketAppId) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketAppId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketAppId(val *MarketAppId) *NullableMarketAppId {
	return &NullableMarketAppId{value: val, isSet: true}
}

func (v NullableMarketAppId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketAppId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

