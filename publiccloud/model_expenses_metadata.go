/*
Public Clouds

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// checks if the ExpensesMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExpensesMetadata{}

// ExpensesMetadata struct for ExpensesMetadata
type ExpensesMetadata struct {
	Currency string `json:"currency"`
	CurrencySymbol string `json:"currencySymbol"`
	AdditionalProperties map[string]interface{}
}

type _ExpensesMetadata ExpensesMetadata

// NewExpensesMetadata instantiates a new ExpensesMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpensesMetadata(currency string, currencySymbol string) *ExpensesMetadata {
	this := ExpensesMetadata{}
	this.Currency = currency
	this.CurrencySymbol = currencySymbol
	return &this
}

// NewExpensesMetadataWithDefaults instantiates a new ExpensesMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpensesMetadataWithDefaults() *ExpensesMetadata {
	this := ExpensesMetadata{}
	return &this
}

// GetCurrency returns the Currency field value
func (o *ExpensesMetadata) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *ExpensesMetadata) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *ExpensesMetadata) SetCurrency(v string) {
	o.Currency = v
}

// GetCurrencySymbol returns the CurrencySymbol field value
func (o *ExpensesMetadata) GetCurrencySymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrencySymbol
}

// GetCurrencySymbolOk returns a tuple with the CurrencySymbol field value
// and a boolean to check if the value has been set.
func (o *ExpensesMetadata) GetCurrencySymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencySymbol, true
}

// SetCurrencySymbol sets field value
func (o *ExpensesMetadata) SetCurrencySymbol(v string) {
	o.CurrencySymbol = v
}

func (o ExpensesMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExpensesMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["currency"] = o.Currency
	toSerialize["currencySymbol"] = o.CurrencySymbol

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExpensesMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"currency",
		"currencySymbol",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExpensesMetadata := _ExpensesMetadata{}

	err = json.Unmarshal(data, &varExpensesMetadata)

	if err != nil {
		return err
	}

	*o = ExpensesMetadata(varExpensesMetadata)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "currency")
		delete(additionalProperties, "currencySymbol")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExpensesMetadata struct {
	value *ExpensesMetadata
	isSet bool
}

func (v NullableExpensesMetadata) Get() *ExpensesMetadata {
	return v.value
}

func (v *NullableExpensesMetadata) Set(val *ExpensesMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableExpensesMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableExpensesMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpensesMetadata(val *ExpensesMetadata) *NullableExpensesMetadata {
	return &NullableExpensesMetadata{value: val, isSet: true}
}

func (v NullableExpensesMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpensesMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


