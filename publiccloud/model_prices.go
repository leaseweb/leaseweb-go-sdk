/*
Public Clouds

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// checks if the Prices type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Prices{}

// Prices struct for Prices
type Prices struct {
	Hourly string `json:"hourly"`
	Monthly string `json:"monthly"`
	AdditionalProperties map[string]interface{}
}

type _Prices Prices

// NewPrices instantiates a new Prices object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrices(hourly string, monthly string) *Prices {
	this := Prices{}
	this.Hourly = hourly
	this.Monthly = monthly
	return &this
}

// NewPricesWithDefaults instantiates a new Prices object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPricesWithDefaults() *Prices {
	this := Prices{}
	return &this
}

// GetHourly returns the Hourly field value
func (o *Prices) GetHourly() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hourly
}

// GetHourlyOk returns a tuple with the Hourly field value
// and a boolean to check if the value has been set.
func (o *Prices) GetHourlyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hourly, true
}

// SetHourly sets field value
func (o *Prices) SetHourly(v string) {
	o.Hourly = v
}

// GetMonthly returns the Monthly field value
func (o *Prices) GetMonthly() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Monthly
}

// GetMonthlyOk returns a tuple with the Monthly field value
// and a boolean to check if the value has been set.
func (o *Prices) GetMonthlyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Monthly, true
}

// SetMonthly sets field value
func (o *Prices) SetMonthly(v string) {
	o.Monthly = v
}

func (o Prices) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Prices) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hourly"] = o.Hourly
	toSerialize["monthly"] = o.Monthly

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Prices) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hourly",
		"monthly",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrices := _Prices{}

	err = json.Unmarshal(data, &varPrices)

	if err != nil {
		return err
	}

	*o = Prices(varPrices)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "hourly")
		delete(additionalProperties, "monthly")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePrices struct {
	value *Prices
	isSet bool
}

func (v NullablePrices) Get() *Prices {
	return v.value
}

func (v *NullablePrices) Set(val *Prices) {
	v.value = val
	v.isSet = true
}

func (v NullablePrices) IsSet() bool {
	return v.isSet
}

func (v *NullablePrices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrices(val *Prices) *NullablePrices {
	return &NullablePrices{value: val, isSet: true}
}

func (v NullablePrices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


