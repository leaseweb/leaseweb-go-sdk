/*
Public Clouds

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// Unit the model 'Unit'
type Unit string

// List of unit
const (
	UNIT_MB Unit = "MB"
	UNIT_GB Unit = "GB"
	UNIT_TB Unit = "TB"
)

// All allowed values of Unit enum
var AllowedUnitEnumValues = []Unit{
	"MB",
	"GB",
	"TB",
}

func (v *Unit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Unit(value)
	for _, existing := range AllowedUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Unit", value)
}

// NewUnitFromValue returns a pointer to a valid Unit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUnitFromValue(v string) (*Unit, error) {
	ev := Unit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Unit: valid values are %v", v, AllowedUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Unit) IsValid() bool {
	for _, existing := range AllowedUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to unit value
func (v Unit) Ptr() *Unit {
	return &v
}

type NullableUnit struct {
	value *Unit
	isSet bool
}

func (v NullableUnit) Get() *Unit {
	return v.value
}

func (v *NullableUnit) Set(val *Unit) {
	v.value = val
	v.isSet = true
}

func (v NullableUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnit(val *Unit) *NullableUnit {
	return &NullableUnit{value: val, isSet: true}
}

func (v NullableUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

