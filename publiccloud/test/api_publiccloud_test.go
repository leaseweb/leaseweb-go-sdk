/*
Public Clouds

Testing PubliccloudAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package publiccloud

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/leaseweb/leaseweb-go-sdk/publiccloud"
)

func Test_publiccloud_PubliccloudAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PubliccloudAPIService AddToPrivateNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PubliccloudAPI.AddToPrivateNetwork(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService AttachIso", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PubliccloudAPI.AttachIso(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService CancelInstanceTermination", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PubliccloudAPI.CancelInstanceTermination(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService CreateAutoScalingGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PubliccloudAPI.CreateAutoScalingGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService CreateImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PubliccloudAPI.CreateImage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService CreateLoadBalancerListener", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string

		resp, httpRes, err := apiClient.PubliccloudAPI.CreateLoadBalancerListener(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService CreateNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var notificationSettingId string

		resp, httpRes, err := apiClient.PubliccloudAPI.CreateNotificationSetting(context.Background(), instanceId, notificationSettingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService CreateSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PubliccloudAPI.CreateSnapshot(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService CreateTargetGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PubliccloudAPI.CreateTargetGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService DeleteAutoScalingGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var autoScalingGroupId string

		httpRes, err := apiClient.PubliccloudAPI.DeleteAutoScalingGroup(context.Background(), autoScalingGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService DeleteCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var type_ CredentialType
		var username string

		httpRes, err := apiClient.PubliccloudAPI.DeleteCredential(context.Background(), instanceId, type_, username).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService DeleteCredentials", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PubliccloudAPI.DeleteCredentials(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService DeleteLoadBalancerListener", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string
		var listenerId string

		httpRes, err := apiClient.PubliccloudAPI.DeleteLoadBalancerListener(context.Background(), loadBalancerId, listenerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService DeleteNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var notificationSettingId string

		httpRes, err := apiClient.PubliccloudAPI.DeleteNotificationSetting(context.Background(), instanceId, notificationSettingId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService DeleteSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var snapshotId string

		httpRes, err := apiClient.PubliccloudAPI.DeleteSnapshot(context.Background(), instanceId, snapshotId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService DeleteTargetGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetGroupId string

		httpRes, err := apiClient.PubliccloudAPI.DeleteTargetGroup(context.Background(), targetGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService DeregisterAutoScalingGroupTargetGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var autoScalingGroupId string

		resp, httpRes, err := apiClient.PubliccloudAPI.DeregisterAutoScalingGroupTargetGroup(context.Background(), autoScalingGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService DeregisterTargets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetGroupId string

		httpRes, err := apiClient.PubliccloudAPI.DeregisterTargets(context.Background(), targetGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService DetachIso", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PubliccloudAPI.DetachIso(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetAutoScalingGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var autoScalingGroupId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetAutoScalingGroup(context.Background(), autoScalingGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetAutoScalingGroupInstanceList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var autoScalingGroupId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetAutoScalingGroupInstanceList(context.Background(), autoScalingGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetAutoScalingGroupList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PubliccloudAPI.GetAutoScalingGroupList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetConnectionsMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetConnectionsMetrics(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetConnectionsPerSecondMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetConnectionsPerSecondMetrics(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetConsoleAccess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetConsoleAccess(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var type_ CredentialType
		var username string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetCredential(context.Background(), instanceId, type_, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetCredentialList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetCredentialList(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetCredentialListByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var type_ CredentialType

		resp, httpRes, err := apiClient.PubliccloudAPI.GetCredentialListByType(context.Background(), instanceId, type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetDataTransferredMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetDataTransferredMetrics(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetDataTransferredPerSecondMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetDataTransferredPerSecondMetrics(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetExpenses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var equipmentId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetExpenses(context.Background(), equipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetImageList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PubliccloudAPI.GetImageList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetInstanceCpuMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetInstanceCpuMetrics(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetInstanceDataTrafficMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetInstanceDataTrafficMetrics(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetInstanceIP", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var ip string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetInstanceIP(context.Background(), instanceId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetInstanceIPList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetInstanceIPList(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetInstanceList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PubliccloudAPI.GetInstanceList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetInstanceTypeList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PubliccloudAPI.GetInstanceTypeList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetIsoList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PubliccloudAPI.GetIsoList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetLoadBalancer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetLoadBalancer(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetLoadBalancerCpuMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetLoadBalancerCpuMetrics(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetLoadBalancerDataTrafficMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetLoadBalancerDataTrafficMetrics(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetLoadBalancerIP", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string
		var ip string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetLoadBalancerIP(context.Background(), loadBalancerId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetLoadBalancerIPList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetLoadBalancerIPList(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetLoadBalancerList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PubliccloudAPI.GetLoadBalancerList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetLoadBalancerListener", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string
		var listenerId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetLoadBalancerListener(context.Background(), loadBalancerId, listenerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetLoadBalancerListenerList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetLoadBalancerListenerList(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetMarketAppList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PubliccloudAPI.GetMarketAppList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var notificationSettingId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetNotificationSetting(context.Background(), instanceId, notificationSettingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetNotificationSettingList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetNotificationSettingList(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetRegionList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PubliccloudAPI.GetRegionList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetReinstallImageList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetReinstallImageList(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetRequestsMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetRequestsMetrics(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetRequestsPerSecondMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetRequestsPerSecondMetrics(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetResponseCodesMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetResponseCodesMetrics(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetResponseCodesPerSecondMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetResponseCodesPerSecondMetrics(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var snapshotId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetSnapshot(context.Background(), instanceId, snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetSnapshotList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetSnapshotList(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetTargetGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetGroupId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetTargetGroup(context.Background(), targetGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetTargetGroupList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PubliccloudAPI.GetTargetGroupList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetTargetList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetGroupId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetTargetList(context.Background(), targetGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService GetUpdateInstanceTypeList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PubliccloudAPI.GetUpdateInstanceTypeList(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService LaunchInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PubliccloudAPI.LaunchInstance(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService LaunchLoadBalancer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PubliccloudAPI.LaunchLoadBalancer(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService NullRouteInstanceIP", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var ip string

		resp, httpRes, err := apiClient.PubliccloudAPI.NullRouteInstanceIP(context.Background(), instanceId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService NullRouteLoadBalancerIP", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string
		var ip string

		resp, httpRes, err := apiClient.PubliccloudAPI.NullRouteLoadBalancerIP(context.Background(), loadBalancerId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService RebootInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PubliccloudAPI.RebootInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService RebootLoadBalancer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string

		httpRes, err := apiClient.PubliccloudAPI.RebootLoadBalancer(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService RegisterAutoScalingGroupTargetGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var autoScalingGroupId string

		resp, httpRes, err := apiClient.PubliccloudAPI.RegisterAutoScalingGroupTargetGroup(context.Background(), autoScalingGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService RegisterTargets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetGroupId string

		httpRes, err := apiClient.PubliccloudAPI.RegisterTargets(context.Background(), targetGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService ReinstallInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PubliccloudAPI.ReinstallInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService RemoveFromPrivateNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PubliccloudAPI.RemoveFromPrivateNetwork(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService RemoveInstanceIPNullRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var ip string

		resp, httpRes, err := apiClient.PubliccloudAPI.RemoveInstanceIPNullRoute(context.Background(), instanceId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService RemoveLoadBalancerIPNullRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string
		var ip string

		resp, httpRes, err := apiClient.PubliccloudAPI.RemoveLoadBalancerIPNullRoute(context.Background(), loadBalancerId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService ResetPassword", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PubliccloudAPI.ResetPassword(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService RestoreSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var snapshotId string

		httpRes, err := apiClient.PubliccloudAPI.RestoreSnapshot(context.Background(), instanceId, snapshotId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService StartInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PubliccloudAPI.StartInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService StartLoadBalancer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string

		httpRes, err := apiClient.PubliccloudAPI.StartLoadBalancer(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService StopInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PubliccloudAPI.StopInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService StopLoadBalancer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string

		httpRes, err := apiClient.PubliccloudAPI.StopLoadBalancer(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService StoreCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PubliccloudAPI.StoreCredential(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService TerminateInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		httpRes, err := apiClient.PubliccloudAPI.TerminateInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService TerminateLoadBalancer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string

		httpRes, err := apiClient.PubliccloudAPI.TerminateLoadBalancer(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService UpdateAutoScalingGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var autoScalingGroupId string

		resp, httpRes, err := apiClient.PubliccloudAPI.UpdateAutoScalingGroup(context.Background(), autoScalingGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService UpdateCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var type_ CredentialType
		var username string

		resp, httpRes, err := apiClient.PubliccloudAPI.UpdateCredential(context.Background(), instanceId, type_, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService UpdateImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var imageId string

		resp, httpRes, err := apiClient.PubliccloudAPI.UpdateImage(context.Background(), imageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService UpdateInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.PubliccloudAPI.UpdateInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService UpdateInstanceIP", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var ip string

		resp, httpRes, err := apiClient.PubliccloudAPI.UpdateInstanceIP(context.Background(), instanceId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService UpdateLoadBalancer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string

		resp, httpRes, err := apiClient.PubliccloudAPI.UpdateLoadBalancer(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService UpdateLoadBalancerIP", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string
		var ip string

		resp, httpRes, err := apiClient.PubliccloudAPI.UpdateLoadBalancerIP(context.Background(), loadBalancerId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService UpdateLoadBalancerListener", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loadBalancerId string
		var listenerId string

		resp, httpRes, err := apiClient.PubliccloudAPI.UpdateLoadBalancerListener(context.Background(), loadBalancerId, listenerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService UpdateNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string
		var notificationSettingId string

		resp, httpRes, err := apiClient.PubliccloudAPI.UpdateNotificationSetting(context.Background(), instanceId, notificationSettingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PubliccloudAPIService UpdateTargetGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetGroupId string

		resp, httpRes, err := apiClient.PubliccloudAPI.UpdateTargetGroup(context.Background(), targetGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
