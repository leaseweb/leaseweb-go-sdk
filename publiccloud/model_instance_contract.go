/*
Public Clouds

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceContract type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceContract{}

// InstanceContract struct for InstanceContract
type InstanceContract struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	Term ContractTerm `json:"term"`
	Type ContractType `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _InstanceContract InstanceContract

// NewInstanceContract instantiates a new InstanceContract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceContract(billingFrequency BillingFrequency, term ContractTerm, type_ ContractType) *InstanceContract {
	this := InstanceContract{}
	this.BillingFrequency = billingFrequency
	this.Term = term
	this.Type = type_
	return &this
}

// NewInstanceContractWithDefaults instantiates a new InstanceContract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceContractWithDefaults() *InstanceContract {
	this := InstanceContract{}
	return &this
}

// GetBillingFrequency returns the BillingFrequency field value
func (o *InstanceContract) GetBillingFrequency() BillingFrequency {
	if o == nil {
		var ret BillingFrequency
		return ret
	}

	return o.BillingFrequency
}

// GetBillingFrequencyOk returns a tuple with the BillingFrequency field value
// and a boolean to check if the value has been set.
func (o *InstanceContract) GetBillingFrequencyOk() (*BillingFrequency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BillingFrequency, true
}

// SetBillingFrequency sets field value
func (o *InstanceContract) SetBillingFrequency(v BillingFrequency) {
	o.BillingFrequency = v
}

// GetTerm returns the Term field value
func (o *InstanceContract) GetTerm() ContractTerm {
	if o == nil {
		var ret ContractTerm
		return ret
	}

	return o.Term
}

// GetTermOk returns a tuple with the Term field value
// and a boolean to check if the value has been set.
func (o *InstanceContract) GetTermOk() (*ContractTerm, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Term, true
}

// SetTerm sets field value
func (o *InstanceContract) SetTerm(v ContractTerm) {
	o.Term = v
}

// GetType returns the Type field value
func (o *InstanceContract) GetType() ContractType {
	if o == nil {
		var ret ContractType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InstanceContract) GetTypeOk() (*ContractType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InstanceContract) SetType(v ContractType) {
	o.Type = v
}

func (o InstanceContract) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceContract) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["billingFrequency"] = o.BillingFrequency
	toSerialize["term"] = o.Term
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceContract) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"billingFrequency",
		"term",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceContract := _InstanceContract{}

	err = json.Unmarshal(data, &varInstanceContract)

	if err != nil {
		return err
	}

	*o = InstanceContract(varInstanceContract)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "billingFrequency")
		delete(additionalProperties, "term")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceContract struct {
	value *InstanceContract
	isSet bool
}

func (v NullableInstanceContract) Get() *InstanceContract {
	return v.value
}

func (v *NullableInstanceContract) Set(val *InstanceContract) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceContract) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceContract(val *InstanceContract) *NullableInstanceContract {
	return &NullableInstanceContract{value: val, isSet: true}
}

func (v NullableInstanceContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


