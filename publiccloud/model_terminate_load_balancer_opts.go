/*
Public Clouds

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// checks if the TerminateLoadBalancerOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TerminateLoadBalancerOpts{}

// TerminateLoadBalancerOpts struct for TerminateLoadBalancerOpts
type TerminateLoadBalancerOpts struct {
	// The reason code for terminating the instance. This is a required field. Please refer at this page for the valid options: [Cancel Reasons](https://developer.leaseweb.com/docs/#tag/Services/operation/services-cancel-reasons-get)
	ReasonCode string `json:"reasonCode"`
	// Required only when reasonCode is CANCEL_OTHER.
	Reason *string `json:"reason,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TerminateLoadBalancerOpts TerminateLoadBalancerOpts

// NewTerminateLoadBalancerOpts instantiates a new TerminateLoadBalancerOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerminateLoadBalancerOpts(reasonCode string) *TerminateLoadBalancerOpts {
	this := TerminateLoadBalancerOpts{}
	this.ReasonCode = reasonCode
	return &this
}

// NewTerminateLoadBalancerOptsWithDefaults instantiates a new TerminateLoadBalancerOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTerminateLoadBalancerOptsWithDefaults() *TerminateLoadBalancerOpts {
	this := TerminateLoadBalancerOpts{}
	return &this
}

// GetReasonCode returns the ReasonCode field value
func (o *TerminateLoadBalancerOpts) GetReasonCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value
// and a boolean to check if the value has been set.
func (o *TerminateLoadBalancerOpts) GetReasonCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReasonCode, true
}

// SetReasonCode sets field value
func (o *TerminateLoadBalancerOpts) SetReasonCode(v string) {
	o.ReasonCode = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *TerminateLoadBalancerOpts) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminateLoadBalancerOpts) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *TerminateLoadBalancerOpts) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *TerminateLoadBalancerOpts) SetReason(v string) {
	o.Reason = &v
}

func (o TerminateLoadBalancerOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TerminateLoadBalancerOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reasonCode"] = o.ReasonCode
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TerminateLoadBalancerOpts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reasonCode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTerminateLoadBalancerOpts := _TerminateLoadBalancerOpts{}

	err = json.Unmarshal(data, &varTerminateLoadBalancerOpts)

	if err != nil {
		return err
	}

	*o = TerminateLoadBalancerOpts(varTerminateLoadBalancerOpts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "reasonCode")
		delete(additionalProperties, "reason")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTerminateLoadBalancerOpts struct {
	value *TerminateLoadBalancerOpts
	isSet bool
}

func (v NullableTerminateLoadBalancerOpts) Get() *TerminateLoadBalancerOpts {
	return v.value
}

func (v *NullableTerminateLoadBalancerOpts) Set(val *TerminateLoadBalancerOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableTerminateLoadBalancerOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableTerminateLoadBalancerOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerminateLoadBalancerOpts(val *TerminateLoadBalancerOpts) *NullableTerminateLoadBalancerOpts {
	return &NullableTerminateLoadBalancerOpts{value: val, isSet: true}
}

func (v NullableTerminateLoadBalancerOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerminateLoadBalancerOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


