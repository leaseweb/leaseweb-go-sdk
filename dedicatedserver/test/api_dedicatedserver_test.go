/*
Dedicated Servers

Testing DedicatedserverAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package dedicatedserver

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/leaseweb/leaseweb-go-sdk/dedicatedserver/v2"
)

func Test_dedicatedserver_DedicatedserverAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DedicatedserverAPIService AddToPrivateNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var privateNetworkId string

		httpRes, err := apiClient.DedicatedserverAPI.AddToPrivateNetwork(context.Background(), serverId, privateNetworkId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService CancelActiveJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.CancelActiveJob(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService CloseNetworkInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var networkTypeURL NetworkTypeURL

		httpRes, err := apiClient.DedicatedserverAPI.CloseNetworkInterface(context.Background(), serverId, networkTypeURL).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService CloseNetworkInterfaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedserverAPI.CloseNetworkInterfaces(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService CreateBandwidthNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.CreateBandwidthNotificationSetting(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService CreateCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.CreateCredential(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService CreateDataTrafficNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.CreateDataTrafficNotificationSetting(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService CreateDhcpReservation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedserverAPI.CreateDhcpReservation(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService DeleteBandwidthNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var notificationSettingId string

		httpRes, err := apiClient.DedicatedserverAPI.DeleteBandwidthNotificationSetting(context.Background(), serverId, notificationSettingId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService DeleteCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var type_ CredentialType
		var username string

		httpRes, err := apiClient.DedicatedserverAPI.DeleteCredential(context.Background(), serverId, type_, username).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService DeleteDataTrafficNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var notificationSettingId string

		httpRes, err := apiClient.DedicatedserverAPI.DeleteDataTrafficNotificationSetting(context.Background(), serverId, notificationSettingId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService DeleteDhcpReservation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedserverAPI.DeleteDhcpReservation(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService DeleteFromPrivateNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var privateNetworkId string

		httpRes, err := apiClient.DedicatedserverAPI.DeleteFromPrivateNetwork(context.Background(), serverId, privateNetworkId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService EnableRescueMode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.EnableRescueMode(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService ExpireActiveJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.ExpireActiveJob(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetBandwidthMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetBandwidthMetrics(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetBandwidthNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var notificationSettingId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetBandwidthNotificationSetting(context.Background(), serverId, notificationSettingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetBandwidthNotificationSettingList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetBandwidthNotificationSettingList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetControlPanelList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetControlPanelList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetControlPanelListByOperatingSystemId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var operatingSystemId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetControlPanelListByOperatingSystemId(context.Background(), operatingSystemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var type_ CredentialType
		var username string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetCredential(context.Background(), serverId, type_, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetCredentialList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetCredentialList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetCredentialListByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var type_ CredentialType

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetCredentialListByType(context.Background(), serverId, type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetDataTrafficMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetDataTrafficMetrics(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetDataTrafficNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var notificationSettingId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetDataTrafficNotificationSetting(context.Background(), serverId, notificationSettingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetDataTrafficNotificationSettingList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetDataTrafficNotificationSettingList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetDdosNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetDdosNotificationSetting(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetDhcpReservationList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetDhcpReservationList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetHardware", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetHardware(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetIp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetIp(context.Background(), serverId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetIpList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetIpList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var jobId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetJob(context.Background(), serverId, jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetJobList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetJobList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetNetworkInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var networkTypeURL NetworkTypeURL

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetNetworkInterface(context.Background(), serverId, networkTypeURL).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetNetworkInterfaceList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetNetworkInterfaceList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetNullRouteHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetNullRouteHistory(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetOperatingSystem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var operatingSystemId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetOperatingSystem(context.Background(), operatingSystemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetOperatingSystemList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetOperatingSystemList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetPowerStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetPowerStatus(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetRescueImageList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetRescueImageList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServer(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServerList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServerList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService InstallOperatingSystem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.InstallOperatingSystem(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService IpmiReset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.IpmiReset(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService NullIpRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedserverAPI.NullIpRoute(context.Background(), serverId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService OpenNetworkInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var networkTypeURL NetworkTypeURL

		httpRes, err := apiClient.DedicatedserverAPI.OpenNetworkInterface(context.Background(), serverId, networkTypeURL).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService OpenNetworkInterfaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedserverAPI.OpenNetworkInterfaces(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService PowerCycle", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedserverAPI.PowerCycle(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService PowerOff", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedserverAPI.PowerOff(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService PowerOn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedserverAPI.PowerOn(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService RemoveNullIpRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedserverAPI.RemoveNullIpRoute(context.Background(), serverId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService RetryJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var jobId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.RetryJob(context.Background(), serverId, jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService ScanHardware", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.ScanHardware(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService UpdateBandwidthNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var notificationSettingId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.UpdateBandwidthNotificationSetting(context.Background(), serverId, notificationSettingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService UpdateCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var type_ CredentialType
		var username string

		resp, httpRes, err := apiClient.DedicatedserverAPI.UpdateCredential(context.Background(), serverId, type_, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService UpdateDataTrafficNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var notificationSettingId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.UpdateDataTrafficNotificationSetting(context.Background(), serverId, notificationSettingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService UpdateDdosNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedserverAPI.UpdateDdosNotificationSetting(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService UpdateIpProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedserverAPI.UpdateIpProfile(context.Background(), serverId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService UpdateReference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedserverAPI.UpdateReference(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
