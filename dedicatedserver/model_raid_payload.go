/*
Dedicated Servers

This is the description of the Dedicated Server API.  The base url of this API is `https://api.leaseweb.com`.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the RaidPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RaidPayload{}

// RaidPayload struct for RaidPayload
type RaidPayload struct {
	// The type of RAID
	Type *string `json:"type,omitempty"`
	// The RAID level
	Level NullableInt32 `json:"level,omitempty"`
	// The number of disks in the RAID
	NumberOfDisks NullableInt32 `json:"numberOfDisks,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RaidPayload RaidPayload

// NewRaidPayload instantiates a new RaidPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRaidPayload() *RaidPayload {
	this := RaidPayload{}
	return &this
}

// NewRaidPayloadWithDefaults instantiates a new RaidPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRaidPayloadWithDefaults() *RaidPayload {
	this := RaidPayload{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RaidPayload) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RaidPayload) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RaidPayload) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RaidPayload) SetType(v string) {
	o.Type = &v
}

// GetLevel returns the Level field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RaidPayload) GetLevel() int32 {
	if o == nil || IsNil(o.Level.Get()) {
		var ret int32
		return ret
	}
	return *o.Level.Get()
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RaidPayload) GetLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Level.Get(), o.Level.IsSet()
}

// HasLevel returns a boolean if a field has been set.
func (o *RaidPayload) HasLevel() bool {
	if o != nil && o.Level.IsSet() {
		return true
	}

	return false
}

// SetLevel gets a reference to the given NullableInt32 and assigns it to the Level field.
func (o *RaidPayload) SetLevel(v int32) {
	o.Level.Set(&v)
}
// SetLevelNil sets the value for Level to be an explicit nil
func (o *RaidPayload) SetLevelNil() {
	o.Level.Set(nil)
}

// UnsetLevel ensures that no value is present for Level, not even an explicit nil
func (o *RaidPayload) UnsetLevel() {
	o.Level.Unset()
}

// GetNumberOfDisks returns the NumberOfDisks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RaidPayload) GetNumberOfDisks() int32 {
	if o == nil || IsNil(o.NumberOfDisks.Get()) {
		var ret int32
		return ret
	}
	return *o.NumberOfDisks.Get()
}

// GetNumberOfDisksOk returns a tuple with the NumberOfDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RaidPayload) GetNumberOfDisksOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumberOfDisks.Get(), o.NumberOfDisks.IsSet()
}

// HasNumberOfDisks returns a boolean if a field has been set.
func (o *RaidPayload) HasNumberOfDisks() bool {
	if o != nil && o.NumberOfDisks.IsSet() {
		return true
	}

	return false
}

// SetNumberOfDisks gets a reference to the given NullableInt32 and assigns it to the NumberOfDisks field.
func (o *RaidPayload) SetNumberOfDisks(v int32) {
	o.NumberOfDisks.Set(&v)
}
// SetNumberOfDisksNil sets the value for NumberOfDisks to be an explicit nil
func (o *RaidPayload) SetNumberOfDisksNil() {
	o.NumberOfDisks.Set(nil)
}

// UnsetNumberOfDisks ensures that no value is present for NumberOfDisks, not even an explicit nil
func (o *RaidPayload) UnsetNumberOfDisks() {
	o.NumberOfDisks.Unset()
}

func (o RaidPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RaidPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.Level.IsSet() {
		toSerialize["level"] = o.Level.Get()
	}
	if o.NumberOfDisks.IsSet() {
		toSerialize["numberOfDisks"] = o.NumberOfDisks.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RaidPayload) UnmarshalJSON(data []byte) (err error) {
	varRaidPayload := _RaidPayload{}

	err = json.Unmarshal(data, &varRaidPayload)

	if err != nil {
		return err
	}

	*o = RaidPayload(varRaidPayload)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "level")
		delete(additionalProperties, "numberOfDisks")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRaidPayload struct {
	value *RaidPayload
	isSet bool
}

func (v NullableRaidPayload) Get() *RaidPayload {
	return v.value
}

func (v *NullableRaidPayload) Set(val *RaidPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableRaidPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableRaidPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRaidPayload(val *RaidPayload) *NullableRaidPayload {
	return &NullableRaidPayload{value: val, isSet: true}
}

func (v NullableRaidPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRaidPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


