/*
Dedicated Servers

This is the description of the Dedicated Server API.  The base url of this API is `https://api.leaseweb.com`.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
	"fmt"
)


// JobPayload struct for JobPayload
type JobPayload struct {
	GenericPayload *GenericPayload
	InstallOperatingSystemPayload *InstallOperatingSystemPayload
	RescueModePayload *RescueModePayload
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *JobPayload) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into GenericPayload
	err = json.Unmarshal(data, &dst.GenericPayload);
	if err == nil {
		jsonGenericPayload, _ := json.Marshal(dst.GenericPayload)
		if string(jsonGenericPayload) == "{}" { // empty struct
			dst.GenericPayload = nil
		} else {
			return nil // data stored in dst.GenericPayload, return on the first match
		}
	} else {
		dst.GenericPayload = nil
	}

	// try to unmarshal JSON data into InstallOperatingSystemPayload
	err = json.Unmarshal(data, &dst.InstallOperatingSystemPayload);
	if err == nil {
		jsonInstallOperatingSystemPayload, _ := json.Marshal(dst.InstallOperatingSystemPayload)
		if string(jsonInstallOperatingSystemPayload) == "{}" { // empty struct
			dst.InstallOperatingSystemPayload = nil
		} else {
			return nil // data stored in dst.InstallOperatingSystemPayload, return on the first match
		}
	} else {
		dst.InstallOperatingSystemPayload = nil
	}

	// try to unmarshal JSON data into RescueModePayload
	err = json.Unmarshal(data, &dst.RescueModePayload);
	if err == nil {
		jsonRescueModePayload, _ := json.Marshal(dst.RescueModePayload)
		if string(jsonRescueModePayload) == "{}" { // empty struct
			dst.RescueModePayload = nil
		} else {
			return nil // data stored in dst.RescueModePayload, return on the first match
		}
	} else {
		dst.RescueModePayload = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(JobPayload)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *JobPayload) MarshalJSON() ([]byte, error) {
	if src.GenericPayload != nil {
		return json.Marshal(&src.GenericPayload)
	}

	if src.InstallOperatingSystemPayload != nil {
		return json.Marshal(&src.InstallOperatingSystemPayload)
	}

	if src.RescueModePayload != nil {
		return json.Marshal(&src.RescueModePayload)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableJobPayload struct {
	value *JobPayload
	isSet bool
}

func (v NullableJobPayload) Get() *JobPayload {
	return v.value
}

func (v *NullableJobPayload) Set(val *JobPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableJobPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableJobPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobPayload(val *JobPayload) *NullableJobPayload {
	return &NullableJobPayload{value: val, isSet: true}
}

func (v NullableJobPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


