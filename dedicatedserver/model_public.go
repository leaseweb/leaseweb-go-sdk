/*
Dedicated Servers

This is the description of the Dedicated Server API.  The base url of this API is `https://api.leaseweb.com`.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the Public type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Public{}

// Public struct for Public
type Public struct {
	// The IP address of the server
	Ip *string `json:"ip,omitempty"`
	// The MAC address of the server's first network interface
	Mac *string `json:"mac,omitempty"`
	// The CIDR of the server
	Cidr *string `json:"cidr,omitempty"`
	// The IP's prefix
	Prefix *int32 `json:"prefix,omitempty"`
	// The network gateway of the server
	Gateway *string `json:"gateway,omitempty"`
	// The netmask of the server
	Netmask *string `json:"netmask,omitempty"`
	// The network of the server
	Network *string `json:"network,omitempty"`
	// Whether the network is custom
	IsCustom *bool `json:"isCustom,omitempty"`
	// The broadcast network of the server
	Broadcast *string `json:"broadcast,omitempty"`
	// The nameservers of the server
	Nameservers []string `json:"nameservers,omitempty"`
	// The netmask of the server in hex
	NetmaskHex *string `json:"netmask_hex,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Public Public

// NewPublic instantiates a new Public object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublic() *Public {
	this := Public{}
	return &this
}

// NewPublicWithDefaults instantiates a new Public object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicWithDefaults() *Public {
	this := Public{}
	return &this
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *Public) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Public) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *Public) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *Public) SetIp(v string) {
	o.Ip = &v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *Public) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Public) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *Public) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *Public) SetMac(v string) {
	o.Mac = &v
}

// GetCidr returns the Cidr field value if set, zero value otherwise.
func (o *Public) GetCidr() string {
	if o == nil || IsNil(o.Cidr) {
		var ret string
		return ret
	}
	return *o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Public) GetCidrOk() (*string, bool) {
	if o == nil || IsNil(o.Cidr) {
		return nil, false
	}
	return o.Cidr, true
}

// HasCidr returns a boolean if a field has been set.
func (o *Public) HasCidr() bool {
	if o != nil && !IsNil(o.Cidr) {
		return true
	}

	return false
}

// SetCidr gets a reference to the given string and assigns it to the Cidr field.
func (o *Public) SetCidr(v string) {
	o.Cidr = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *Public) GetPrefix() int32 {
	if o == nil || IsNil(o.Prefix) {
		var ret int32
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Public) GetPrefixOk() (*int32, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *Public) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given int32 and assigns it to the Prefix field.
func (o *Public) SetPrefix(v int32) {
	o.Prefix = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *Public) GetGateway() string {
	if o == nil || IsNil(o.Gateway) {
		var ret string
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Public) GetGatewayOk() (*string, bool) {
	if o == nil || IsNil(o.Gateway) {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *Public) HasGateway() bool {
	if o != nil && !IsNil(o.Gateway) {
		return true
	}

	return false
}

// SetGateway gets a reference to the given string and assigns it to the Gateway field.
func (o *Public) SetGateway(v string) {
	o.Gateway = &v
}

// GetNetmask returns the Netmask field value if set, zero value otherwise.
func (o *Public) GetNetmask() string {
	if o == nil || IsNil(o.Netmask) {
		var ret string
		return ret
	}
	return *o.Netmask
}

// GetNetmaskOk returns a tuple with the Netmask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Public) GetNetmaskOk() (*string, bool) {
	if o == nil || IsNil(o.Netmask) {
		return nil, false
	}
	return o.Netmask, true
}

// HasNetmask returns a boolean if a field has been set.
func (o *Public) HasNetmask() bool {
	if o != nil && !IsNil(o.Netmask) {
		return true
	}

	return false
}

// SetNetmask gets a reference to the given string and assigns it to the Netmask field.
func (o *Public) SetNetmask(v string) {
	o.Netmask = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *Public) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Public) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *Public) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *Public) SetNetwork(v string) {
	o.Network = &v
}

// GetIsCustom returns the IsCustom field value if set, zero value otherwise.
func (o *Public) GetIsCustom() bool {
	if o == nil || IsNil(o.IsCustom) {
		var ret bool
		return ret
	}
	return *o.IsCustom
}

// GetIsCustomOk returns a tuple with the IsCustom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Public) GetIsCustomOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCustom) {
		return nil, false
	}
	return o.IsCustom, true
}

// HasIsCustom returns a boolean if a field has been set.
func (o *Public) HasIsCustom() bool {
	if o != nil && !IsNil(o.IsCustom) {
		return true
	}

	return false
}

// SetIsCustom gets a reference to the given bool and assigns it to the IsCustom field.
func (o *Public) SetIsCustom(v bool) {
	o.IsCustom = &v
}

// GetBroadcast returns the Broadcast field value if set, zero value otherwise.
func (o *Public) GetBroadcast() string {
	if o == nil || IsNil(o.Broadcast) {
		var ret string
		return ret
	}
	return *o.Broadcast
}

// GetBroadcastOk returns a tuple with the Broadcast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Public) GetBroadcastOk() (*string, bool) {
	if o == nil || IsNil(o.Broadcast) {
		return nil, false
	}
	return o.Broadcast, true
}

// HasBroadcast returns a boolean if a field has been set.
func (o *Public) HasBroadcast() bool {
	if o != nil && !IsNil(o.Broadcast) {
		return true
	}

	return false
}

// SetBroadcast gets a reference to the given string and assigns it to the Broadcast field.
func (o *Public) SetBroadcast(v string) {
	o.Broadcast = &v
}

// GetNameservers returns the Nameservers field value if set, zero value otherwise.
func (o *Public) GetNameservers() []string {
	if o == nil || IsNil(o.Nameservers) {
		var ret []string
		return ret
	}
	return o.Nameservers
}

// GetNameserversOk returns a tuple with the Nameservers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Public) GetNameserversOk() ([]string, bool) {
	if o == nil || IsNil(o.Nameservers) {
		return nil, false
	}
	return o.Nameservers, true
}

// HasNameservers returns a boolean if a field has been set.
func (o *Public) HasNameservers() bool {
	if o != nil && !IsNil(o.Nameservers) {
		return true
	}

	return false
}

// SetNameservers gets a reference to the given []string and assigns it to the Nameservers field.
func (o *Public) SetNameservers(v []string) {
	o.Nameservers = v
}

// GetNetmaskHex returns the NetmaskHex field value if set, zero value otherwise.
func (o *Public) GetNetmaskHex() string {
	if o == nil || IsNil(o.NetmaskHex) {
		var ret string
		return ret
	}
	return *o.NetmaskHex
}

// GetNetmaskHexOk returns a tuple with the NetmaskHex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Public) GetNetmaskHexOk() (*string, bool) {
	if o == nil || IsNil(o.NetmaskHex) {
		return nil, false
	}
	return o.NetmaskHex, true
}

// HasNetmaskHex returns a boolean if a field has been set.
func (o *Public) HasNetmaskHex() bool {
	if o != nil && !IsNil(o.NetmaskHex) {
		return true
	}

	return false
}

// SetNetmaskHex gets a reference to the given string and assigns it to the NetmaskHex field.
func (o *Public) SetNetmaskHex(v string) {
	o.NetmaskHex = &v
}

func (o Public) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Public) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	if !IsNil(o.Cidr) {
		toSerialize["cidr"] = o.Cidr
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.Gateway) {
		toSerialize["gateway"] = o.Gateway
	}
	if !IsNil(o.Netmask) {
		toSerialize["netmask"] = o.Netmask
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.IsCustom) {
		toSerialize["isCustom"] = o.IsCustom
	}
	if !IsNil(o.Broadcast) {
		toSerialize["broadcast"] = o.Broadcast
	}
	if !IsNil(o.Nameservers) {
		toSerialize["nameservers"] = o.Nameservers
	}
	if !IsNil(o.NetmaskHex) {
		toSerialize["netmask_hex"] = o.NetmaskHex
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Public) UnmarshalJSON(data []byte) (err error) {
	varPublic := _Public{}

	err = json.Unmarshal(data, &varPublic)

	if err != nil {
		return err
	}

	*o = Public(varPublic)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ip")
		delete(additionalProperties, "mac")
		delete(additionalProperties, "cidr")
		delete(additionalProperties, "prefix")
		delete(additionalProperties, "gateway")
		delete(additionalProperties, "netmask")
		delete(additionalProperties, "network")
		delete(additionalProperties, "isCustom")
		delete(additionalProperties, "broadcast")
		delete(additionalProperties, "nameservers")
		delete(additionalProperties, "netmask_hex")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePublic struct {
	value *Public
	isSet bool
}

func (v NullablePublic) Get() *Public {
	return v.value
}

func (v *NullablePublic) Set(val *Public) {
	v.value = val
	v.isSet = true
}

func (v NullablePublic) IsSet() bool {
	return v.isSet
}

func (v *NullablePublic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublic(val *Public) *NullablePublic {
	return &NullablePublic{value: val, isSet: true}
}

func (v NullablePublic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


