/*
Dedicated Servers

This is the description of the Dedicated Server API.  The base url of this API is `https://api.leaseweb.com`.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
	"time"
)

// checks if the StatusTimestamps type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatusTimestamps{}

// StatusTimestamps Timestamp for each state change
type StatusTimestamps struct {
	WAITING *time.Time `json:"WAITING,omitempty"`
	PENDING *time.Time `json:"PENDING,omitempty"`
	INPROGRESS *time.Time `json:"INPROGRESS,omitempty"`
	REBOOTING *time.Time `json:"REBOOTING,omitempty"`
	FINISHED *time.Time `json:"FINISHED,omitempty"`
	FAILED *time.Time `json:"FAILED,omitempty"`
	SKIPPED *time.Time `json:"SKIPPED,omitempty"`
	CANCELED *time.Time `json:"CANCELED,omitempty"`
	WARNING *time.Time `json:"WARNING,omitempty"`
	EXPIRED *time.Time `json:"EXPIRED,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StatusTimestamps StatusTimestamps

// NewStatusTimestamps instantiates a new StatusTimestamps object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusTimestamps() *StatusTimestamps {
	this := StatusTimestamps{}
	return &this
}

// NewStatusTimestampsWithDefaults instantiates a new StatusTimestamps object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusTimestampsWithDefaults() *StatusTimestamps {
	this := StatusTimestamps{}
	return &this
}

// GetWAITING returns the WAITING field value if set, zero value otherwise.
func (o *StatusTimestamps) GetWAITING() time.Time {
	if o == nil || IsNil(o.WAITING) {
		var ret time.Time
		return ret
	}
	return *o.WAITING
}

// GetWAITINGOk returns a tuple with the WAITING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusTimestamps) GetWAITINGOk() (*time.Time, bool) {
	if o == nil || IsNil(o.WAITING) {
		return nil, false
	}
	return o.WAITING, true
}

// HasWAITING returns a boolean if a field has been set.
func (o *StatusTimestamps) HasWAITING() bool {
	if o != nil && !IsNil(o.WAITING) {
		return true
	}

	return false
}

// SetWAITING gets a reference to the given time.Time and assigns it to the WAITING field.
func (o *StatusTimestamps) SetWAITING(v time.Time) {
	o.WAITING = &v
}

// GetPENDING returns the PENDING field value if set, zero value otherwise.
func (o *StatusTimestamps) GetPENDING() time.Time {
	if o == nil || IsNil(o.PENDING) {
		var ret time.Time
		return ret
	}
	return *o.PENDING
}

// GetPENDINGOk returns a tuple with the PENDING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusTimestamps) GetPENDINGOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PENDING) {
		return nil, false
	}
	return o.PENDING, true
}

// HasPENDING returns a boolean if a field has been set.
func (o *StatusTimestamps) HasPENDING() bool {
	if o != nil && !IsNil(o.PENDING) {
		return true
	}

	return false
}

// SetPENDING gets a reference to the given time.Time and assigns it to the PENDING field.
func (o *StatusTimestamps) SetPENDING(v time.Time) {
	o.PENDING = &v
}

// GetINPROGRESS returns the INPROGRESS field value if set, zero value otherwise.
func (o *StatusTimestamps) GetINPROGRESS() time.Time {
	if o == nil || IsNil(o.INPROGRESS) {
		var ret time.Time
		return ret
	}
	return *o.INPROGRESS
}

// GetINPROGRESSOk returns a tuple with the INPROGRESS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusTimestamps) GetINPROGRESSOk() (*time.Time, bool) {
	if o == nil || IsNil(o.INPROGRESS) {
		return nil, false
	}
	return o.INPROGRESS, true
}

// HasINPROGRESS returns a boolean if a field has been set.
func (o *StatusTimestamps) HasINPROGRESS() bool {
	if o != nil && !IsNil(o.INPROGRESS) {
		return true
	}

	return false
}

// SetINPROGRESS gets a reference to the given time.Time and assigns it to the INPROGRESS field.
func (o *StatusTimestamps) SetINPROGRESS(v time.Time) {
	o.INPROGRESS = &v
}

// GetREBOOTING returns the REBOOTING field value if set, zero value otherwise.
func (o *StatusTimestamps) GetREBOOTING() time.Time {
	if o == nil || IsNil(o.REBOOTING) {
		var ret time.Time
		return ret
	}
	return *o.REBOOTING
}

// GetREBOOTINGOk returns a tuple with the REBOOTING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusTimestamps) GetREBOOTINGOk() (*time.Time, bool) {
	if o == nil || IsNil(o.REBOOTING) {
		return nil, false
	}
	return o.REBOOTING, true
}

// HasREBOOTING returns a boolean if a field has been set.
func (o *StatusTimestamps) HasREBOOTING() bool {
	if o != nil && !IsNil(o.REBOOTING) {
		return true
	}

	return false
}

// SetREBOOTING gets a reference to the given time.Time and assigns it to the REBOOTING field.
func (o *StatusTimestamps) SetREBOOTING(v time.Time) {
	o.REBOOTING = &v
}

// GetFINISHED returns the FINISHED field value if set, zero value otherwise.
func (o *StatusTimestamps) GetFINISHED() time.Time {
	if o == nil || IsNil(o.FINISHED) {
		var ret time.Time
		return ret
	}
	return *o.FINISHED
}

// GetFINISHEDOk returns a tuple with the FINISHED field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusTimestamps) GetFINISHEDOk() (*time.Time, bool) {
	if o == nil || IsNil(o.FINISHED) {
		return nil, false
	}
	return o.FINISHED, true
}

// HasFINISHED returns a boolean if a field has been set.
func (o *StatusTimestamps) HasFINISHED() bool {
	if o != nil && !IsNil(o.FINISHED) {
		return true
	}

	return false
}

// SetFINISHED gets a reference to the given time.Time and assigns it to the FINISHED field.
func (o *StatusTimestamps) SetFINISHED(v time.Time) {
	o.FINISHED = &v
}

// GetFAILED returns the FAILED field value if set, zero value otherwise.
func (o *StatusTimestamps) GetFAILED() time.Time {
	if o == nil || IsNil(o.FAILED) {
		var ret time.Time
		return ret
	}
	return *o.FAILED
}

// GetFAILEDOk returns a tuple with the FAILED field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusTimestamps) GetFAILEDOk() (*time.Time, bool) {
	if o == nil || IsNil(o.FAILED) {
		return nil, false
	}
	return o.FAILED, true
}

// HasFAILED returns a boolean if a field has been set.
func (o *StatusTimestamps) HasFAILED() bool {
	if o != nil && !IsNil(o.FAILED) {
		return true
	}

	return false
}

// SetFAILED gets a reference to the given time.Time and assigns it to the FAILED field.
func (o *StatusTimestamps) SetFAILED(v time.Time) {
	o.FAILED = &v
}

// GetSKIPPED returns the SKIPPED field value if set, zero value otherwise.
func (o *StatusTimestamps) GetSKIPPED() time.Time {
	if o == nil || IsNil(o.SKIPPED) {
		var ret time.Time
		return ret
	}
	return *o.SKIPPED
}

// GetSKIPPEDOk returns a tuple with the SKIPPED field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusTimestamps) GetSKIPPEDOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SKIPPED) {
		return nil, false
	}
	return o.SKIPPED, true
}

// HasSKIPPED returns a boolean if a field has been set.
func (o *StatusTimestamps) HasSKIPPED() bool {
	if o != nil && !IsNil(o.SKIPPED) {
		return true
	}

	return false
}

// SetSKIPPED gets a reference to the given time.Time and assigns it to the SKIPPED field.
func (o *StatusTimestamps) SetSKIPPED(v time.Time) {
	o.SKIPPED = &v
}

// GetCANCELED returns the CANCELED field value if set, zero value otherwise.
func (o *StatusTimestamps) GetCANCELED() time.Time {
	if o == nil || IsNil(o.CANCELED) {
		var ret time.Time
		return ret
	}
	return *o.CANCELED
}

// GetCANCELEDOk returns a tuple with the CANCELED field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusTimestamps) GetCANCELEDOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CANCELED) {
		return nil, false
	}
	return o.CANCELED, true
}

// HasCANCELED returns a boolean if a field has been set.
func (o *StatusTimestamps) HasCANCELED() bool {
	if o != nil && !IsNil(o.CANCELED) {
		return true
	}

	return false
}

// SetCANCELED gets a reference to the given time.Time and assigns it to the CANCELED field.
func (o *StatusTimestamps) SetCANCELED(v time.Time) {
	o.CANCELED = &v
}

// GetWARNING returns the WARNING field value if set, zero value otherwise.
func (o *StatusTimestamps) GetWARNING() time.Time {
	if o == nil || IsNil(o.WARNING) {
		var ret time.Time
		return ret
	}
	return *o.WARNING
}

// GetWARNINGOk returns a tuple with the WARNING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusTimestamps) GetWARNINGOk() (*time.Time, bool) {
	if o == nil || IsNil(o.WARNING) {
		return nil, false
	}
	return o.WARNING, true
}

// HasWARNING returns a boolean if a field has been set.
func (o *StatusTimestamps) HasWARNING() bool {
	if o != nil && !IsNil(o.WARNING) {
		return true
	}

	return false
}

// SetWARNING gets a reference to the given time.Time and assigns it to the WARNING field.
func (o *StatusTimestamps) SetWARNING(v time.Time) {
	o.WARNING = &v
}

// GetEXPIRED returns the EXPIRED field value if set, zero value otherwise.
func (o *StatusTimestamps) GetEXPIRED() time.Time {
	if o == nil || IsNil(o.EXPIRED) {
		var ret time.Time
		return ret
	}
	return *o.EXPIRED
}

// GetEXPIREDOk returns a tuple with the EXPIRED field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusTimestamps) GetEXPIREDOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EXPIRED) {
		return nil, false
	}
	return o.EXPIRED, true
}

// HasEXPIRED returns a boolean if a field has been set.
func (o *StatusTimestamps) HasEXPIRED() bool {
	if o != nil && !IsNil(o.EXPIRED) {
		return true
	}

	return false
}

// SetEXPIRED gets a reference to the given time.Time and assigns it to the EXPIRED field.
func (o *StatusTimestamps) SetEXPIRED(v time.Time) {
	o.EXPIRED = &v
}

func (o StatusTimestamps) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatusTimestamps) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.WAITING) {
		toSerialize["WAITING"] = o.WAITING
	}
	if !IsNil(o.PENDING) {
		toSerialize["PENDING"] = o.PENDING
	}
	if !IsNil(o.INPROGRESS) {
		toSerialize["INPROGRESS"] = o.INPROGRESS
	}
	if !IsNil(o.REBOOTING) {
		toSerialize["REBOOTING"] = o.REBOOTING
	}
	if !IsNil(o.FINISHED) {
		toSerialize["FINISHED"] = o.FINISHED
	}
	if !IsNil(o.FAILED) {
		toSerialize["FAILED"] = o.FAILED
	}
	if !IsNil(o.SKIPPED) {
		toSerialize["SKIPPED"] = o.SKIPPED
	}
	if !IsNil(o.CANCELED) {
		toSerialize["CANCELED"] = o.CANCELED
	}
	if !IsNil(o.WARNING) {
		toSerialize["WARNING"] = o.WARNING
	}
	if !IsNil(o.EXPIRED) {
		toSerialize["EXPIRED"] = o.EXPIRED
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StatusTimestamps) UnmarshalJSON(data []byte) (err error) {
	varStatusTimestamps := _StatusTimestamps{}

	err = json.Unmarshal(data, &varStatusTimestamps)

	if err != nil {
		return err
	}

	*o = StatusTimestamps(varStatusTimestamps)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "WAITING")
		delete(additionalProperties, "PENDING")
		delete(additionalProperties, "INPROGRESS")
		delete(additionalProperties, "REBOOTING")
		delete(additionalProperties, "FINISHED")
		delete(additionalProperties, "FAILED")
		delete(additionalProperties, "SKIPPED")
		delete(additionalProperties, "CANCELED")
		delete(additionalProperties, "WARNING")
		delete(additionalProperties, "EXPIRED")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStatusTimestamps struct {
	value *StatusTimestamps
	isSet bool
}

func (v NullableStatusTimestamps) Get() *StatusTimestamps {
	return v.value
}

func (v *NullableStatusTimestamps) Set(val *StatusTimestamps) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusTimestamps) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusTimestamps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusTimestamps(val *StatusTimestamps) *NullableStatusTimestamps {
	return &NullableStatusTimestamps{value: val, isSet: true}
}

func (v NullableStatusTimestamps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusTimestamps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


