/*
Dedicated Servers

This is the description of the Dedicated Server API.  The base url of this API is `https://api.leaseweb.com`.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// Smartctl - struct for Smartctl
type Smartctl struct {
	Smartctl *Smartctl
	Bool *bool
}

// SmartctlAsSmartctl is a convenience function that returns Smartctl wrapped in Smartctl
func SmartctlAsSmartctl(v *Smartctl) Smartctl {
	return Smartctl{
		Smartctl: v,
	}
}

// boolAsSmartctl is a convenience function that returns bool wrapped in Smartctl
func BoolAsSmartctl(v *bool) Smartctl {
	return Smartctl{
		Bool: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Smartctl) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Smartctl
	err = newStrictDecoder(data).Decode(&dst.Smartctl)
	if err == nil {
		jsonSmartctl, _ := json.Marshal(dst.Smartctl)
		if string(jsonSmartctl) == "{}" { // empty struct
			dst.Smartctl = nil
		} else {
			if err = validator.Validate(dst.Smartctl); err != nil {
				dst.Smartctl = nil
			} else {
				match++
			}
		}
	} else {
		dst.Smartctl = nil
	}

	// try to unmarshal data into Bool
	err = newStrictDecoder(data).Decode(&dst.Bool)
	if err == nil {
		jsonBool, _ := json.Marshal(dst.Bool)
		if string(jsonBool) == "{}" { // empty struct
			dst.Bool = nil
		} else {
			if err = validator.Validate(dst.Bool); err != nil {
				dst.Bool = nil
			} else {
				match++
			}
		}
	} else {
		dst.Bool = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Smartctl = nil
		dst.Bool = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Smartctl)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Smartctl)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Smartctl) MarshalJSON() ([]byte, error) {
	if src.Smartctl != nil {
		return json.Marshal(&src.Smartctl)
	}

	if src.Bool != nil {
		return json.Marshal(&src.Bool)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Smartctl) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Smartctl != nil {
		return obj.Smartctl
	}

	if obj.Bool != nil {
		return obj.Bool
	}

	// all schemas are nil
	return nil
}

type NullableSmartctl struct {
	value *Smartctl
	isSet bool
}

func (v NullableSmartctl) Get() *Smartctl {
	return v.value
}

func (v *NullableSmartctl) Set(val *Smartctl) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartctl) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartctl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartctl(val *Smartctl) *NullableSmartctl {
	return &NullableSmartctl{value: val, isSet: true}
}

func (v NullableSmartctl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartctl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


