/*
Dedicated Servers

This is the description of the Dedicated Server API.  The base url of this API is `https://api.leaseweb.com`.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the Internal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Internal{}

// Internal struct for Internal
type Internal struct {
	// The MAC address of the server's internal network interface
	Mac *string `json:"mac,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Internal Internal

// NewInternal instantiates a new Internal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInternal() *Internal {
	this := Internal{}
	return &this
}

// NewInternalWithDefaults instantiates a new Internal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInternalWithDefaults() *Internal {
	this := Internal{}
	return &this
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *Internal) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Internal) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *Internal) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *Internal) SetMac(v string) {
	o.Mac = &v
}

func (o Internal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Internal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Internal) UnmarshalJSON(data []byte) (err error) {
	varInternal := _Internal{}

	err = json.Unmarshal(data, &varInternal)

	if err != nil {
		return err
	}

	*o = Internal(varInternal)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "mac")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInternal struct {
	value *Internal
	isSet bool
}

func (v NullableInternal) Get() *Internal {
	return v.value
}

func (v *NullableInternal) Set(val *Internal) {
	v.value = val
	v.isSet = true
}

func (v NullableInternal) IsSet() bool {
	return v.isSet
}

func (v *NullableInternal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInternal(val *Internal) *NullableInternal {
	return &NullableInternal{value: val, isSet: true}
}

func (v NullableInternal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInternal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


