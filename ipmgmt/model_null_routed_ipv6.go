/*
IP management

> The base URL for this API is: **https://api.leaseweb.com/ipMgmt/v2/_**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipmgmt

import (
	"encoding/json"
	"fmt"
)

// checks if the NullRoutedIPv6 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NullRoutedIPv6{}

// NullRoutedIPv6 struct for NullRoutedIPv6
type NullRoutedIPv6 struct {
	// IP address
	Ip string `json:"ip"`
	// Null route level
	NullLevel int32 `json:"nullLevel"`
	// Describes whether the current user is allowed to unnull the IP
	UnnullingAllowed bool `json:"unnullingAllowed"`
	AdditionalProperties map[string]interface{}
}

type _NullRoutedIPv6 NullRoutedIPv6

// NewNullRoutedIPv6 instantiates a new NullRoutedIPv6 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNullRoutedIPv6(ip string, nullLevel int32, unnullingAllowed bool) *NullRoutedIPv6 {
	this := NullRoutedIPv6{}
	this.Ip = ip
	this.NullLevel = nullLevel
	this.UnnullingAllowed = unnullingAllowed
	return &this
}

// NewNullRoutedIPv6WithDefaults instantiates a new NullRoutedIPv6 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNullRoutedIPv6WithDefaults() *NullRoutedIPv6 {
	this := NullRoutedIPv6{}
	return &this
}

// GetIp returns the Ip field value
func (o *NullRoutedIPv6) GetIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value
// and a boolean to check if the value has been set.
func (o *NullRoutedIPv6) GetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ip, true
}

// SetIp sets field value
func (o *NullRoutedIPv6) SetIp(v string) {
	o.Ip = v
}

// GetNullLevel returns the NullLevel field value
func (o *NullRoutedIPv6) GetNullLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NullLevel
}

// GetNullLevelOk returns a tuple with the NullLevel field value
// and a boolean to check if the value has been set.
func (o *NullRoutedIPv6) GetNullLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NullLevel, true
}

// SetNullLevel sets field value
func (o *NullRoutedIPv6) SetNullLevel(v int32) {
	o.NullLevel = v
}

// GetUnnullingAllowed returns the UnnullingAllowed field value
func (o *NullRoutedIPv6) GetUnnullingAllowed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UnnullingAllowed
}

// GetUnnullingAllowedOk returns a tuple with the UnnullingAllowed field value
// and a boolean to check if the value has been set.
func (o *NullRoutedIPv6) GetUnnullingAllowedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnnullingAllowed, true
}

// SetUnnullingAllowed sets field value
func (o *NullRoutedIPv6) SetUnnullingAllowed(v bool) {
	o.UnnullingAllowed = v
}

func (o NullRoutedIPv6) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NullRoutedIPv6) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ip"] = o.Ip
	toSerialize["nullLevel"] = o.NullLevel
	toSerialize["unnullingAllowed"] = o.UnnullingAllowed

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NullRoutedIPv6) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ip",
		"nullLevel",
		"unnullingAllowed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNullRoutedIPv6 := _NullRoutedIPv6{}

	err = json.Unmarshal(data, &varNullRoutedIPv6)

	if err != nil {
		return err
	}

	*o = NullRoutedIPv6(varNullRoutedIPv6)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ip")
		delete(additionalProperties, "nullLevel")
		delete(additionalProperties, "unnullingAllowed")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNullRoutedIPv6 struct {
	value *NullRoutedIPv6
	isSet bool
}

func (v NullableNullRoutedIPv6) Get() *NullRoutedIPv6 {
	return v.value
}

func (v *NullableNullRoutedIPv6) Set(val *NullRoutedIPv6) {
	v.value = val
	v.isSet = true
}

func (v NullableNullRoutedIPv6) IsSet() bool {
	return v.isSet
}

func (v *NullableNullRoutedIPv6) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNullRoutedIPv6(val *NullRoutedIPv6) *NullableNullRoutedIPv6 {
	return &NullableNullRoutedIPv6{value: val, isSet: true}
}

func (v NullableNullRoutedIPv6) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNullRoutedIPv6) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


