/*
Invoices

The base URL for this API is: https://api.leaseweb.com/invoices/v1/ This API provides an overview of all your Invoices  

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package invoice

import (
	"encoding/json"
)

// checks if the LineItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LineItem{}

// LineItem struct for LineItem
type LineItem struct {
	// A string to indicate what kind of product this is
	Product *string `json:"product,omitempty"`
	// The amount it cost for a single product unit.
	UnitAmount *float32 `json:"unitAmount,omitempty"`
	// The total amount of the product
	TotalAmount *float32 `json:"totalAmount,omitempty"`
	// The product start date (UTC)
	FromDate *string `json:"fromDate,omitempty"`
	// The product end date (UTC)
	ToDate *string `json:"toDate,omitempty"`
	// The id of the equipment
	EquipmentId *string `json:"equipmentId,omitempty"`
	// The id of the contract
	ContractId *string `json:"contractId,omitempty"`
	// The quantity of a product
	Quantity *int32 `json:"quantity,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LineItem LineItem

// NewLineItem instantiates a new LineItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLineItem() *LineItem {
	this := LineItem{}
	return &this
}

// NewLineItemWithDefaults instantiates a new LineItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLineItemWithDefaults() *LineItem {
	this := LineItem{}
	return &this
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *LineItem) GetProduct() string {
	if o == nil || IsNil(o.Product) {
		var ret string
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetProductOk() (*string, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *LineItem) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given string and assigns it to the Product field.
func (o *LineItem) SetProduct(v string) {
	o.Product = &v
}

// GetUnitAmount returns the UnitAmount field value if set, zero value otherwise.
func (o *LineItem) GetUnitAmount() float32 {
	if o == nil || IsNil(o.UnitAmount) {
		var ret float32
		return ret
	}
	return *o.UnitAmount
}

// GetUnitAmountOk returns a tuple with the UnitAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetUnitAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.UnitAmount) {
		return nil, false
	}
	return o.UnitAmount, true
}

// HasUnitAmount returns a boolean if a field has been set.
func (o *LineItem) HasUnitAmount() bool {
	if o != nil && !IsNil(o.UnitAmount) {
		return true
	}

	return false
}

// SetUnitAmount gets a reference to the given float32 and assigns it to the UnitAmount field.
func (o *LineItem) SetUnitAmount(v float32) {
	o.UnitAmount = &v
}

// GetTotalAmount returns the TotalAmount field value if set, zero value otherwise.
func (o *LineItem) GetTotalAmount() float32 {
	if o == nil || IsNil(o.TotalAmount) {
		var ret float32
		return ret
	}
	return *o.TotalAmount
}

// GetTotalAmountOk returns a tuple with the TotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetTotalAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalAmount) {
		return nil, false
	}
	return o.TotalAmount, true
}

// HasTotalAmount returns a boolean if a field has been set.
func (o *LineItem) HasTotalAmount() bool {
	if o != nil && !IsNil(o.TotalAmount) {
		return true
	}

	return false
}

// SetTotalAmount gets a reference to the given float32 and assigns it to the TotalAmount field.
func (o *LineItem) SetTotalAmount(v float32) {
	o.TotalAmount = &v
}

// GetFromDate returns the FromDate field value if set, zero value otherwise.
func (o *LineItem) GetFromDate() string {
	if o == nil || IsNil(o.FromDate) {
		var ret string
		return ret
	}
	return *o.FromDate
}

// GetFromDateOk returns a tuple with the FromDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetFromDateOk() (*string, bool) {
	if o == nil || IsNil(o.FromDate) {
		return nil, false
	}
	return o.FromDate, true
}

// HasFromDate returns a boolean if a field has been set.
func (o *LineItem) HasFromDate() bool {
	if o != nil && !IsNil(o.FromDate) {
		return true
	}

	return false
}

// SetFromDate gets a reference to the given string and assigns it to the FromDate field.
func (o *LineItem) SetFromDate(v string) {
	o.FromDate = &v
}

// GetToDate returns the ToDate field value if set, zero value otherwise.
func (o *LineItem) GetToDate() string {
	if o == nil || IsNil(o.ToDate) {
		var ret string
		return ret
	}
	return *o.ToDate
}

// GetToDateOk returns a tuple with the ToDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetToDateOk() (*string, bool) {
	if o == nil || IsNil(o.ToDate) {
		return nil, false
	}
	return o.ToDate, true
}

// HasToDate returns a boolean if a field has been set.
func (o *LineItem) HasToDate() bool {
	if o != nil && !IsNil(o.ToDate) {
		return true
	}

	return false
}

// SetToDate gets a reference to the given string and assigns it to the ToDate field.
func (o *LineItem) SetToDate(v string) {
	o.ToDate = &v
}

// GetEquipmentId returns the EquipmentId field value if set, zero value otherwise.
func (o *LineItem) GetEquipmentId() string {
	if o == nil || IsNil(o.EquipmentId) {
		var ret string
		return ret
	}
	return *o.EquipmentId
}

// GetEquipmentIdOk returns a tuple with the EquipmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetEquipmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.EquipmentId) {
		return nil, false
	}
	return o.EquipmentId, true
}

// HasEquipmentId returns a boolean if a field has been set.
func (o *LineItem) HasEquipmentId() bool {
	if o != nil && !IsNil(o.EquipmentId) {
		return true
	}

	return false
}

// SetEquipmentId gets a reference to the given string and assigns it to the EquipmentId field.
func (o *LineItem) SetEquipmentId(v string) {
	o.EquipmentId = &v
}

// GetContractId returns the ContractId field value if set, zero value otherwise.
func (o *LineItem) GetContractId() string {
	if o == nil || IsNil(o.ContractId) {
		var ret string
		return ret
	}
	return *o.ContractId
}

// GetContractIdOk returns a tuple with the ContractId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetContractIdOk() (*string, bool) {
	if o == nil || IsNil(o.ContractId) {
		return nil, false
	}
	return o.ContractId, true
}

// HasContractId returns a boolean if a field has been set.
func (o *LineItem) HasContractId() bool {
	if o != nil && !IsNil(o.ContractId) {
		return true
	}

	return false
}

// SetContractId gets a reference to the given string and assigns it to the ContractId field.
func (o *LineItem) SetContractId(v string) {
	o.ContractId = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *LineItem) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *LineItem) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *LineItem) SetQuantity(v int32) {
	o.Quantity = &v
}

func (o LineItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LineItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	if !IsNil(o.UnitAmount) {
		toSerialize["unitAmount"] = o.UnitAmount
	}
	if !IsNil(o.TotalAmount) {
		toSerialize["totalAmount"] = o.TotalAmount
	}
	if !IsNil(o.FromDate) {
		toSerialize["fromDate"] = o.FromDate
	}
	if !IsNil(o.ToDate) {
		toSerialize["toDate"] = o.ToDate
	}
	if !IsNil(o.EquipmentId) {
		toSerialize["equipmentId"] = o.EquipmentId
	}
	if !IsNil(o.ContractId) {
		toSerialize["contractId"] = o.ContractId
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LineItem) UnmarshalJSON(data []byte) (err error) {
	varLineItem := _LineItem{}

	err = json.Unmarshal(data, &varLineItem)

	if err != nil {
		return err
	}

	*o = LineItem(varLineItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "product")
		delete(additionalProperties, "unitAmount")
		delete(additionalProperties, "totalAmount")
		delete(additionalProperties, "fromDate")
		delete(additionalProperties, "toDate")
		delete(additionalProperties, "equipmentId")
		delete(additionalProperties, "contractId")
		delete(additionalProperties, "quantity")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLineItem struct {
	value *LineItem
	isSet bool
}

func (v NullableLineItem) Get() *LineItem {
	return v.value
}

func (v *NullableLineItem) Set(val *LineItem) {
	v.value = val
	v.isSet = true
}

func (v NullableLineItem) IsSet() bool {
	return v.isSet
}

func (v *NullableLineItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLineItem(val *LineItem) *NullableLineItem {
	return &NullableLineItem{value: val, isSet: true}
}

func (v NullableLineItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLineItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


